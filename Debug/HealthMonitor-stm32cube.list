
HealthMonitor-stm32cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d778  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  0800d908  0800d908  0000e908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e44c  0800e44c  000102c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e44c  0800e44c  0000f44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e454  0800e454  000102c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e454  0800e454  0000f454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e458  0800e458  0000f458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  0800e45c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c74  200002c0  0800e71c  000102c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f34  0800e71c  00010f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c554  00000000  00000000  000102f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c4b  00000000  00000000  0002c844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133f  00000000  00000000  00032dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c600  00000000  00000000  0003410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c0e  00000000  00000000  0006070f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f982d  00000000  00000000  0008231d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bb4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007834  00000000  00000000  0017bb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001833c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8f0 	.word	0x0800d8f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0800d8f0 	.word	0x0800d8f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ea8:	d016      	beq.n	8000ed8 <HAL_GPIO_EXTI_Callback+0x40>
 8000eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000eae:	dc16      	bgt.n	8000ede <HAL_GPIO_EXTI_Callback+0x46>
 8000eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x3a>
 8000eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eba:	dc10      	bgt.n	8000ede <HAL_GPIO_EXTI_Callback+0x46>
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d002      	beq.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x2e>
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_EXTI_Callback+0x34>
      I2C_MAX30105_ISR();
      break;
    }
    default:
    {
      break;
 8000ec4:	e00b      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x46>
      SPI_WIFI_ISR();
 8000ec6:	f008 fca9 	bl	800981c <SPI_WIFI_ISR>
      break;
 8000eca:	e009      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x48>
      M24SR_GPO_Callback();
 8000ecc:	f002 fa72 	bl	80033b4 <M24SR_GPO_Callback>
      break;
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x48>
      USER_Button_Callback();
 8000ed2:	f000 f92d 	bl	8001130 <USER_Button_Callback>
      break;
 8000ed6:	e003      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x48>
      I2C_MAX30105_ISR();
 8000ed8:	f009 fbc8 	bl	800a66c <I2C_MAX30105_ISR>
      break;
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x48>
      break;
 8000ede:	bf00      	nop
    }
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <EXTI4_IRQHandler>:
__weak void USER_Button_Callback(void)
{
}

void EXTI4_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(NFC_GPIO_GPO_PIN);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f002 ff5d 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <main>:
uint8_t pdata = 3;
uint16_t bytesSent;
uint16_t bytesReceived;

int main(void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	ed2d 8b06 	vpush	{d8-d10}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af04      	add	r7, sp, #16
	HAL_Init();
 8000f02:	f002 fa69 	bl	80033d8 <HAL_Init>

	// Peripherals initialization
	Clock_Init();
 8000f06:	f000 ff03 	bl	8001d10 <Clock_Init>
	GPIO_Init();
 8000f0a:	f000 ff97 	bl	8001e3c <GPIO_Init>
	I2C1_Init();
 8000f0e:	f001 f945 	bl	800219c <I2C1_Init>
	UART1_Init();
 8000f12:	f001 f983 	bl	800221c <UART1_Init>
	// Drivers initialization
	BSP_TSENSOR_Init();
 8000f16:	f001 fcb3 	bl	8002880 <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 8000f1a:	f001 fbe7 	bl	80026ec <BSP_GYRO_Init>
	BSP_ACCELERO_Init();
 8000f1e:	f001 fb8f 	bl	8002640 <BSP_ACCELERO_Init>
	BSP_HSENSOR_Init();
 8000f22:	f001 fc25 	bl	8002770 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8000f26:	f001 fc7d 	bl	8002824 <BSP_PSENSOR_Init>
	BSP_MAGNETO_Init();
 8000f2a:	f001 fc4f 	bl	80027cc <BSP_MAGNETO_Init>
	max3010x_init();
 8000f2e:	f008 fcd9 	bl	80098e4 <max3010x_init>
	mlx90615_init();
 8000f32:	f009 fc25 	bl	800a780 <mlx90615_init>
	printf("Initialisation WiFi: %d\n", WIFI_Init());
 8000f36:	f009 fc3b 	bl	800a7b0 <WIFI_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	484b      	ldr	r0, [pc, #300]	@ (800106c <main+0x174>)
 8000f40:	f00a fac0 	bl	800b4c4 <iprintf>
	// printf("Pressure: %f\n", BSP_PSENSOR_ReadPressure());
	// mlx90615_init(); // intialisation capteur infrarouge
	// printf("IR sensor ID: %08lx\n", mlx90615_get_id()); // lecture ID du capteur infrarouge
	//
	// //calibration capteur
	printf("\n\n****** Calibration de l'accelerometre ******\n");
 8000f44:	484a      	ldr	r0, [pc, #296]	@ (8001070 <main+0x178>)
 8000f46:	f00a fb25 	bl	800b594 <puts>
	HAL_Delay(3000);
 8000f4a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f4e:	f002 fab7 	bl	80034c0 <HAL_Delay>
	BSP_ACCELERO_AccGetXYZ(acceleroDataBase);
 8000f52:	4848      	ldr	r0, [pc, #288]	@ (8001074 <main+0x17c>)
 8000f54:	f001 fbb2 	bl	80026bc <BSP_ACCELERO_AccGetXYZ>
	sumAcceleroBase = acceleroDataBase[0] + acceleroDataBase[1]+ acceleroDataBase[2];
 8000f58:	4b46      	ldr	r3, [pc, #280]	@ (8001074 <main+0x17c>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b44      	ldr	r3, [pc, #272]	@ (8001074 <main+0x17c>)
 8000f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b41      	ldr	r3, [pc, #260]	@ (8001074 <main+0x17c>)
 8000f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001078 <main+0x180>)
 8000f7c:	801a      	strh	r2, [r3, #0]
	printf("\n\n****** Calibration de l'accelerometre finie ******\n");
 8000f7e:	483f      	ldr	r0, [pc, #252]	@ (800107c <main+0x184>)
 8000f80:	f00a fb08 	bl	800b594 <puts>

	// Network initialization

	// Wi-Fi connection

	if (WIFI_Connect(WLAN_SSID, WLAN_PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8000f84:	2203      	movs	r2, #3
 8000f86:	493e      	ldr	r1, [pc, #248]	@ (8001080 <main+0x188>)
 8000f88:	483e      	ldr	r0, [pc, #248]	@ (8001084 <main+0x18c>)
 8000f8a:	f009 fc3d 	bl	800a808 <WIFI_Connect>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d133      	bne.n	8000ffc <main+0x104>
	{
		WIFI_GetIP_Address(ip);
 8000f94:	483c      	ldr	r0, [pc, #240]	@ (8001088 <main+0x190>)
 8000f96:	f009 fc6f 	bl	800a878 <WIFI_GetIP_Address>
		printf("Connected to AP %s, IP address: %d.%d.%d.%d\n", WLAN_SSID,
			   ip[0], ip[1], ip[2], ip[3]);
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <main+0x190>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
		printf("Connected to AP %s, IP address: %d.%d.%d.%d\n", WLAN_SSID,
 8000f9e:	4619      	mov	r1, r3
			   ip[0], ip[1], ip[2], ip[3]);
 8000fa0:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <main+0x190>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
		printf("Connected to AP %s, IP address: %d.%d.%d.%d\n", WLAN_SSID,
 8000fa4:	4618      	mov	r0, r3
			   ip[0], ip[1], ip[2], ip[3]);
 8000fa6:	4b38      	ldr	r3, [pc, #224]	@ (8001088 <main+0x190>)
 8000fa8:	789b      	ldrb	r3, [r3, #2]
		printf("Connected to AP %s, IP address: %d.%d.%d.%d\n", WLAN_SSID,
 8000faa:	461a      	mov	r2, r3
			   ip[0], ip[1], ip[2], ip[3]);
 8000fac:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <main+0x190>)
 8000fae:	78db      	ldrb	r3, [r3, #3]
		printf("Connected to AP %s, IP address: %d.%d.%d.%d\n", WLAN_SSID,
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	4932      	ldr	r1, [pc, #200]	@ (8001084 <main+0x18c>)
 8000fba:	4834      	ldr	r0, [pc, #208]	@ (800108c <main+0x194>)
 8000fbc:	f00a fa82 	bl	800b4c4 <iprintf>
		WIFI_GetMAC_Address(mac);
 8000fc0:	4833      	ldr	r0, [pc, #204]	@ (8001090 <main+0x198>)
 8000fc2:	f009 fc43 	bl	800a84c <WIFI_GetMAC_Address>
		printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000fc6:	4b32      	ldr	r3, [pc, #200]	@ (8001090 <main+0x198>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <main+0x198>)
 8000fce:	785b      	ldrb	r3, [r3, #1]
 8000fd0:	461c      	mov	r4, r3
			   mac[2], mac[3], mac[4], mac[5]);
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <main+0x198>)
 8000fd4:	789b      	ldrb	r3, [r3, #2]
		printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000fd6:	461d      	mov	r5, r3
			   mac[2], mac[3], mac[4], mac[5]);
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <main+0x198>)
 8000fda:	78db      	ldrb	r3, [r3, #3]
		printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000fdc:	461a      	mov	r2, r3
			   mac[2], mac[3], mac[4], mac[5]);
 8000fde:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <main+0x198>)
 8000fe0:	791b      	ldrb	r3, [r3, #4]
		printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000fe2:	4619      	mov	r1, r3
			   mac[2], mac[3], mac[4], mac[5]);
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <main+0x198>)
 8000fe6:	795b      	ldrb	r3, [r3, #5]
		printf("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac[0], mac[1],
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	9101      	str	r1, [sp, #4]
 8000fec:	9200      	str	r2, [sp, #0]
 8000fee:	462b      	mov	r3, r5
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	4827      	ldr	r0, [pc, #156]	@ (8001094 <main+0x19c>)
 8000ff6:	f00a fa65 	bl	800b4c4 <iprintf>
 8000ffa:	e003      	b.n	8001004 <main+0x10c>
	}
	else
	{
		printf("Failed to connect to AP %s\n", WLAN_SSID);
 8000ffc:	4921      	ldr	r1, [pc, #132]	@ (8001084 <main+0x18c>)
 8000ffe:	4826      	ldr	r0, [pc, #152]	@ (8001098 <main+0x1a0>)
 8001000:	f00a fa60 	bl	800b4c4 <iprintf>
		// printf("Magneto: %d %d %d\n", magnetoData[0], magnetoData[1],magnetoData[2]);
		// printf("Accelero: %d %d %d\n", acceleroData[0], acceleroData[1],acceleroData[2]);
		// HAL_Delay(100);
		// printf("Temperature %f\n", mlx90615_read_temp()); // Lecture de la température avec le capteur infrarouge et affichage
		// printf("Tick: %lu\n", HAL_GetTick());
		if(AppFlags.data_tx){
 8001004:	4b25      	ldr	r3, [pc, #148]	@ (800109c <main+0x1a4>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02b      	beq.n	8001064 <main+0x16c>
			postData(BSP_TSENSOR_ReadTemp(), BSP_HSENSOR_ReadHumidity(), BSP_PSENSOR_ReadPressure(), BSP_TSENSOR_ReadTemp(), BSP_HSENSOR_ReadHumidity(), BSP_PSENSOR_ReadPressure(), AppFlags.falling);
 800100c:	f001 fc54 	bl	80028b8 <BSP_TSENSOR_ReadTemp>
 8001010:	eeb0 8a40 	vmov.f32	s16, s0
 8001014:	f001 fbcc 	bl	80027b0 <BSP_HSENSOR_ReadHumidity>
 8001018:	eef0 8a40 	vmov.f32	s17, s0
 800101c:	f001 fc22 	bl	8002864 <BSP_PSENSOR_ReadPressure>
 8001020:	eeb0 9a40 	vmov.f32	s18, s0
 8001024:	f001 fc48 	bl	80028b8 <BSP_TSENSOR_ReadTemp>
 8001028:	eef0 9a40 	vmov.f32	s19, s0
 800102c:	f001 fbc0 	bl	80027b0 <BSP_HSENSOR_ReadHumidity>
 8001030:	eeb0 aa40 	vmov.f32	s20, s0
 8001034:	f001 fc16 	bl	8002864 <BSP_PSENSOR_ReadPressure>
 8001038:	eef0 7a40 	vmov.f32	s15, s0
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <main+0x1a4>)
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	4618      	mov	r0, r3
 8001042:	eef0 2a67 	vmov.f32	s5, s15
 8001046:	eeb0 2a4a 	vmov.f32	s4, s20
 800104a:	eef0 1a69 	vmov.f32	s3, s19
 800104e:	eeb0 1a49 	vmov.f32	s2, s18
 8001052:	eef0 0a68 	vmov.f32	s1, s17
 8001056:	eeb0 0a48 	vmov.f32	s0, s16
 800105a:	f000 fa2d 	bl	80014b8 <postData>
			AppFlags.data_tx = 0;
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <main+0x1a4>)
 8001060:	2200      	movs	r2, #0
 8001062:	705a      	strb	r2, [r3, #1]
		}
		detectFall();
 8001064:	f000 faf6 	bl	8001654 <detectFall>
		if(AppFlags.data_tx){
 8001068:	e7cc      	b.n	8001004 <main+0x10c>
 800106a:	bf00      	nop
 800106c:	0800d908 	.word	0x0800d908
 8001070:	0800d924 	.word	0x0800d924
 8001074:	200002ec 	.word	0x200002ec
 8001078:	200002f4 	.word	0x200002f4
 800107c:	0800d954 	.word	0x0800d954
 8001080:	0800d98c 	.word	0x0800d98c
 8001084:	0800d998 	.word	0x0800d998
 8001088:	200002f8 	.word	0x200002f8
 800108c:	0800d9a0 	.word	0x0800d9a0
 8001090:	200002fc 	.word	0x200002fc
 8001094:	0800d9d0 	.word	0x0800d9d0
 8001098:	0800d9fc 	.word	0x0800d9fc
 800109c:	200002dc 	.word	0x200002dc

080010a0 <Error_Handler>:
		// rien d'autre à faire
	}
}

void Error_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	printf("FATAL ERROR");
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <Error_Handler+0x10>)
 80010a6:	f00a fa0d 	bl	800b4c4 <iprintf>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800da18 	.word	0x0800da18

080010b4 <max3010x_INT_Callback>:

void max3010x_INT_Callback(uint8_t intStatus)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]

	if (intStatus & (1u << 6))
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <max3010x_INT_Callback+0x1a>
	{
		AppFlags.max3010x_data_ready = 1;
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <max3010x_INT_Callback+0x28>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	709a      	strb	r2, [r3, #2]
	}
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200002dc 	.word	0x200002dc

080010e0 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	for (unsigned int appTimerIndex = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	e017      	b.n	800111c <HAL_SYSTICK_Callback+0x3c>
		 appTimerIndex < sizeof(AppTimers) / sizeof(struct _AppTimer_t);
		 appTimerIndex++)
	{
		if (HAL_GetTick() % AppTimers[appTimerIndex].delayInMs == 0)
 80010ec:	f002 f9dc 	bl	80034a8 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	490e      	ldr	r1, [pc, #56]	@ (800112c <HAL_SYSTICK_Callback+0x4c>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80010fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80010fe:	fb01 f303 	mul.w	r3, r1, r3
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <HAL_SYSTICK_Callback+0x36>
		{
			*AppTimers[appTimerIndex].flagPtr = 1;
 8001108:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_SYSTICK_Callback+0x4c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
		 appTimerIndex++)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
		 appTimerIndex < sizeof(AppTimers) / sizeof(struct _AppTimer_t);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d9e4      	bls.n	80010ec <HAL_SYSTICK_Callback+0xc>
		}
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000

08001130 <USER_Button_Callback>:

void USER_Button_Callback(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	AppFlags.user_button_pressed = 1;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <USER_Button_Callback+0x14>)
 8001136:	2201      	movs	r2, #1
 8001138:	711a      	strb	r2, [r3, #4]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	200002dc 	.word	0x200002dc

08001148 <WIFI_ReadLine>:

int WIFI_ReadLine(uint8_t socket, char *string)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
	static char buffer[256];
	static int buffer_pos = 0;
	static int buffer_size = 0;
	uint16_t received_bytes;
	int string_pos = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
	int line_found = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]

	string[0] = '\0';
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]

	while (!line_found)
 8001162:	e083      	b.n	800126c <WIFI_ReadLine+0x124>
	{
		if (buffer_pos >= buffer_size)
 8001164:	4b48      	ldr	r3, [pc, #288]	@ (8001288 <WIFI_ReadLine+0x140>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b48      	ldr	r3, [pc, #288]	@ (800128c <WIFI_ReadLine+0x144>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	db74      	blt.n	800125a <WIFI_ReadLine+0x112>
		{
			buffer_pos = 0;
 8001170:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <WIFI_ReadLine+0x140>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
			buffer_size = 0;
 8001176:	4b45      	ldr	r3, [pc, #276]	@ (800128c <WIFI_ReadLine+0x144>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

			if (WIFI_ReceiveData(socket, (uint8_t *)buffer, sizeof(buffer),
 800117c:	f107 030e 	add.w	r3, r7, #14
 8001180:	79f8      	ldrb	r0, [r7, #7]
 8001182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800118c:	4940      	ldr	r1, [pc, #256]	@ (8001290 <WIFI_ReadLine+0x148>)
 800118e:	f009 fc09 	bl	800a9a4 <WIFI_ReceiveData>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <WIFI_ReadLine+0x56>
								 &received_bytes, 5000) != WIFI_STATUS_OK)
			{
				return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800119c:	e070      	b.n	8001280 <WIFI_ReadLine+0x138>
			}

			if (received_bytes == 0)
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <WIFI_ReadLine+0x62>
			{
				return -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a8:	e06a      	b.n	8001280 <WIFI_ReadLine+0x138>
			}

			buffer_size = received_bytes;
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <WIFI_ReadLine+0x144>)
 80011b0:	601a      	str	r2, [r3, #0]
		}

		while (buffer_pos < buffer_size && !line_found)
 80011b2:	e052      	b.n	800125a <WIFI_ReadLine+0x112>
		{
			if (buffer[buffer_pos] == '\n' || buffer[buffer_pos] == '\r')
 80011b4:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a35      	ldr	r2, [pc, #212]	@ (8001290 <WIFI_ReadLine+0x148>)
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d005      	beq.n	80011cc <WIFI_ReadLine+0x84>
 80011c0:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a32      	ldr	r2, [pc, #200]	@ (8001290 <WIFI_ReadLine+0x148>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	2b0d      	cmp	r3, #13
 80011ca:	d12c      	bne.n	8001226 <WIFI_ReadLine+0xde>
			{
				line_found = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
				buffer_pos++;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011d8:	6013      	str	r3, [r2, #0]

				if (buffer_pos < buffer_size && ((buffer[buffer_pos - 1] == '\r' && buffer[buffer_pos] == '\n') || (buffer[buffer_pos - 1] == '\n' && buffer[buffer_pos] == '\r')))
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <WIFI_ReadLine+0x144>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	da38      	bge.n	8001258 <WIFI_ReadLine+0x110>
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	4a28      	ldr	r2, [pc, #160]	@ (8001290 <WIFI_ReadLine+0x148>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	2b0d      	cmp	r3, #13
 80011f2:	d105      	bne.n	8001200 <WIFI_ReadLine+0xb8>
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <WIFI_ReadLine+0x140>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a25      	ldr	r2, [pc, #148]	@ (8001290 <WIFI_ReadLine+0x148>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d00c      	beq.n	800121a <WIFI_ReadLine+0xd2>
 8001200:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <WIFI_ReadLine+0x140>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <WIFI_ReadLine+0x148>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d124      	bne.n	8001258 <WIFI_ReadLine+0x110>
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <WIFI_ReadLine+0x140>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <WIFI_ReadLine+0x148>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	2b0d      	cmp	r3, #13
 8001218:	d11e      	bne.n	8001258 <WIFI_ReadLine+0x110>
				{
					buffer_pos++;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <WIFI_ReadLine+0x140>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <WIFI_ReadLine+0x140>)
 8001222:	6013      	str	r3, [r2, #0]
				if (buffer_pos < buffer_size && ((buffer[buffer_pos - 1] == '\r' && buffer[buffer_pos] == '\n') || (buffer[buffer_pos - 1] == '\n' && buffer[buffer_pos] == '\r')))
 8001224:	e018      	b.n	8001258 <WIFI_ReadLine+0x110>
				}
			}
			else
			{
				string[string_pos++] = buffer[buffer_pos++];
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <WIFI_ReadLine+0x140>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4916      	ldr	r1, [pc, #88]	@ (8001288 <WIFI_ReadLine+0x140>)
 800122e:	600a      	str	r2, [r1, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	1c51      	adds	r1, r2, #1
 8001234:	6179      	str	r1, [r7, #20]
 8001236:	4611      	mov	r1, r2
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	440a      	add	r2, r1
 800123c:	4914      	ldr	r1, [pc, #80]	@ (8001290 <WIFI_ReadLine+0x148>)
 800123e:	5ccb      	ldrb	r3, [r1, r3]
 8001240:	7013      	strb	r3, [r2, #0]

				if (string_pos >= 255)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2bfe      	cmp	r3, #254	@ 0xfe
 8001246:	dd08      	ble.n	800125a <WIFI_ReadLine+0x112>
				{
					string[string_pos] = '\0';
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
					return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001256:	e013      	b.n	8001280 <WIFI_ReadLine+0x138>
				if (buffer_pos < buffer_size && ((buffer[buffer_pos - 1] == '\r' && buffer[buffer_pos] == '\n') || (buffer[buffer_pos - 1] == '\n' && buffer[buffer_pos] == '\r')))
 8001258:	bf00      	nop
		while (buffer_pos < buffer_size && !line_found)
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <WIFI_ReadLine+0x140>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <WIFI_ReadLine+0x144>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	da02      	bge.n	800126c <WIFI_ReadLine+0x124>
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0a3      	beq.n	80011b4 <WIFI_ReadLine+0x6c>
	while (!line_found)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f43f af78 	beq.w	8001164 <WIFI_ReadLine+0x1c>
				}
			}
		}
	}

	string[string_pos] = '\0';
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	4413      	add	r3, r2
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000308 	.word	0x20000308
 800128c:	2000030c 	.word	0x2000030c
 8001290:	20000310 	.word	0x20000310

08001294 <WIFI_SendLine>:

int WIFI_SendLine(uint8_t socket, const char *string)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b0c7      	sub	sp, #284	@ 0x11c
 8001298:	af02      	add	r7, sp, #8
 800129a:	4602      	mov	r2, r0
 800129c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012a4:	6019      	str	r1, [r3, #0]
 80012a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012aa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012ae:	701a      	strb	r2, [r3, #0]
	uint16_t bytesSent;
	char data[258];
	snprintf(data, sizeof(data), "%s\r\n", string);
 80012b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012b8:	f107 0008 	add.w	r0, r7, #8
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a22      	ldr	r2, [pc, #136]	@ (8001348 <WIFI_SendLine+0xb4>)
 80012c0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80012c4:	f009 ffe8 	bl	800b298 <sniprintf>
	int length = strlen(data);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ffcf 	bl	8000270 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	if (length >= 256)
 80012d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012dc:	2bff      	cmp	r3, #255	@ 0xff
 80012de:	dd05      	ble.n	80012ec <WIFI_SendLine+0x58>
	{
		printf("Error: Invalid string length\n");
 80012e0:	481a      	ldr	r0, [pc, #104]	@ (800134c <WIFI_SendLine+0xb8>)
 80012e2:	f00a f957 	bl	800b594 <puts>
		return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ea:	e028      	b.n	800133e <WIFI_SendLine+0xaa>
	}

	if (WIFI_SendData(socket, (uint8_t*)data, length, &bytesSent, 5000) != WIFI_STATUS_OK)
 80012ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f507 7485 	add.w	r4, r7, #266	@ 0x10a
 80012f6:	f107 0108 	add.w	r1, r7, #8
 80012fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001302:	7818      	ldrb	r0, [r3, #0]
 8001304:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4623      	mov	r3, r4
 800130c:	f009 fb28 	bl	800a960 <WIFI_SendData>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <WIFI_SendLine+0x8e>
	{
		printf("Error: Failed to send data\n");
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <WIFI_SendLine+0xbc>)
 8001318:	f00a f93c 	bl	800b594 <puts>
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001320:	e00d      	b.n	800133e <WIFI_SendLine+0xaa>
	}

	if (bytesSent != length)
 8001322:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8001326:	461a      	mov	r2, r3
 8001328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800132c:	4293      	cmp	r3, r2
 800132e:	d005      	beq.n	800133c <WIFI_SendLine+0xa8>
	{
		printf("Error: Failed to send all data\n");
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <WIFI_SendLine+0xc0>)
 8001332:	f00a f92f 	bl	800b594 <puts>
		return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800133a:	e000      	b.n	800133e <WIFI_SendLine+0xaa>
	}

	return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	0800da24 	.word	0x0800da24
 800134c:	0800da2c 	.word	0x0800da2c
 8001350:	0800da4c 	.word	0x0800da4c
 8001354:	0800da68 	.word	0x0800da68

08001358 <WIFI_SendHTTPRequest>:

int WIFI_SendHTTPRequest(uint8_t socket, const char *method, const char *path,
						 const char *host, const char *data)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800135e:	af02      	add	r7, sp, #8
 8001360:	4604      	mov	r4, r0
 8001362:	f507 7004 	add.w	r0, r7, #528	@ 0x210
 8001366:	f5a0 7002 	sub.w	r0, r0, #520	@ 0x208
 800136a:	6001      	str	r1, [r0, #0]
 800136c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8001370:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 8001374:	600a      	str	r2, [r1, #0]
 8001376:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800137a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001384:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001388:	4622      	mov	r2, r4
 800138a:	701a      	strb	r2, [r3, #0]
	char buffer[512];

	snprintf(buffer, sizeof(buffer), "%s %s HTTP/1.0", method, path);
 800138c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001390:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001394:	f107 0010 	add.w	r0, r7, #16
 8001398:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800139c:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a3d      	ldr	r2, [pc, #244]	@ (800149c <WIFI_SendHTTPRequest+0x144>)
 80013a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ac:	f009 ff74 	bl	800b298 <sniprintf>
	WIFI_SendLine(socket, buffer);
 80013b0:	f107 0210 	add.w	r2, r7, #16
 80013b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80013b8:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff67 	bl	8001294 <WIFI_SendLine>
	snprintf(buffer, sizeof(buffer), "Host: %s", host);
 80013c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80013ca:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80013ce:	f107 0010 	add.w	r0, r7, #16
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <WIFI_SendHTTPRequest+0x148>)
 80013d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013da:	f009 ff5d 	bl	800b298 <sniprintf>
	WIFI_SendLine(socket, buffer);
 80013de:	f107 0210 	add.w	r2, r7, #16
 80013e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80013e6:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff50 	bl	8001294 <WIFI_SendLine>
	WIFI_SendLine(socket, "User-Agent: B-L475EIOT01 C4:7F:51:06:A7:1E");
 80013f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80013f8:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4929      	ldr	r1, [pc, #164]	@ (80014a4 <WIFI_SendHTTPRequest+0x14c>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff47 	bl	8001294 <WIFI_SendLine>
	WIFI_SendLine(socket, "Content-Type: application/x-www-form-urlencoded");
 8001406:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800140a:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4925      	ldr	r1, [pc, #148]	@ (80014a8 <WIFI_SendHTTPRequest+0x150>)
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff3e 	bl	8001294 <WIFI_SendLine>
	snprintf(buffer, sizeof(buffer), "Content-Length: %d", strlen(data));
 8001418:	f8d7 0220 	ldr.w	r0, [r7, #544]	@ 0x220
 800141c:	f7fe ff28 	bl	8000270 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	f107 0010 	add.w	r0, r7, #16
 8001426:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <WIFI_SendHTTPRequest+0x154>)
 8001428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800142c:	f009 ff34 	bl	800b298 <sniprintf>
	WIFI_SendLine(socket, buffer);
 8001430:	f107 0210 	add.w	r2, r7, #16
 8001434:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001438:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff27 	bl	8001294 <WIFI_SendLine>
	WIFI_SendLine(socket, "Connection: close");
 8001446:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800144a:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4917      	ldr	r1, [pc, #92]	@ (80014b0 <WIFI_SendHTTPRequest+0x158>)
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff1e 	bl	8001294 <WIFI_SendLine>
	WIFI_SendLine(socket, "");
 8001458:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800145c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4914      	ldr	r1, [pc, #80]	@ (80014b4 <WIFI_SendHTTPRequest+0x15c>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff15 	bl	8001294 <WIFI_SendLine>
	if (data && strlen(data) > 0)
 800146a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00e      	beq.n	8001490 <WIFI_SendHTTPRequest+0x138>
 8001472:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d009      	beq.n	8001490 <WIFI_SendHTTPRequest+0x138>
	{
		WIFI_SendLine(socket, data);
 800147c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001480:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff02 	bl	8001294 <WIFI_SendLine>
	}

	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	0800da88 	.word	0x0800da88
 80014a0:	0800da98 	.word	0x0800da98
 80014a4:	0800daa4 	.word	0x0800daa4
 80014a8:	0800dad0 	.word	0x0800dad0
 80014ac:	0800db00 	.word	0x0800db00
 80014b0:	0800db14 	.word	0x0800db14
 80014b4:	0800db28 	.word	0x0800db28

080014b8 <postData>:
	WIFI_CloseClientConnection(socket);
	return 0;
}

int postData(float btemp, float bhumidity, float bpressure, float temp, float pulse, float ox, int falling)
{
 80014b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014bc:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 80014c0:	af0e      	add	r7, sp, #56	@ 0x38
 80014c2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80014c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014ca:	ed83 0a00 	vstr	s0, [r3]
 80014ce:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80014d2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80014d6:	edc3 0a00 	vstr	s1, [r3]
 80014da:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80014de:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80014e2:	ed83 1a00 	vstr	s2, [r3]
 80014e6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80014ea:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80014ee:	edc3 1a00 	vstr	s3, [r3]
 80014f2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80014f6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80014fa:	ed83 2a00 	vstr	s4, [r3]
 80014fe:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001502:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001506:	edc3 2a00 	vstr	s5, [r3]
 800150a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800150e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001512:	6018      	str	r0, [r3, #0]
	WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, "TCP", RemoteIP,
 8001514:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <postData+0x17c>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	f641 7390 	movw	r3, #8080	@ 0x1f90
 800151c:	2200      	movs	r2, #0
 800151e:	9201      	str	r2, [sp, #4]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4b45      	ldr	r3, [pc, #276]	@ (8001638 <postData+0x180>)
 8001524:	4a45      	ldr	r2, [pc, #276]	@ (800163c <postData+0x184>)
 8001526:	2100      	movs	r1, #0
 8001528:	f009 f9c2 	bl	800a8b0 <WIFI_OpenClientConnection>
							  RemotePort, 0);

	char data[256];
	snprintf(data, sizeof(data), "btemp=%.2f&bhumidity=%.2f&bpressure=%.2f&temp=%.2f&pulse=%.2f&ox=%.2f&falling=%d",
 800152c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001530:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
 800153e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001542:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	4680      	mov	r8, r0
 800154e:	4689      	mov	r9, r1
 8001550:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001554:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	4682      	mov	sl, r0
 8001560:	468b      	mov	fp, r1
 8001562:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001566:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_f2d>
 8001570:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001574:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001578:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	e9c7 0100 	strd	r0, r1, [r7]
 8001586:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800158a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	f7fe ffda 	bl	8000548 <__aeabi_f2d>
 8001594:	f507 7698 	add.w	r6, r7, #304	@ 0x130
 8001598:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800159c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80015a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80015a8:	ed97 7b00 	vldr	d7, [r7]
 80015ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 80015b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015b8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015c0:	e9cd 4500 	strd	r4, r5, [sp]
 80015c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001640 <postData+0x188>)
 80015c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ca:	4630      	mov	r0, r6
 80015cc:	f009 fe64 	bl	800b298 <sniprintf>
			 btemp, bhumidity, bpressure, temp, pulse, ox, falling);

	if (WIFI_SendHTTPRequest(socket, "POST", "/monitor", "192.168.0.254", data) != 0)
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <postData+0x17c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b2d8      	uxtb	r0, r3
 80015d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <postData+0x18c>)
 80015de:	4a1a      	ldr	r2, [pc, #104]	@ (8001648 <postData+0x190>)
 80015e0:	491a      	ldr	r1, [pc, #104]	@ (800164c <postData+0x194>)
 80015e2:	f7ff feb9 	bl	8001358 <WIFI_SendHTTPRequest>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <postData+0x14a>
	{
		printf("Error: Failed to send HTTP request\n");
 80015ec:	4818      	ldr	r0, [pc, #96]	@ (8001650 <postData+0x198>)
 80015ee:	f009 ffd1 	bl	800b594 <puts>
		return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f6:	e016      	b.n	8001626 <postData+0x16e>
	}
	char string[256];
	while (WIFI_ReadLine(socket, string) == 0)
	{
		printf("%s\n", string);
 80015f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015fc:	4618      	mov	r0, r3
 80015fe:	f009 ffc9 	bl	800b594 <puts>
	while (WIFI_ReadLine(socket, string) == 0)
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <postData+0x17c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fd9a 	bl	8001148 <WIFI_ReadLine>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <postData+0x140>
	}
	WIFI_CloseClientConnection(socket);
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <postData+0x17c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f009 f982 	bl	800a928 <WIFI_CloseClientConnection>
	return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001632:	bf00      	nop
 8001634:	20000304 	.word	0x20000304
 8001638:	0800df78 	.word	0x0800df78
 800163c:	0800db2c 	.word	0x0800db2c
 8001640:	0800db4c 	.word	0x0800db4c
 8001644:	0800db30 	.word	0x0800db30
 8001648:	0800dba0 	.word	0x0800dba0
 800164c:	0800dbac 	.word	0x0800dbac
 8001650:	0800dbb4 	.word	0x0800dbb4

08001654 <detectFall>:

int detectFall(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0c2      	sub	sp, #264	@ 0x108
 8001658:	af00      	add	r7, sp, #0
	BSP_ACCELERO_AccGetXYZ(acceleroData);
 800165a:	4840      	ldr	r0, [pc, #256]	@ (800175c <detectFall+0x108>)
 800165c:	f001 f82e 	bl	80026bc <BSP_ACCELERO_AccGetXYZ>
	sumAccelero = acceleroData[0] + acceleroData[1] + acceleroData[2];
 8001660:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <detectFall+0x108>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <detectFall+0x108>)
 800166a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4413      	add	r3, r2
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <detectFall+0x108>)
 8001676:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4413      	add	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <detectFall+0x10c>)
 8001684:	801a      	strh	r2, [r3, #0]
	if (abs(sumAccelero - sumAcceleroBase) > 200)
 8001686:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <detectFall+0x10c>)
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	461a      	mov	r2, r3
 800168e:	4b35      	ldr	r3, [pc, #212]	@ (8001764 <detectFall+0x110>)
 8001690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	bfb8      	it	lt
 800169a:	425b      	neglt	r3, r3
 800169c:	2bc8      	cmp	r3, #200	@ 0xc8
 800169e:	dd06      	ble.n	80016ae <detectFall+0x5a>
	{
		printf("\n\n****** Chute Detecter ******\n");
 80016a0:	4831      	ldr	r0, [pc, #196]	@ (8001768 <detectFall+0x114>)
 80016a2:	f009 ff77 	bl	800b594 <puts>
		AppFlags.falling = 1;
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <detectFall+0x118>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	715a      	strb	r2, [r3, #5]
 80016ac:	e006      	b.n	80016bc <detectFall+0x68>
	}
	else
	{
		if (AppFlags.falling)
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <detectFall+0x118>)
 80016b0:	795b      	ldrb	r3, [r3, #5]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <detectFall+0x68>
		{
			printf("\n\n****** Chute Terminer, en attente de confirmation ******\n");
 80016b6:	482e      	ldr	r0, [pc, #184]	@ (8001770 <detectFall+0x11c>)
 80016b8:	f009 ff6c 	bl	800b594 <puts>
		}
	}
	HAL_Delay(1000);
 80016bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c0:	f001 fefe 	bl	80034c0 <HAL_Delay>

	// detection de chute

	if (AppFlags.max3010x_data_ready)
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <detectFall+0x118>)
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d02f      	beq.n	800172c <detectFall+0xd8>
	{
		AppFlags.max3010x_data_ready = 0;
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <detectFall+0x118>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	709a      	strb	r2, [r3, #2]

		uint8_t count = max3010x_getUnreadSampleCount();
 80016d2:	f008 f96b 	bl	80099ac <max3010x_getUnreadSampleCount>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
		SAMPLE samples[32];

		max3010x_getFIFO(samples, count);
 80016dc:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f008 f99d 	bl	8009a24 <max3010x_getFIFO>
		max3010x_cal();
 80016ea:	f008 fec5 	bl	800a478 <max3010x_cal>
		if (AppFlags.uart_print)
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <detectFall+0x118>)
 80016f0:	78db      	ldrb	r3, [r3, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d01a      	beq.n	800172c <detectFall+0xd8>
		{
			if (max3010x_isHeartRateValid())
 80016f6:	f008 ffe1 	bl	800a6bc <max3010x_isHeartRateValid>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <detectFall+0xba>
			{
				printf("Heart Rate: %d bpm\n", max3010x_getHeartRate());
 8001700:	f008 ffc4 	bl	800a68c <max3010x_getHeartRate>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	481a      	ldr	r0, [pc, #104]	@ (8001774 <detectFall+0x120>)
 800170a:	f009 fedb 	bl	800b4c4 <iprintf>
			}

			if (max3010x_isSpO2Valid())
 800170e:	f008 ffe3 	bl	800a6d8 <max3010x_isSpO2Valid>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <detectFall+0xd2>
			{
				printf("SpO2: %d %%\n", max3010x_getSpO2());
 8001718:	f008 ffc4 	bl	800a6a4 <max3010x_getSpO2>
 800171c:	4603      	mov	r3, r0
 800171e:	4619      	mov	r1, r3
 8001720:	4815      	ldr	r0, [pc, #84]	@ (8001778 <detectFall+0x124>)
 8001722:	f009 fecf 	bl	800b4c4 <iprintf>
			}
			AppFlags.uart_print = 0;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <detectFall+0x118>)
 8001728:	2200      	movs	r2, #0
 800172a:	70da      	strb	r2, [r3, #3]
		}
	}
	// gestion appui bouton
	if (AppFlags.user_button_pressed && AppFlags.falling)
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <detectFall+0x118>)
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00c      	beq.n	800174e <detectFall+0xfa>
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <detectFall+0x118>)
 8001736:	795b      	ldrb	r3, [r3, #5]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <detectFall+0xfa>
	{
		AppFlags.user_button_pressed = 0;
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <detectFall+0x118>)
 800173e:	2200      	movs	r2, #0
 8001740:	711a      	strb	r2, [r3, #4]
		AppFlags.falling = 0;
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <detectFall+0x118>)
 8001744:	2200      	movs	r2, #0
 8001746:	715a      	strb	r2, [r3, #5]
		printf("[INFO] Visite effectuee. Alerte de chute réinitialisee.\n");
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <detectFall+0x128>)
 800174a:	f009 ff23 	bl	800b594 <puts>
	}
	return 0;
 800174e:	2300      	movs	r3, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002e4 	.word	0x200002e4
 8001760:	200002f2 	.word	0x200002f2
 8001764:	200002f4 	.word	0x200002f4
 8001768:	0800dbd8 	.word	0x0800dbd8
 800176c:	200002dc 	.word	0x200002dc
 8001770:	0800dbf8 	.word	0x0800dbf8
 8001774:	0800dc34 	.word	0x0800dc34
 8001778:	0800dc48 	.word	0x0800dc48
 800177c:	0800dc58 	.word	0x0800dc58

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	@ 0x60
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0ac      	sub	sp, #176	@ 0xb0
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2288      	movs	r2, #136	@ 0x88
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f009 ff71 	bl	800b6d0 <memset>
  if(hi2c->Instance==I2C1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_I2C_MspInit+0xb0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d13b      	bne.n	8001870 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017f8:	2340      	movs	r3, #64	@ 0x40
 80017fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4618      	mov	r0, r3
 8001806:	f003 ff9f 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001810:	f7ff fc46 	bl	80010a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_I2C_MspInit+0xb4>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001818:	4a18      	ldr	r2, [pc, #96]	@ (800187c <HAL_I2C_MspInit+0xb4>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_I2C_MspInit+0xb4>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800182c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001846:	2304      	movs	r3, #4
 8001848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001850:	4619      	mov	r1, r3
 8001852:	480b      	ldr	r0, [pc, #44]	@ (8001880 <HAL_I2C_MspInit+0xb8>)
 8001854:	f001 ffdc 	bl	8003810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_I2C_MspInit+0xb4>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_I2C_MspInit+0xb4>)
 800185e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001862:	6593      	str	r3, [r2, #88]	@ 0x58
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_I2C_MspInit+0xb4>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001870:	bf00      	nop
 8001872:	37b0      	adds	r7, #176	@ 0xb0
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40005400 	.word	0x40005400
 800187c:	40021000 	.word	0x40021000
 8001880:	48000400 	.word	0x48000400

08001884 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_I2C_MspDeInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10f      	bne.n	80018b6 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_I2C_MspDeInit+0x40>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <HAL_I2C_MspDeInit+0x40>)
 800189c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018a0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80018a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a6:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <HAL_I2C_MspDeInit+0x44>)
 80018a8:	f002 f95c 	bl	8003b64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80018ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <HAL_I2C_MspDeInit+0x44>)
 80018b2:	f002 f957 	bl	8003b64 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48000400 	.word	0x48000400

080018cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <HAL_SPI_MspInit+0x8c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d130      	bne.n	8001950 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_SPI_MspInit+0x90>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	4a1a      	ldr	r2, [pc, #104]	@ (800195c <HAL_SPI_MspInit+0x90>)
 80018f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_SPI_MspInit+0x90>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_SPI_MspInit+0x90>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	4a14      	ldr	r2, [pc, #80]	@ (800195c <HAL_SPI_MspInit+0x90>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_SPI_MspInit+0x90>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800191e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001930:	2306      	movs	r3, #6
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4809      	ldr	r0, [pc, #36]	@ (8001960 <HAL_SPI_MspInit+0x94>)
 800193c:	f001 ff68 	bl	8003810 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2033      	movs	r0, #51	@ 0x33
 8001946:	f001 fede 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800194a:	2033      	movs	r0, #51	@ 0x33
 800194c:	f001 fef7 	bl	800373e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	@ 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40003c00 	.word	0x40003c00
 800195c:	40021000 	.word	0x40021000
 8001960:	48000800 	.word	0x48000800

08001964 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_SPI_MspDeInit+0x38>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10d      	bne.n	8001992 <HAL_SPI_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN SPI3_MspDeInit 0 */

    /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_SPI_MspDeInit+0x3c>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_SPI_MspDeInit+0x3c>)
 800197c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001980:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001982:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001986:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <HAL_SPI_MspDeInit+0x40>)
 8001988:	f002 f8ec 	bl	8003b64 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 800198c:	2033      	movs	r0, #51	@ 0x33
 800198e:	f001 fee4 	bl	800375a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40003c00 	.word	0x40003c00
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000800 	.word	0x48000800

080019a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0ac      	sub	sp, #176	@ 0xb0
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2288      	movs	r2, #136	@ 0x88
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f009 fe81 	bl	800b6d0 <memset>
  if(huart->Instance==USART1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <HAL_UART_MspInit+0xb0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d13a      	bne.n	8001a4e <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019dc:	2300      	movs	r3, #0
 80019de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 feaf 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019f0:	f7ff fb56 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_UART_MspInit+0xb4>)
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	4a18      	ldr	r2, [pc, #96]	@ (8001a5c <HAL_UART_MspInit+0xb4>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_UART_MspInit+0xb4>)
 8001a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_UART_MspInit+0xb4>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <HAL_UART_MspInit+0xb4>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a18:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <HAL_UART_MspInit+0xb4>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_UART_MspInit+0xb8>)
 8001a4a:	f001 fee1 	bl	8003810 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a4e:	bf00      	nop
 8001a50:	37b0      	adds	r7, #176	@ 0xb0
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <NMI_Handler+0x4>

08001a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aba:	f001 fce1 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001abe:	f7ff fb0f 	bl	80010e0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f002 f96e 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001ad8:	2020      	movs	r0, #32
 8001ada:	f002 f967 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001ade:	2040      	movs	r0, #64	@ 0x40
 8001ae0:	f002 f964 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001ae4:	2080      	movs	r0, #128	@ 0x80
 8001ae6:	f002 f961 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001aea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001aee:	f002 f95d 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001afa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001afe:	f002 f955 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b02:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001b06:	f002 f951 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001b0a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b0e:	f002 f94d 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001b12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b16:	f002 f949 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001b1a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b1e:	f002 f945 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <SPI3_IRQHandler+0x10>)
 8001b2e:	f005 f8d5 	bl	8006cdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000568 	.word	0x20000568

08001b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_kill>:

int _kill(int pid, int sig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b56:	f009 fdc7 	bl	800b6e8 <__errno>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2216      	movs	r2, #22
 8001b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_exit>:

void _exit (int status)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ffe7 	bl	8001b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b7e:	bf00      	nop
 8001b80:	e7fd      	b.n	8001b7e <_exit+0x12>

08001b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e00a      	b.n	8001baa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b94:	f3af 8000 	nop.w
 8001b98:	4601      	mov	r1, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	60ba      	str	r2, [r7, #8]
 8001ba0:	b2ca      	uxtb	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dbf0      	blt.n	8001b94 <_read+0x12>
  }

  return len;
 8001bb2:	687b      	ldr	r3, [r7, #4]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e009      	b.n	8001be2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	60ba      	str	r2, [r7, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f888 	bl	8001cec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbf1      	blt.n	8001bce <_write+0x12>
  }
  return len;
 8001bea:	687b      	ldr	r3, [r7, #4]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_close>:

int _close(int file)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_isatty>:

int _isatty(int file)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f009 fd2c 	bl	800b6e8 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20018000 	.word	0x20018000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20000410 	.word	0x20000410
 8001cc4:	20000f38 	.word	0x20000f38

08001cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__io_putchar>:

#define _NOEXTERN
#include "putc.h"

PUTCHAR_PROTOTYPE
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001cf4:	1d39      	adds	r1, r7, #4
 8001cf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <__io_putchar+0x20>)
 8001cfe:	f005 fd64 	bl	80077ca <HAL_UART_Transmit>

  return ch;
 8001d02:	687b      	ldr	r3, [r7, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000468 	.word	0x20000468

08001d10 <Clock_Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void Clock_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0b8      	sub	sp, #224	@ 0xe0
 8001d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d1a:	2244      	movs	r2, #68	@ 0x44
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f009 fcd6 	bl	800b6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d24:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2288      	movs	r2, #136	@ 0x88
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f009 fcc8 	bl	800b6d0 <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d40:	2310      	movs	r3, #16
 8001d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d4c:	2360      	movs	r3, #96	@ 0x60
 8001d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d6a:	2328      	movs	r3, #40	@ 0x28
 8001d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001d76:	2307      	movs	r3, #7
 8001d78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fede 	bl	8004b48 <HAL_RCC_OscConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <Clock_Init+0x86>
  {
    /* Initialization Error */
    while(1);
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <Clock_Init+0x82>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001d96:	230f      	movs	r3, #15
 8001d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001db4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001db8:	2104      	movs	r1, #4
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 faa0 	bl	8005300 <HAL_RCC_ClockConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <Clock_Init+0xba>
  {
    /* Initialization Error */
    while(1);
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <Clock_Init+0xb6>
  }
	
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001dca:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <Clock_Init+0x128>)
 8001dcc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001de4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001dea:	2301      	movs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001df2:	2318      	movs	r3, #24
 8001df4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001df6:	2307      	movs	r3, #7
 8001df8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001e02:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e06:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fc9c 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <Clock_Init+0x10a>
  {
    Error_Handler();
 8001e16:	f7ff f943 	bl	80010a0 <Error_Handler>
  }
  // Configure the main internal regulator output voltage
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e1e:	f002 fe3d 	bl	8004a9c <HAL_PWREx_ControlVoltageScaling>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <Clock_Init+0x11c>
  {
    Error_Handler();
 8001e28:	f7ff f93a 	bl	80010a0 <Error_Handler>
  }
  // Enable MSI Auto calibration
  HAL_RCCEx_EnableMSIPLLMode();
 8001e2c:	f003 ff76 	bl	8005d1c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e30:	bf00      	nop
 8001e32:	37e0      	adds	r7, #224	@ 0xe0
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	000120c5 	.word	0x000120c5

08001e3c <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e52:	4bbd      	ldr	r3, [pc, #756]	@ (8002148 <GPIO_Init+0x30c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4abc      	ldr	r2, [pc, #752]	@ (8002148 <GPIO_Init+0x30c>)
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5e:	4bba      	ldr	r3, [pc, #744]	@ (8002148 <GPIO_Init+0x30c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	4bb7      	ldr	r3, [pc, #732]	@ (8002148 <GPIO_Init+0x30c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4ab6      	ldr	r2, [pc, #728]	@ (8002148 <GPIO_Init+0x30c>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4bb4      	ldr	r3, [pc, #720]	@ (8002148 <GPIO_Init+0x30c>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4bb1      	ldr	r3, [pc, #708]	@ (8002148 <GPIO_Init+0x30c>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4ab0      	ldr	r2, [pc, #704]	@ (8002148 <GPIO_Init+0x30c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4bae      	ldr	r3, [pc, #696]	@ (8002148 <GPIO_Init+0x30c>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4bab      	ldr	r3, [pc, #684]	@ (8002148 <GPIO_Init+0x30c>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	4aaa      	ldr	r2, [pc, #680]	@ (8002148 <GPIO_Init+0x30c>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea6:	4ba8      	ldr	r3, [pc, #672]	@ (8002148 <GPIO_Init+0x30c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb2:	4ba5      	ldr	r3, [pc, #660]	@ (8002148 <GPIO_Init+0x30c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4aa4      	ldr	r2, [pc, #656]	@ (8002148 <GPIO_Init+0x30c>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4ba2      	ldr	r3, [pc, #648]	@ (8002148 <GPIO_Init+0x30c>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001ed0:	489e      	ldr	r0, [pc, #632]	@ (800214c <GPIO_Init+0x310>)
 8001ed2:	f001 ff53 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee0:	f001 ff4c 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001eea:	4899      	ldr	r0, [pc, #612]	@ (8002150 <GPIO_Init+0x314>)
 8001eec:	f001 ff46 	bl	8003d7c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001ef6:	4897      	ldr	r0, [pc, #604]	@ (8002154 <GPIO_Init+0x318>)
 8001ef8:	f001 ff40 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f02:	4894      	ldr	r0, [pc, #592]	@ (8002154 <GPIO_Init+0x318>)
 8001f04:	f001 ff3a 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001f0e:	4892      	ldr	r0, [pc, #584]	@ (8002158 <GPIO_Init+0x31c>)
 8001f10:	f001 ff34 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2120      	movs	r1, #32
 8001f18:	488d      	ldr	r0, [pc, #564]	@ (8002150 <GPIO_Init+0x314>)
 8001f1a:	f001 ff2f 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2101      	movs	r1, #1
 8001f22:	488a      	ldr	r0, [pc, #552]	@ (800214c <GPIO_Init+0x310>)
 8001f24:	f001 ff2a 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001f28:	f240 1315 	movw	r3, #277	@ 0x115
 8001f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4882      	ldr	r0, [pc, #520]	@ (800214c <GPIO_Init+0x310>)
 8001f42:	f001 fc65 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001f46:	236a      	movs	r3, #106	@ 0x6a
 8001f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	487c      	ldr	r0, [pc, #496]	@ (800214c <GPIO_Init+0x310>)
 8001f5c:	f001 fc58 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001f60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4878      	ldr	r0, [pc, #480]	@ (8002158 <GPIO_Init+0x31c>)
 8001f78:	f001 fc4a 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001f7c:	233f      	movs	r3, #63	@ 0x3f
 8001f7e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f80:	230b      	movs	r3, #11
 8001f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4872      	ldr	r0, [pc, #456]	@ (8002158 <GPIO_Init+0x31c>)
 8001f90:	f001 fc3e 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001f94:	2303      	movs	r3, #3
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb2:	f001 fc2d 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001fb6:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd2:	f001 fc1d 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff4:	f001 fc0c 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ffc:	230b      	movs	r3, #11
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800200e:	f001 fbff 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002012:	23e0      	movs	r3, #224	@ 0xe0
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002022:	2305      	movs	r3, #5
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002030:	f001 fbee 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002034:	2301      	movs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002038:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4841      	ldr	r0, [pc, #260]	@ (8002150 <GPIO_Init+0x314>)
 800204a:	f001 fbe1 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800204e:	2302      	movs	r3, #2
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002052:	230b      	movs	r3, #11
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	483b      	ldr	r0, [pc, #236]	@ (8002150 <GPIO_Init+0x314>)
 8002062:	f001 fbd5 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002066:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800206a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4834      	ldr	r0, [pc, #208]	@ (8002150 <GPIO_Init+0x314>)
 8002080:	f001 fbc6 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin
 8002084:	f648 4304 	movw	r3, #35844	@ 0x8c04
 8002088:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800208a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800208e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	482d      	ldr	r0, [pc, #180]	@ (8002154 <GPIO_Init+0x318>)
 80020a0:	f001 fbb6 	bl	8003810 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = ARD_D2_Pin;
 80020a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D2_GPIO_Port, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4826      	ldr	r0, [pc, #152]	@ (8002154 <GPIO_Init+0x318>)
 80020bc:	f001 fba8 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80020c0:	f243 0381 	movw	r3, #12417	@ 0x3081
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	481e      	ldr	r0, [pc, #120]	@ (8002154 <GPIO_Init+0x318>)
 80020da:	f001 fb99 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80020de:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80020e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	4818      	ldr	r0, [pc, #96]	@ (8002158 <GPIO_Init+0x31c>)
 80020f8:	f001 fb8a 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80020fc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002102:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	4811      	ldr	r0, [pc, #68]	@ (8002158 <GPIO_Init+0x31c>)
 8002114:	f001 fb7c 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002118:	2302      	movs	r3, #2
 800211a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002128:	2305      	movs	r3, #5
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	4808      	ldr	r0, [pc, #32]	@ (8002154 <GPIO_Init+0x318>)
 8002134:	f001 fb6c 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002138:	2378      	movs	r3, #120	@ 0x78
 800213a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e00a      	b.n	800215c <GPIO_Init+0x320>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	48001000 	.word	0x48001000
 8002150:	48000400 	.word	0x48000400
 8002154:	48000c00 	.word	0x48000c00
 8002158:	48000800 	.word	0x48000800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002160:	2307      	movs	r3, #7
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	480b      	ldr	r0, [pc, #44]	@ (8002198 <GPIO_Init+0x35c>)
 800216c:	f001 fb50 	bl	8003810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2017      	movs	r0, #23
 8002176:	f001 fac6 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800217a:	2017      	movs	r0, #23
 800217c:	f001 fadf 	bl	800373e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2028      	movs	r0, #40	@ 0x28
 8002186:	f001 fabe 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800218a:	2028      	movs	r0, #40	@ 0x28
 800218c:	f001 fad7 	bl	800373e <HAL_NVIC_EnableIRQ>

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	@ 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	48000c00 	.word	0x48000c00

0800219c <I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void I2C1_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <I2C1_Init+0x74>)
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <I2C1_Init+0x78>)
 80021a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <I2C1_Init+0x74>)
 80021a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002218 <I2C1_Init+0x7c>)
 80021aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <I2C1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <I2C1_Init+0x74>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <I2C1_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <I2C1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <I2C1_Init+0x74>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <I2C1_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <I2C1_Init+0x74>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d6:	480e      	ldr	r0, [pc, #56]	@ (8002210 <I2C1_Init+0x74>)
 80021d8:	f001 fe00 	bl	8003ddc <HAL_I2C_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <I2C1_Init+0x4a>
  {
    Error_Handler();
 80021e2:	f7fe ff5d 	bl	80010a0 <Error_Handler>
  }
  
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4809      	ldr	r0, [pc, #36]	@ (8002210 <I2C1_Init+0x74>)
 80021ea:	f002 fbb1 	bl	8004950 <HAL_I2CEx_ConfigAnalogFilter>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <I2C1_Init+0x5c>
  {
    Error_Handler();
 80021f4:	f7fe ff54 	bl	80010a0 <Error_Handler>
  }
  
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021f8:	2100      	movs	r1, #0
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <I2C1_Init+0x74>)
 80021fc:	f002 fbf3 	bl	80049e6 <HAL_I2CEx_ConfigDigitalFilter>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C1_Init+0x6e>
  {
    Error_Handler();
 8002206:	f7fe ff4b 	bl	80010a0 <Error_Handler>
  }
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000414 	.word	0x20000414
 8002214:	40005400 	.word	0x40005400
 8002218:	10909cec 	.word	0x10909cec

0800221c <UART1_Init>:

#define _NOEXTERN
#include "uart.h"

void UART1_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <UART1_Init+0x50>)
 8002222:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <UART1_Init+0x54>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <UART1_Init+0x50>)
 8002228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <UART1_Init+0x50>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <UART1_Init+0x50>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <UART1_Init+0x50>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <UART1_Init+0x50>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <UART1_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b07      	ldr	r3, [pc, #28]	@ (800226c <UART1_Init+0x50>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <UART1_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <UART1_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
  
	BSP_COM_Init(COM1, &huart1);
 800225e:	4903      	ldr	r1, [pc, #12]	@ (800226c <UART1_Init+0x50>)
 8002260:	2000      	movs	r0, #0
 8002262:	f000 f831 	bl	80022c8 <BSP_COM_Init>
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000468 	.word	0x20000468
 8002270:	40013800 	.word	0x40013800

08002274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff fd26 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800227e:	490d      	ldr	r1, [pc, #52]	@ (80022b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <LoopForever+0xe>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002294:	4c0a      	ldr	r4, [pc, #40]	@ (80022c0 <LoopForever+0x16>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f009 fa27 	bl	800b6f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a6:	f7fe fe27 	bl	8000ef8 <main>

080022aa <LoopForever>:

LoopForever:
    b LoopForever
 80022aa:	e7fe      	b.n	80022aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80022b8:	0800e45c 	.word	0x0800e45c
  ldr r2, =_sbss
 80022bc:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80022c0:	20000f34 	.word	0x20000f34

080022c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_2_IRQHandler>
	...

080022c8 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	@ 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <BSP_COM_Init+0x2a>
 80022da:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <BSP_COM_Init+0xc8>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	4a2c      	ldr	r2, [pc, #176]	@ (8002390 <BSP_COM_Init+0xc8>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <BSP_COM_Init+0xc8>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <BSP_COM_Init+0x48>
 80022f8:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <BSP_COM_Init+0xc8>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <BSP_COM_Init+0xc8>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002304:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <BSP_COM_Init+0xc8>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <BSP_COM_Init+0x66>
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <BSP_COM_Init+0xc8>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <BSP_COM_Init+0xc8>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002320:	6613      	str	r3, [r2, #96]	@ 0x60
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <BSP_COM_Init+0xc8>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800232e:	2340      	movs	r3, #64	@ 0x40
 8002330:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002336:	2302      	movs	r3, #2
 8002338:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800233e:	2307      	movs	r3, #7
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <BSP_COM_Init+0xcc>)
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	f107 0214 	add.w	r2, r7, #20
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fa5d 	bl	8003810 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800235e:	2307      	movs	r3, #7
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4a0c      	ldr	r2, [pc, #48]	@ (8002398 <BSP_COM_Init+0xd0>)
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	f107 0214 	add.w	r2, r7, #20
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fa4d 	bl	8003810 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4a08      	ldr	r2, [pc, #32]	@ (800239c <BSP_COM_Init+0xd4>)
 800237a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f005 f9d3 	bl	800772e <HAL_UART_Init>
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	20000020 	.word	0x20000020
 8002398:	20000024 	.word	0x20000024
 800239c:	2000001c 	.word	0x2000001c

080023a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023a8:	4b27      	ldr	r3, [pc, #156]	@ (8002448 <I2Cx_MspInit+0xa8>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	4a26      	ldr	r2, [pc, #152]	@ (8002448 <I2Cx_MspInit+0xa8>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b4:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <I2Cx_MspInit+0xa8>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80023c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023c6:	2312      	movs	r3, #18
 80023c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80023d2:	2304      	movs	r3, #4
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	481b      	ldr	r0, [pc, #108]	@ (800244c <I2Cx_MspInit+0xac>)
 80023de:	f001 fa17 	bl	8003810 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4818      	ldr	r0, [pc, #96]	@ (800244c <I2Cx_MspInit+0xac>)
 80023ea:	f001 fa11 	bl	8003810 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80023ee:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <I2Cx_MspInit+0xa8>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <I2Cx_MspInit+0xa8>)
 80023f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <I2Cx_MspInit+0xa8>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <I2Cx_MspInit+0xa8>)
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <I2Cx_MspInit+0xa8>)
 800240c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002410:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <I2Cx_MspInit+0xa8>)
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002416:	4a0c      	ldr	r2, [pc, #48]	@ (8002448 <I2Cx_MspInit+0xa8>)
 8002418:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800241c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	210f      	movs	r1, #15
 8002422:	2021      	movs	r0, #33	@ 0x21
 8002424:	f001 f96f 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002428:	2021      	movs	r0, #33	@ 0x21
 800242a:	f001 f988 	bl	800373e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	210f      	movs	r1, #15
 8002432:	2022      	movs	r0, #34	@ 0x22
 8002434:	f001 f967 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002438:	2022      	movs	r0, #34	@ 0x22
 800243a:	f001 f980 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	@ 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	48000400 	.word	0x48000400

08002450 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <I2Cx_Init+0x54>)
 800245c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <I2Cx_Init+0x58>)
 8002462:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff89 	bl	80023a0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f001 fca4 	bl	8003ddc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002494:	2100      	movs	r1, #0
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f002 fa5a 	bl	8004950 <HAL_I2CEx_ConfigAnalogFilter>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40005800 	.word	0x40005800
 80024a8:	00702681 	.word	0x00702681

080024ac <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af04      	add	r7, sp, #16
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	72fb      	strb	r3, [r7, #11]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	b299      	uxth	r1, r3
 80024ce:	88f8      	ldrh	r0, [r7, #6]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4603      	mov	r3, r0
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f001 fe58 	bl	8004198 <HAL_I2C_Mem_Read>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	4619      	mov	r1, r3
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f832 	bl	8002560 <I2Cx_Error>
  }
  return status;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08a      	sub	sp, #40	@ 0x28
 800250a:	af04      	add	r7, sp, #16
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	4608      	mov	r0, r1
 8002510:	4611      	mov	r1, r2
 8002512:	461a      	mov	r2, r3
 8002514:	4603      	mov	r3, r0
 8002516:	72fb      	strb	r3, [r7, #11]
 8002518:	460b      	mov	r3, r1
 800251a:	813b      	strh	r3, [r7, #8]
 800251c:	4613      	mov	r3, r2
 800251e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b299      	uxth	r1, r3
 8002528:	88f8      	ldrh	r0, [r7, #6]
 800252a:	893a      	ldrh	r2, [r7, #8]
 800252c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f001 fd17 	bl	8003f70 <HAL_I2C_Mem_Write>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	4619      	mov	r1, r3
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f805 	bl	8002560 <I2Cx_Error>
  }
  return status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f001 fcd0 	bl	8003f12 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff6c 	bl	8002450 <I2Cx_Init>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002584:	4802      	ldr	r0, [pc, #8]	@ (8002590 <SENSOR_IO_Init+0x10>)
 8002586:	f7ff ff63 	bl	8002450 <I2Cx_Init>
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200004f0 	.word	0x200004f0

08002594 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af02      	add	r7, sp, #8
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	460b      	mov	r3, r1
 80025a0:	71bb      	strb	r3, [r7, #6]
 80025a2:	4613      	mov	r3, r2
 80025a4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	79f9      	ldrb	r1, [r7, #7]
 80025ac:	2301      	movs	r3, #1
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	1d7b      	adds	r3, r7, #5
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <SENSOR_IO_Write+0x30>)
 80025b8:	f7ff ffa5 	bl	8002506 <I2Cx_WriteMultiple>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200004f0 	.word	0x200004f0

080025c8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	4603      	mov	r3, r0
 80025d0:	460a      	mov	r2, r1
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	79f9      	ldrb	r1, [r7, #7]
 80025e2:	2301      	movs	r3, #1
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	f107 030f 	add.w	r3, r7, #15
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	4804      	ldr	r0, [pc, #16]	@ (8002600 <SENSOR_IO_Read+0x38>)
 80025f0:	f7ff ff5c 	bl	80024ac <I2Cx_ReadMultiple>

  return read_value;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200004f0 	.word	0x200004f0

08002604 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af02      	add	r7, sp, #8
 800260a:	603a      	str	r2, [r7, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	460b      	mov	r3, r1
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	4613      	mov	r3, r2
 8002618:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	b29a      	uxth	r2, r3
 800261e:	79f9      	ldrb	r1, [r7, #7]
 8002620:	88bb      	ldrh	r3, [r7, #4]
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	4804      	ldr	r0, [pc, #16]	@ (800263c <SENSOR_IO_ReadMultiple+0x38>)
 800262c:	f7ff ff3e 	bl	80024ac <I2Cx_ReadMultiple>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200004f0 	.word	0x200004f0

08002640 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800264a:	2300      	movs	r3, #0
 800264c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <BSP_ACCELERO_Init+0x74>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4798      	blx	r3
 8002654:	4603      	mov	r3, r0
 8002656:	2b6a      	cmp	r3, #106	@ 0x6a
 8002658:	d002      	beq.n	8002660 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e024      	b.n	80026aa <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <BSP_ACCELERO_Init+0x78>)
 8002662:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <BSP_ACCELERO_Init+0x74>)
 8002664:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002666:	2330      	movs	r3, #48	@ 0x30
 8002668:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800266e:	2300      	movs	r3, #0
 8002670:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002672:	2340      	movs	r3, #64	@ 0x40
 8002674:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800267e:	797a      	ldrb	r2, [r7, #5]
 8002680:	7abb      	ldrb	r3, [r7, #10]
 8002682:	4313      	orrs	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002688:	7a3b      	ldrb	r3, [r7, #8]
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	b2db      	uxtb	r3, r3
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	b21a      	sxth	r2, r3
 8002694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <BSP_ACCELERO_Init+0x78>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	89ba      	ldrh	r2, [r7, #12]
 80026a6:	4610      	mov	r0, r2
 80026a8:	4798      	blx	r3
  }  

  return ret;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000084 	.word	0x20000084
 80026b8:	20000544 	.word	0x20000544

080026bc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80026d6:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000544 	.word	0x20000544

080026ec <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80026f6:	2300      	movs	r3, #0
 80026f8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <BSP_GYRO_Init+0x7c>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4798      	blx	r3
 8002700:	4603      	mov	r3, r0
 8002702:	2b6a      	cmp	r3, #106	@ 0x6a
 8002704:	d002      	beq.n	800270c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e028      	b.n	800275e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800270c:	4b17      	ldr	r3, [pc, #92]	@ (800276c <BSP_GYRO_Init+0x80>)
 800270e:	4a16      	ldr	r2, [pc, #88]	@ (8002768 <BSP_GYRO_Init+0x7c>)
 8002710:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002716:	2330      	movs	r3, #48	@ 0x30
 8002718:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002722:	2340      	movs	r3, #64	@ 0x40
 8002724:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800272a:	230c      	movs	r3, #12
 800272c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800272e:	7aba      	ldrb	r2, [r7, #10]
 8002730:	797b      	ldrb	r3, [r7, #5]
 8002732:	4313      	orrs	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002738:	7a3b      	ldrb	r3, [r7, #8]
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	b2db      	uxtb	r3, r3
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b21a      	sxth	r2, r3
 8002744:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	b21b      	sxth	r3, r3
 800274c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <BSP_GYRO_Init+0x80>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	89ba      	ldrh	r2, [r7, #12]
 8002756:	4610      	mov	r0, r2
 8002758:	4798      	blx	r3
    
    ret = GYRO_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200000b8 	.word	0x200000b8
 800276c:	20000548 	.word	0x20000548

08002770 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002776:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <BSP_HSENSOR_Init+0x38>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	20be      	movs	r0, #190	@ 0xbe
 800277c:	4798      	blx	r3
 800277e:	4603      	mov	r3, r0
 8002780:	2bbc      	cmp	r3, #188	@ 0xbc
 8002782:	d002      	beq.n	800278a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	e009      	b.n	800279e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <BSP_HSENSOR_Init+0x3c>)
 800278c:	4a06      	ldr	r2, [pc, #24]	@ (80027a8 <BSP_HSENSOR_Init+0x38>)
 800278e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <BSP_HSENSOR_Init+0x3c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	20be      	movs	r0, #190	@ 0xbe
 8002798:	4798      	blx	r3
    ret = HSENSOR_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800279e:	687b      	ldr	r3, [r7, #4]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000028 	.word	0x20000028
 80027ac:	2000054c 	.word	0x2000054c

080027b0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80027b4:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	20be      	movs	r0, #190	@ 0xbe
 80027bc:	4798      	blx	r3
 80027be:	eef0 7a40 	vmov.f32	s15, s0
}
 80027c2:	eeb0 0a67 	vmov.f32	s0, s15
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000054c 	.word	0x2000054c

080027cc <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <BSP_MAGNETO_Init+0x50>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4798      	blx	r3
 80027dc:	4603      	mov	r3, r0
 80027de:	2b3d      	cmp	r3, #61	@ 0x3d
 80027e0:	d002      	beq.n	80027e8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	71fb      	strb	r3, [r7, #7]
 80027e6:	e013      	b.n	8002810 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <BSP_MAGNETO_Init+0x54>)
 80027ea:	4a0c      	ldr	r2, [pc, #48]	@ (800281c <BSP_MAGNETO_Init+0x50>)
 80027ec:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80027ee:	2358      	movs	r3, #88	@ 0x58
 80027f0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80027fa:	2308      	movs	r3, #8
 80027fc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80027fe:	2340      	movs	r3, #64	@ 0x40
 8002800:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <BSP_MAGNETO_Init+0x54>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	463a      	mov	r2, r7
 800280a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800280e:	4798      	blx	r3
  } 

  return ret;  
 8002810:	79fb      	ldrb	r3, [r7, #7]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000044 	.word	0x20000044
 8002820:	20000550 	.word	0x20000550

08002824 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800282a:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <BSP_PSENSOR_Init+0x38>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	20ba      	movs	r0, #186	@ 0xba
 8002830:	4798      	blx	r3
 8002832:	4603      	mov	r3, r0
 8002834:	2bb1      	cmp	r3, #177	@ 0xb1
 8002836:	d002      	beq.n	800283e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	e009      	b.n	8002852 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <BSP_PSENSOR_Init+0x3c>)
 8002840:	4a06      	ldr	r2, [pc, #24]	@ (800285c <BSP_PSENSOR_Init+0x38>)
 8002842:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <BSP_PSENSOR_Init+0x3c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	20ba      	movs	r0, #186	@ 0xba
 800284c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002852:	687b      	ldr	r3, [r7, #4]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000078 	.word	0x20000078
 8002860:	20000554 	.word	0x20000554

08002864 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002868:	4b04      	ldr	r3, [pc, #16]	@ (800287c <BSP_PSENSOR_ReadPressure+0x18>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	20ba      	movs	r0, #186	@ 0xba
 8002870:	4798      	blx	r3
 8002872:	eef0 7a40 	vmov.f32	s15, s0
}
 8002876:	eeb0 0a67 	vmov.f32	s0, s15
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000554 	.word	0x20000554

08002880 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <BSP_TSENSOR_Init+0x30>)
 800288c:	4a09      	ldr	r2, [pc, #36]	@ (80028b4 <BSP_TSENSOR_Init+0x34>)
 800288e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002890:	f7ff fe76 	bl	8002580 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <BSP_TSENSOR_Init+0x30>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	20be      	movs	r0, #190	@ 0xbe
 800289e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80028a4:	79fb      	ldrb	r3, [r7, #7]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000558 	.word	0x20000558
 80028b4:	20000034 	.word	0x20000034

080028b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	20be      	movs	r0, #190	@ 0xbe
 80028c4:	4798      	blx	r3
 80028c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80028ca:	eeb0 0a67 	vmov.f32	s0, s15
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000558 	.word	0x20000558

080028d4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2120      	movs	r1, #32
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fe6f 	bl	80025c8 <SENSOR_IO_Read>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	f023 0303 	bic.w	r3, r3, #3
 8002904:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002914:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	2120      	movs	r1, #32
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fe38 	bl	8002594 <SENSOR_IO_Write>
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800293a:	f7ff fe21 	bl	8002580 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	210f      	movs	r1, #15
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe3f 	bl	80025c8 <SENSOR_IO_Read>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	b2d8      	uxtb	r0, r3
 8002966:	f107 020c 	add.w	r2, r7, #12
 800296a:	2302      	movs	r3, #2
 800296c:	21b0      	movs	r1, #176	@ 0xb0
 800296e:	f7ff fe49 	bl	8002604 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002972:	7b3b      	ldrb	r3, [r7, #12]
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	b2d8      	uxtb	r0, r3
 8002986:	f107 020c 	add.w	r2, r7, #12
 800298a:	2302      	movs	r3, #2
 800298c:	21b6      	movs	r1, #182	@ 0xb6
 800298e:	f7ff fe39 	bl	8002604 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	7b3b      	ldrb	r3, [r7, #12]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	b2d8      	uxtb	r0, r3
 80029a4:	f107 020c 	add.w	r2, r7, #12
 80029a8:	2302      	movs	r3, #2
 80029aa:	21ba      	movs	r1, #186	@ 0xba
 80029ac:	f7ff fe2a 	bl	8002604 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029b0:	7b7b      	ldrb	r3, [r7, #13]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	7b3b      	ldrb	r3, [r7, #12]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	b2d8      	uxtb	r0, r3
 80029c2:	f107 020c 	add.w	r2, r7, #12
 80029c6:	2302      	movs	r3, #2
 80029c8:	21a8      	movs	r1, #168	@ 0xa8
 80029ca:	f7ff fe1b 	bl	8002604 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029ce:	7b7b      	ldrb	r3, [r7, #13]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80029dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80029f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a08:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002a2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a32:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a42:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002a88 <HTS221_H_ReadHumidity+0x130>
 8002a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	dd01      	ble.n	8002a54 <HTS221_H_ReadHumidity+0xfc>
 8002a50:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HTS221_H_ReadHumidity+0x134>)
 8002a52:	e00a      	b.n	8002a6a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d502      	bpl.n	8002a68 <HTS221_H_ReadHumidity+0x110>
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e000      	b.n	8002a6a <HTS221_H_ReadHumidity+0x112>
 8002a68:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002a6a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a78:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	447a0000 	.word	0x447a0000
 8002a8c:	447a0000 	.word	0x447a0000

08002a90 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fd90 	bl	80025c8 <SENSOR_IO_Read>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	2120      	movs	r1, #32
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fd59 	bl	8002594 <SENSOR_IO_Write>
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b088      	sub	sp, #32
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	b2d8      	uxtb	r0, r3
 8002af8:	f107 0208 	add.w	r2, r7, #8
 8002afc:	2302      	movs	r3, #2
 8002afe:	21b2      	movs	r1, #178	@ 0xb2
 8002b00:	f7ff fd80 	bl	8002604 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2135      	movs	r1, #53	@ 0x35
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fd5c 	bl	80025c8 <SENSOR_IO_Read>
 8002b10:	4603      	mov	r3, r0
 8002b12:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	b21a      	sxth	r2, r3
 8002b20:	7a3b      	ldrb	r3, [r7, #8]
 8002b22:	b21b      	sxth	r3, r3
 8002b24:	4313      	orrs	r3, r2
 8002b26:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002b28:	7ffb      	ldrb	r3, [r7, #31]
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	7a7b      	ldrb	r3, [r7, #9]
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002b3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b40:	10db      	asrs	r3, r3, #3
 8002b42:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002b44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b48:	10db      	asrs	r3, r3, #3
 8002b4a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	b2d8      	uxtb	r0, r3
 8002b50:	f107 0208 	add.w	r2, r7, #8
 8002b54:	2304      	movs	r3, #4
 8002b56:	21bc      	movs	r1, #188	@ 0xbc
 8002b58:	f7ff fd54 	bl	8002604 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	7a3b      	ldrb	r3, [r7, #8]
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	b21a      	sxth	r2, r3
 8002b70:	7abb      	ldrb	r3, [r7, #10]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	b2d8      	uxtb	r0, r3
 8002b7c:	f107 0208 	add.w	r2, r7, #8
 8002b80:	2302      	movs	r3, #2
 8002b82:	21aa      	movs	r1, #170	@ 0xaa
 8002b84:	f7ff fd3e 	bl	8002604 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b88:	7a7b      	ldrb	r3, [r7, #9]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	7a3b      	ldrb	r3, [r7, #8]
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002b96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002bac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002bbe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	ee07 3a90 	vmov	s15, r3
}
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	463b      	mov	r3, r7
 8002c00:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002c04:	783b      	ldrb	r3, [r7, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	2120      	movs	r1, #32
 8002c0a:	203c      	movs	r0, #60	@ 0x3c
 8002c0c:	f7ff fcc2 	bl	8002594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	461a      	mov	r2, r3
 8002c14:	2121      	movs	r1, #33	@ 0x21
 8002c16:	203c      	movs	r0, #60	@ 0x3c
 8002c18:	f7ff fcbc 	bl	8002594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002c1c:	78bb      	ldrb	r3, [r7, #2]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2122      	movs	r1, #34	@ 0x22
 8002c22:	203c      	movs	r0, #60	@ 0x3c
 8002c24:	f7ff fcb6 	bl	8002594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2123      	movs	r1, #35	@ 0x23
 8002c2e:	203c      	movs	r0, #60	@ 0x3c
 8002c30:	f7ff fcb0 	bl	8002594 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002c34:	793b      	ldrb	r3, [r7, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	2124      	movs	r1, #36	@ 0x24
 8002c3a:	203c      	movs	r0, #60	@ 0x3c
 8002c3c:	f7ff fcaa 	bl	8002594 <SENSOR_IO_Write>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002c52:	2122      	movs	r1, #34	@ 0x22
 8002c54:	203c      	movs	r0, #60	@ 0x3c
 8002c56:	f7ff fcb7 	bl	80025c8 <SENSOR_IO_Read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f023 0303 	bic.w	r3, r3, #3
 8002c64:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f043 0303 	orr.w	r3, r3, #3
 8002c6c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	461a      	mov	r2, r3
 8002c72:	2122      	movs	r1, #34	@ 0x22
 8002c74:	203c      	movs	r0, #60	@ 0x3c
 8002c76:	f7ff fc8d 	bl	8002594 <SENSOR_IO_Write>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002c86:	f7ff fc7b 	bl	8002580 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	203c      	movs	r0, #60	@ 0x3c
 8002c8e:	f7ff fc9b 	bl	80025c8 <SENSOR_IO_Read>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002ca6:	2122      	movs	r1, #34	@ 0x22
 8002ca8:	203c      	movs	r0, #60	@ 0x3c
 8002caa:	f7ff fc8d 	bl	80025c8 <SENSOR_IO_Read>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	f023 0320 	bic.w	r3, r3, #32
 8002cb8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2122      	movs	r1, #34	@ 0x22
 8002cce:	203c      	movs	r0, #60	@ 0x3c
 8002cd0:	f7ff fc60 	bl	8002594 <SENSOR_IO_Write>
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002cf2:	2121      	movs	r1, #33	@ 0x21
 8002cf4:	203c      	movs	r0, #60	@ 0x3c
 8002cf6:	f7ff fc67 	bl	80025c8 <SENSOR_IO_Read>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002cfe:	f107 0208 	add.w	r2, r7, #8
 8002d02:	2306      	movs	r3, #6
 8002d04:	21a8      	movs	r1, #168	@ 0xa8
 8002d06:	203c      	movs	r0, #60	@ 0x3c
 8002d08:	f7ff fc7c 	bl	8002604 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e01a      	b.n	8002d48 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	3301      	adds	r3, #1
 8002d18:	3320      	adds	r3, #32
 8002d1a:	443b      	add	r3, r7
 8002d1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	7ffa      	ldrb	r2, [r7, #31]
 8002d26:	0052      	lsls	r2, r2, #1
 8002d28:	3220      	adds	r2, #32
 8002d2a:	443a      	add	r2, r7
 8002d2c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002d30:	4413      	add	r3, r2
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	7ffb      	ldrb	r3, [r7, #31]
 8002d36:	b212      	sxth	r2, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	443b      	add	r3, r7
 8002d3e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
 8002d44:	3301      	adds	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d9e1      	bls.n	8002d12 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002d54:	2b60      	cmp	r3, #96	@ 0x60
 8002d56:	d013      	beq.n	8002d80 <LIS3MDL_MagReadXYZ+0xa4>
 8002d58:	2b60      	cmp	r3, #96	@ 0x60
 8002d5a:	dc14      	bgt.n	8002d86 <LIS3MDL_MagReadXYZ+0xaa>
 8002d5c:	2b40      	cmp	r3, #64	@ 0x40
 8002d5e:	d00c      	beq.n	8002d7a <LIS3MDL_MagReadXYZ+0x9e>
 8002d60:	2b40      	cmp	r3, #64	@ 0x40
 8002d62:	dc10      	bgt.n	8002d86 <LIS3MDL_MagReadXYZ+0xaa>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <LIS3MDL_MagReadXYZ+0x92>
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d003      	beq.n	8002d74 <LIS3MDL_MagReadXYZ+0x98>
 8002d6c:	e00b      	b.n	8002d86 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <LIS3MDL_MagReadXYZ+0xf8>)
 8002d70:	61bb      	str	r3, [r7, #24]
    break;
 8002d72:	e008      	b.n	8002d86 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <LIS3MDL_MagReadXYZ+0xfc>)
 8002d76:	61bb      	str	r3, [r7, #24]
    break;
 8002d78:	e005      	b.n	8002d86 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <LIS3MDL_MagReadXYZ+0x100>)
 8002d7c:	61bb      	str	r3, [r7, #24]
    break;
 8002d7e:	e002      	b.n	8002d86 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002d80:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <LIS3MDL_MagReadXYZ+0x104>)
 8002d82:	61bb      	str	r3, [r7, #24]
    break;    
 8002d84:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e01a      	b.n	8002dc2 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	3320      	adds	r3, #32
 8002d92:	443b      	add	r3, r7
 8002d94:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db4:	ee17 2a90 	vmov	r2, s15
 8002db8:	b212      	sxth	r2, r2
 8002dba:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d9e1      	bls.n	8002d8c <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	3e0f5c29 	.word	0x3e0f5c29
 8002dd8:	3e947ae1 	.word	0x3e947ae1
 8002ddc:	3edc28f6 	.word	0x3edc28f6
 8002de0:	3f147ae1 	.word	0x3f147ae1

08002de4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f879 	bl	8002ee8 <LPS22HB_Init>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002e0c:	f7ff fbb8 	bl	8002580 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	210f      	movs	r1, #15
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fbd6 	bl	80025c8 <SENSOR_IO_Read>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	74fb      	strb	r3, [r7, #19]
 8002e3e:	e013      	b.n	8002e68 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	3328      	adds	r3, #40	@ 0x28
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	7cfc      	ldrb	r4, [r7, #19]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f7ff fbba 	bl	80025c8 <SENSOR_IO_Read>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	f104 0318 	add.w	r3, r4, #24
 8002e5c:	443b      	add	r3, r7
 8002e5e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	3301      	adds	r3, #1
 8002e66:	74fb      	strb	r3, [r7, #19]
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d9e8      	bls.n	8002e40 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	74fb      	strb	r3, [r7, #19]
 8002e72:	e00f      	b.n	8002e94 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	3318      	adds	r3, #24
 8002e78:	443b      	add	r3, r7
 8002e7a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	3301      	adds	r3, #1
 8002e92:	74fb      	strb	r3, [r7, #19]
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d9ec      	bls.n	8002e74 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eaa:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2264      	movs	r2, #100	@ 0x64
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da01      	bge.n	8002ec0 <LPS22HB_P_ReadPressure+0x94>
 8002ebc:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002ec0:	131b      	asrs	r3, r3, #12
 8002ec2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ece:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ee4 <LPS22HB_P_ReadPressure+0xb8>
 8002ed2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ed6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002eda:	eeb0 0a67 	vmov.f32	s0, s15
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd90      	pop	{r4, r7, pc}
 8002ee4:	42c80000 	.word	0x42c80000

08002ee8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	211a      	movs	r1, #26
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fb65 	bl	80025c8 <SENSOR_IO_Read>
 8002efe:	4603      	mov	r3, r0
 8002f00:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	211a      	movs	r1, #26
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb3a 	bl	8002594 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2110      	movs	r1, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fb4e 	bl	80025c8 <SENSOR_IO_Read>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f36:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002f3e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	f023 0302 	bic.w	r3, r3, #2
 8002f46:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	2110      	movs	r1, #16
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fb1b 	bl	8002594 <SENSOR_IO_Write>
}  
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002f74:	2110      	movs	r1, #16
 8002f76:	20d4      	movs	r0, #212	@ 0xd4
 8002f78:	f7ff fb26 	bl	80025c8 <SENSOR_IO_Read>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002f8c:	7bba      	ldrb	r2, [r7, #14]
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	461a      	mov	r2, r3
 8002f98:	2110      	movs	r1, #16
 8002f9a:	20d4      	movs	r0, #212	@ 0xd4
 8002f9c:	f7ff fafa 	bl	8002594 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002fa0:	2112      	movs	r1, #18
 8002fa2:	20d4      	movs	r0, #212	@ 0xd4
 8002fa4:	f7ff fb10 	bl	80025c8 <SENSOR_IO_Read>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002fb4:	7bbb      	ldrb	r3, [r7, #14]
 8002fb6:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002fba:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002fbc:	7bba      	ldrb	r2, [r7, #14]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002fc4:	7bbb      	ldrb	r3, [r7, #14]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2112      	movs	r1, #18
 8002fca:	20d4      	movs	r0, #212	@ 0xd4
 8002fcc:	f7ff fae2 	bl	8002594 <SENSOR_IO_Write>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	20d4      	movs	r0, #212	@ 0xd4
 8002fe6:	f7ff faef 	bl	80025c8 <SENSOR_IO_Read>
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2110      	movs	r1, #16
 8002ffc:	20d4      	movs	r0, #212	@ 0xd4
 8002ffe:	f7ff fac9 	bl	8002594 <SENSOR_IO_Write>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800300e:	f7ff fab7 	bl	8002580 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003012:	210f      	movs	r1, #15
 8003014:	20d4      	movs	r0, #212	@ 0xd4
 8003016:	f7ff fad7 	bl	80025c8 <SENSOR_IO_Read>
 800301a:	4603      	mov	r3, r0
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}

08003020 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800302e:	2115      	movs	r1, #21
 8003030:	20d4      	movs	r0, #212	@ 0xd4
 8003032:	f7ff fac9 	bl	80025c8 <SENSOR_IO_Read>
 8003036:	4603      	mov	r3, r0
 8003038:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	f023 0310 	bic.w	r3, r3, #16
 8003040:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	f043 0310 	orr.w	r3, r3, #16
 800304e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	461a      	mov	r2, r3
 8003054:	2115      	movs	r1, #21
 8003056:	20d4      	movs	r0, #212	@ 0xd4
 8003058:	f7ff fa9c 	bl	8002594 <SENSOR_IO_Write>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800307a:	2110      	movs	r1, #16
 800307c:	20d4      	movs	r0, #212	@ 0xd4
 800307e:	f7ff faa3 	bl	80025c8 <SENSOR_IO_Read>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003086:	f107 0208 	add.w	r2, r7, #8
 800308a:	2306      	movs	r3, #6
 800308c:	2128      	movs	r1, #40	@ 0x28
 800308e:	20d4      	movs	r0, #212	@ 0xd4
 8003090:	f7ff fab8 	bl	8002604 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003094:	2300      	movs	r3, #0
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e01a      	b.n	80030d0 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	3301      	adds	r3, #1
 80030a0:	3320      	adds	r3, #32
 80030a2:	443b      	add	r3, r7
 80030a4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	7ffa      	ldrb	r2, [r7, #31]
 80030ae:	0052      	lsls	r2, r2, #1
 80030b0:	3220      	adds	r2, #32
 80030b2:	443a      	add	r2, r7
 80030b4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80030b8:	4413      	add	r3, r2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
 80030be:	b212      	sxth	r2, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	3320      	adds	r3, #32
 80030c4:	443b      	add	r3, r7
 80030c6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	3301      	adds	r3, #1
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	7ffb      	ldrb	r3, [r7, #31]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d9e1      	bls.n	800309a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d829      	bhi.n	8003134 <LSM6DSL_AccReadXYZ+0xd0>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <LSM6DSL_AccReadXYZ+0x84>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	08003135 	.word	0x08003135
 80030f0:	08003135 	.word	0x08003135
 80030f4:	08003135 	.word	0x08003135
 80030f8:	0800312f 	.word	0x0800312f
 80030fc:	08003135 	.word	0x08003135
 8003100:	08003135 	.word	0x08003135
 8003104:	08003135 	.word	0x08003135
 8003108:	08003123 	.word	0x08003123
 800310c:	08003135 	.word	0x08003135
 8003110:	08003135 	.word	0x08003135
 8003114:	08003135 	.word	0x08003135
 8003118:	08003129 	.word	0x08003129
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <LSM6DSL_AccReadXYZ+0x11c>)
 800311e:	61bb      	str	r3, [r7, #24]
    break;
 8003120:	e008      	b.n	8003134 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003122:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <LSM6DSL_AccReadXYZ+0x120>)
 8003124:	61bb      	str	r3, [r7, #24]
    break;
 8003126:	e005      	b.n	8003134 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003128:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <LSM6DSL_AccReadXYZ+0x124>)
 800312a:	61bb      	str	r3, [r7, #24]
    break;
 800312c:	e002      	b.n	8003134 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800312e:	4b17      	ldr	r3, [pc, #92]	@ (800318c <LSM6DSL_AccReadXYZ+0x128>)
 8003130:	61bb      	str	r3, [r7, #24]
    break;    
 8003132:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e01a      	b.n	8003170 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800313a:	7ffb      	ldrb	r3, [r7, #31]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	3320      	adds	r3, #32
 8003140:	443b      	add	r3, r7
 8003142:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800314e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003162:	ee17 2a90 	vmov	r2, s15
 8003166:	b212      	sxth	r2, r2
 8003168:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	3301      	adds	r3, #1
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d9e1      	bls.n	800313a <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003176:	bf00      	nop
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	3d79db23 	.word	0x3d79db23
 8003184:	3df9db23 	.word	0x3df9db23
 8003188:	3e79db23 	.word	0x3e79db23
 800318c:	3ef9db23 	.word	0x3ef9db23

08003190 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800319e:	2111      	movs	r1, #17
 80031a0:	20d4      	movs	r0, #212	@ 0xd4
 80031a2:	f7ff fa11 	bl	80025c8 <SENSOR_IO_Read>
 80031a6:	4603      	mov	r3, r0
 80031a8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80031b6:	7bba      	ldrb	r2, [r7, #14]
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80031be:	7bbb      	ldrb	r3, [r7, #14]
 80031c0:	461a      	mov	r2, r3
 80031c2:	2111      	movs	r1, #17
 80031c4:	20d4      	movs	r0, #212	@ 0xd4
 80031c6:	f7ff f9e5 	bl	8002594 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80031ca:	2112      	movs	r1, #18
 80031cc:	20d4      	movs	r0, #212	@ 0xd4
 80031ce:	f7ff f9fb 	bl	80025c8 <SENSOR_IO_Read>
 80031d2:	4603      	mov	r3, r0
 80031d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	b29b      	uxth	r3, r3
 80031dc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80031de:	7bbb      	ldrb	r3, [r7, #14]
 80031e0:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80031e4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80031e6:	7bba      	ldrb	r2, [r7, #14]
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	461a      	mov	r2, r3
 80031f2:	2112      	movs	r1, #18
 80031f4:	20d4      	movs	r0, #212	@ 0xd4
 80031f6:	f7ff f9cd 	bl	8002594 <SENSOR_IO_Write>
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003208:	2300      	movs	r3, #0
 800320a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800320c:	2111      	movs	r1, #17
 800320e:	20d4      	movs	r0, #212	@ 0xd4
 8003210:	f7ff f9da 	bl	80025c8 <SENSOR_IO_Read>
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	461a      	mov	r2, r3
 8003224:	2111      	movs	r1, #17
 8003226:	20d4      	movs	r0, #212	@ 0xd4
 8003228:	f7ff f9b4 	bl	8002594 <SENSOR_IO_Write>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003238:	f7ff f9a2 	bl	8002580 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800323c:	210f      	movs	r1, #15
 800323e:	20d4      	movs	r0, #212	@ 0xd4
 8003240:	f7ff f9c2 	bl	80025c8 <SENSOR_IO_Read>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}

0800324a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003258:	2116      	movs	r1, #22
 800325a:	20d4      	movs	r0, #212	@ 0xd4
 800325c:	f7ff f9b4 	bl	80025c8 <SENSOR_IO_Read>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800326a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003278:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	461a      	mov	r2, r3
 800327e:	2116      	movs	r1, #22
 8003280:	20d4      	movs	r0, #212	@ 0xd4
 8003282:	f7ff f987 	bl	8002594 <SENSOR_IO_Write>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80032a6:	2111      	movs	r1, #17
 80032a8:	20d4      	movs	r0, #212	@ 0xd4
 80032aa:	f7ff f98d 	bl	80025c8 <SENSOR_IO_Read>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80032b2:	f107 0208 	add.w	r2, r7, #8
 80032b6:	2306      	movs	r3, #6
 80032b8:	2122      	movs	r1, #34	@ 0x22
 80032ba:	20d4      	movs	r0, #212	@ 0xd4
 80032bc:	f7ff f9a2 	bl	8002604 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e01a      	b.n	80032fc <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	3301      	adds	r3, #1
 80032cc:	3320      	adds	r3, #32
 80032ce:	443b      	add	r3, r7
 80032d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	7ffa      	ldrb	r2, [r7, #31]
 80032da:	0052      	lsls	r2, r2, #1
 80032dc:	3220      	adds	r2, #32
 80032de:	443a      	add	r2, r7
 80032e0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80032e4:	4413      	add	r3, r2
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	7ffb      	ldrb	r3, [r7, #31]
 80032ea:	b212      	sxth	r2, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	3320      	adds	r3, #32
 80032f0:	443b      	add	r3, r7
 80032f2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	3301      	adds	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	7ffb      	ldrb	r3, [r7, #31]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d9e1      	bls.n	80032c6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d829      	bhi.n	8003360 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 800330c:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003349 	.word	0x08003349
 8003318:	08003361 	.word	0x08003361
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	0800334f 	.word	0x0800334f
 8003328:	08003361 	.word	0x08003361
 800332c:	08003361 	.word	0x08003361
 8003330:	08003361 	.word	0x08003361
 8003334:	08003355 	.word	0x08003355
 8003338:	08003361 	.word	0x08003361
 800333c:	08003361 	.word	0x08003361
 8003340:	08003361 	.word	0x08003361
 8003344:	0800335b 	.word	0x0800335b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003348:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 800334a:	61bb      	str	r3, [r7, #24]
    break;
 800334c:	e008      	b.n	8003360 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800334e:	4b16      	ldr	r3, [pc, #88]	@ (80033a8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003350:	61bb      	str	r3, [r7, #24]
    break;
 8003352:	e005      	b.n	8003360 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003354:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003356:	61bb      	str	r3, [r7, #24]
    break;
 8003358:	e002      	b.n	8003360 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800335c:	61bb      	str	r3, [r7, #24]
    break;    
 800335e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e016      	b.n	8003394 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	3320      	adds	r3, #32
 800336c:	443b      	add	r3, r7
 800336e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	edd7 7a06 	vldr	s15, [r7, #24]
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	3301      	adds	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	7ffb      	ldrb	r3, [r7, #31]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d9e5      	bls.n	8003366 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	410c0000 	.word	0x410c0000
 80033a8:	418c0000 	.word	0x418c0000
 80033ac:	420c0000 	.word	0x420c0000
 80033b0:	428c0000 	.word	0x428c0000

080033b4 <M24SR_GPO_Callback>:
/**
  * @brief  This function initialize the M24SR device
  * @retval None 
  */
void M24SR_GPO_Callback( void )
{    
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  if( uSynchroMode == M24SR_INTERRUPT_GPO)
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <M24SR_GPO_Callback+0x1c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d102      	bne.n	80033c6 <M24SR_GPO_Callback+0x12>
  {
    GPO_Low = 1;
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <M24SR_GPO_Callback+0x20>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
  }
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	200000ec 	.word	0x200000ec
 80033d4:	2000055c 	.word	0x2000055c

080033d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e2:	2003      	movs	r0, #3
 80033e4:	f000 f984 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033e8:	2000      	movs	r0, #0
 80033ea:	f000 f80d 	bl	8003408 <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	71fb      	strb	r3, [r7, #7]
 80033f8:	e001      	b.n	80033fe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033fa:	f7fe f9c1 	bl	8001780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033fe:	79fb      	ldrb	r3, [r7, #7]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003414:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <HAL_InitTick+0x6c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800341c:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <HAL_InitTick+0x70>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <HAL_InitTick+0x6c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800342a:	fbb3 f3f1 	udiv	r3, r3, r1
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f99f 	bl	8003776 <HAL_SYSTICK_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b0f      	cmp	r3, #15
 8003442:	d809      	bhi.n	8003458 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003444:	2200      	movs	r2, #0
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800344c:	f000 f95b 	bl	8003706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003450:	4a0a      	ldr	r2, [pc, #40]	@ (800347c <HAL_InitTick+0x74>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e007      	b.n	8003468 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e004      	b.n	8003468 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
 8003462:	e001      	b.n	8003468 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200000f4 	.word	0x200000f4
 8003478:	20000018 	.word	0x20000018
 800347c:	200000f0 	.word	0x200000f0

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	@ (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200000f4 	.word	0x200000f4
 80034a4:	20000560 	.word	0x20000560

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	@ (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000560 	.word	0x20000560

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034da:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200000f4 	.word	0x200000f4

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	@ (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	@ (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db12      	blt.n	80035e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	490a      	ldr	r1, [pc, #40]	@ (80035ec <__NVIC_DisableIRQ+0x44>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2001      	movs	r0, #1
 80035ca:	fa00 f202 	lsl.w	r2, r0, r2
 80035ce:	3320      	adds	r3, #32
 80035d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035d4:	f3bf 8f4f 	dsb	sy
}
 80035d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035da:	f3bf 8f6f 	isb	sy
}
 80035de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	@ (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	@ (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	@ 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036d0:	f7ff ff8e 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	@ (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff05 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003718:	f7ff ff1a 	bl	8003550 <__NVIC_GetPriorityGrouping>
 800371c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff ff8e 	bl	8003644 <NVIC_EncodePriority>
 8003728:	4602      	mov	r2, r0
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5d 	bl	80035f0 <__NVIC_SetPriority>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff0d 	bl	800356c <__NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff1d 	bl	80035a8 <__NVIC_DisableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ff94 	bl	80036ac <SysTick_Config>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d005      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e029      	b.n	8003806 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 020e 	bic.w	r2, r2, #14
 80037c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	f003 021c 	and.w	r2, r3, #28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
    }
  }
  return status;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381e:	e17f      	b.n	8003b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2101      	movs	r1, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8171 	beq.w	8003b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d005      	beq.n	8003850 <HAL_GPIO_Init+0x40>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d130      	bne.n	80038b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003886:	2201      	movs	r2, #1
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0201 	and.w	r2, r3, #1
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d118      	bne.n	80038f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038c4:	2201      	movs	r2, #1
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f003 0201 	and.w	r2, r3, #1
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d017      	beq.n	800392c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d123      	bne.n	8003980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	08da      	lsrs	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3208      	adds	r2, #8
 8003940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	220f      	movs	r2, #15
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	08da      	lsrs	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3208      	adds	r2, #8
 800397a:	6939      	ldr	r1, [r7, #16]
 800397c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2203      	movs	r2, #3
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0203 	and.w	r2, r3, #3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80ac 	beq.w	8003b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b40 <HAL_GPIO_Init+0x330>)
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b40 <HAL_GPIO_Init+0x330>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003b40 <HAL_GPIO_Init+0x330>)
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039da:	4a5a      	ldr	r2, [pc, #360]	@ (8003b44 <HAL_GPIO_Init+0x334>)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3302      	adds	r3, #2
 80039e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	220f      	movs	r2, #15
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a04:	d025      	beq.n	8003a52 <HAL_GPIO_Init+0x242>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4f      	ldr	r2, [pc, #316]	@ (8003b48 <HAL_GPIO_Init+0x338>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <HAL_GPIO_Init+0x23e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4e      	ldr	r2, [pc, #312]	@ (8003b4c <HAL_GPIO_Init+0x33c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d019      	beq.n	8003a4a <HAL_GPIO_Init+0x23a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4d      	ldr	r2, [pc, #308]	@ (8003b50 <HAL_GPIO_Init+0x340>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_GPIO_Init+0x236>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4c      	ldr	r2, [pc, #304]	@ (8003b54 <HAL_GPIO_Init+0x344>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00d      	beq.n	8003a42 <HAL_GPIO_Init+0x232>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4b      	ldr	r2, [pc, #300]	@ (8003b58 <HAL_GPIO_Init+0x348>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <HAL_GPIO_Init+0x22e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4a      	ldr	r2, [pc, #296]	@ (8003b5c <HAL_GPIO_Init+0x34c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_GPIO_Init+0x22a>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e00c      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a3a:	2307      	movs	r3, #7
 8003a3c:	e00a      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a3e:	2305      	movs	r3, #5
 8003a40:	e008      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a42:	2304      	movs	r3, #4
 8003a44:	e006      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a46:	2303      	movs	r3, #3
 8003a48:	e004      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_GPIO_Init+0x244>
 8003a52:	2300      	movs	r3, #0
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	f002 0203 	and.w	r2, r2, #3
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	4093      	lsls	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a64:	4937      	ldr	r1, [pc, #220]	@ (8003b44 <HAL_GPIO_Init+0x334>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a72:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a96:	4a32      	ldr	r2, [pc, #200]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a9c:	4b30      	ldr	r3, [pc, #192]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ac0:	4a27      	ldr	r2, [pc, #156]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ac6:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f47f ae78 	bne.w	8003820 <HAL_GPIO_Init+0x10>
  }
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40010000 	.word	0x40010000
 8003b48:	48000400 	.word	0x48000400
 8003b4c:	48000800 	.word	0x48000800
 8003b50:	48000c00 	.word	0x48000c00
 8003b54:	48001000 	.word	0x48001000
 8003b58:	48001400 	.word	0x48001400
 8003b5c:	48001800 	.word	0x48001800
 8003b60:	40010400 	.word	0x40010400

08003b64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003b72:	e0cd      	b.n	8003d10 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b74:	2201      	movs	r2, #1
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80c0 	beq.w	8003d0a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b8a:	4a68      	ldr	r2, [pc, #416]	@ (8003d2c <HAL_GPIO_DeInit+0x1c8>)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bb2:	d025      	beq.n	8003c00 <HAL_GPIO_DeInit+0x9c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d30 <HAL_GPIO_DeInit+0x1cc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01f      	beq.n	8003bfc <HAL_GPIO_DeInit+0x98>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8003d34 <HAL_GPIO_DeInit+0x1d0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d019      	beq.n	8003bf8 <HAL_GPIO_DeInit+0x94>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d38 <HAL_GPIO_DeInit+0x1d4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_GPIO_DeInit+0x90>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a5b      	ldr	r2, [pc, #364]	@ (8003d3c <HAL_GPIO_DeInit+0x1d8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_GPIO_DeInit+0x8c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d40 <HAL_GPIO_DeInit+0x1dc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <HAL_GPIO_DeInit+0x88>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a59      	ldr	r2, [pc, #356]	@ (8003d44 <HAL_GPIO_DeInit+0x1e0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_GPIO_DeInit+0x84>
 8003be4:	2306      	movs	r3, #6
 8003be6:	e00c      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003be8:	2307      	movs	r3, #7
 8003bea:	e00a      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003bec:	2305      	movs	r3, #5
 8003bee:	e008      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	e006      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e004      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e002      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_GPIO_DeInit+0x9e>
 8003c00:	2300      	movs	r3, #0
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	f002 0203 	and.w	r2, r2, #3
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	4093      	lsls	r3, r2
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d132      	bne.n	8003c78 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003c12:	4b4d      	ldr	r3, [pc, #308]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	494b      	ldr	r1, [pc, #300]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003c20:	4b49      	ldr	r3, [pc, #292]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	4947      	ldr	r1, [pc, #284]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003c2e:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	4944      	ldr	r1, [pc, #272]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003c3c:	4b42      	ldr	r3, [pc, #264]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	4940      	ldr	r1, [pc, #256]	@ (8003d48 <HAL_GPIO_DeInit+0x1e4>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220f      	movs	r2, #15
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c5a:	4a34      	ldr	r2, [pc, #208]	@ (8003d2c <HAL_GPIO_DeInit+0x1c8>)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	3302      	adds	r3, #2
 8003c62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43da      	mvns	r2, r3
 8003c6a:	4830      	ldr	r0, [pc, #192]	@ (8003d2c <HAL_GPIO_DeInit+0x1c8>)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	400a      	ands	r2, r1
 8003c72:	3302      	adds	r3, #2
 8003c74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2103      	movs	r1, #3
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	08d2      	lsrs	r2, r2, #3
 8003cac:	4019      	ands	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	401a      	ands	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2103      	movs	r1, #3
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	401a      	ands	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af2b 	bne.w	8003b74 <HAL_GPIO_DeInit+0x10>
  }
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	48000400 	.word	0x48000400
 8003d34:	48000800 	.word	0x48000800
 8003d38:	48000c00 	.word	0x48000c00
 8003d3c:	48001000 	.word	0x48001000
 8003d40:	48001400 	.word	0x48001400
 8003d44:	48001800 	.word	0x48001800
 8003d48:	40010400 	.word	0x40010400

08003d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e001      	b.n	8003d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d8c:	787b      	ldrb	r3, [r7, #1]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003db6:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dc2:	4a05      	ldr	r2, [pc, #20]	@ (8003dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd f864 	bl	8000e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40010400 	.word	0x40010400

08003ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e08d      	b.n	8003f0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fce0 	bl	80017c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	@ 0x24
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e006      	b.n	8003e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d108      	bne.n	8003e7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	e007      	b.n	8003e8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e021      	b.n	8003f68 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	@ 0x24
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fd fca1 	bl	8001884 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	f040 80f9 	bne.w	800418a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x34>
 8003f9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003faa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0ed      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Mem_Write+0x4e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0e6      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fc6:	f7ff fa6f 	bl	80034a8 <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2319      	movs	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fac3 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d1      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	@ 0x21
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2240      	movs	r2, #64	@ 0x40
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004010:	88f8      	ldrh	r0, [r7, #6]
 8004012:	893a      	ldrh	r2, [r7, #8]
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4603      	mov	r3, r0
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f9d3 	bl	80043cc <I2C_RequestMemoryWrite>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0a9      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2bff      	cmp	r3, #255	@ 0xff
 8004040:	d90e      	bls.n	8004060 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	22ff      	movs	r2, #255	@ 0xff
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	2300      	movs	r3, #0
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fc47 	bl	80048ec <I2C_TransferConfig>
 800405e:	e00f      	b.n	8004080 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406e:	b2da      	uxtb	r2, r3
 8004070:	8979      	ldrh	r1, [r7, #10]
 8004072:	2300      	movs	r3, #0
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fc36 	bl	80048ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fac6 	bl	8004616 <I2C_WaitOnTXISFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e07b      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d034      	beq.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d130      	bne.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	@ 0x80
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fa3f 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04d      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2bff      	cmp	r3, #255	@ 0xff
 80040f8:	d90e      	bls.n	8004118 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	@ 0xff
 80040fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fbeb 	bl	80048ec <I2C_TransferConfig>
 8004116:	e00f      	b.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004126:	b2da      	uxtb	r2, r3
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	2300      	movs	r3, #0
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fbda 	bl	80048ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d19e      	bne.n	8004080 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 faac 	bl	80046a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e01a      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <HAL_I2C_Mem_Write+0x224>)
 800416a:	400b      	ands	r3, r1
 800416c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fe00e800 	.word	0xfe00e800

08004198 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f040 80fd 	bne.w	80043ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_I2C_Mem_Read+0x34>
 80041c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0f1      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x4e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0ea      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ee:	f7ff f95b 	bl	80034a8 <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f9af 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0d5      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2222      	movs	r2, #34	@ 0x22
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2240      	movs	r2, #64	@ 0x40
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004238:	88f8      	ldrh	r0, [r7, #6]
 800423a:	893a      	ldrh	r2, [r7, #8]
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4603      	mov	r3, r0
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f913 	bl	8004474 <I2C_RequestMemoryRead>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0ad      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	@ 0xff
 8004268:	d90e      	bls.n	8004288 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	4b52      	ldr	r3, [pc, #328]	@ (80043c4 <HAL_I2C_Mem_Read+0x22c>)
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fb33 	bl	80048ec <I2C_TransferConfig>
 8004286:	e00f      	b.n	80042a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_I2C_Mem_Read+0x22c>)
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fb22 	bl	80048ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	2200      	movs	r2, #0
 80042b0:	2104      	movs	r1, #4
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f956 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07c      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d034      	beq.n	8004368 <HAL_I2C_Mem_Read+0x1d0>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d130      	bne.n	8004368 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	@ 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f927 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e04d      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2bff      	cmp	r3, #255	@ 0xff
 8004328:	d90e      	bls.n	8004348 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	b2da      	uxtb	r2, r3
 8004336:	8979      	ldrh	r1, [r7, #10]
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fad3 	bl	80048ec <I2C_TransferConfig>
 8004346:	e00f      	b.n	8004368 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	b2da      	uxtb	r2, r3
 8004358:	8979      	ldrh	r1, [r7, #10]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fac2 	bl	80048ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d19a      	bne.n	80042a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f994 	bl	80046a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e01a      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2220      	movs	r2, #32
 800438c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_I2C_Mem_Read+0x230>)
 800439a:	400b      	ands	r3, r1
 800439c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	80002400 	.word	0x80002400
 80043c8:	fe00e800 	.word	0xfe00e800

080043cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	4603      	mov	r3, r0
 80043dc:	817b      	strh	r3, [r7, #10]
 80043de:	460b      	mov	r3, r1
 80043e0:	813b      	strh	r3, [r7, #8]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	8979      	ldrh	r1, [r7, #10]
 80043ec:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <I2C_RequestMemoryWrite+0xa4>)
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fa79 	bl	80048ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f909 	bl	8004616 <I2C_WaitOnTXISFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e02c      	b.n	8004468 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	629a      	str	r2, [r3, #40]	@ 0x28
 800441e:	e015      	b.n	800444c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004420:	893b      	ldrh	r3, [r7, #8]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8ef 	bl	8004616 <I2C_WaitOnTXISFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e012      	b.n	8004468 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004442:	893b      	ldrh	r3, [r7, #8]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2200      	movs	r2, #0
 8004454:	2180      	movs	r1, #128	@ 0x80
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f884 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	80002000 	.word	0x80002000

08004474 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	8979      	ldrh	r1, [r7, #10]
 8004494:	4b20      	ldr	r3, [pc, #128]	@ (8004518 <I2C_RequestMemoryRead+0xa4>)
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2300      	movs	r3, #0
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fa26 	bl	80048ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f8b6 	bl	8004616 <I2C_WaitOnTXISFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e02c      	b.n	800450e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ba:	893b      	ldrh	r3, [r7, #8]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044c4:	e015      	b.n	80044f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044c6:	893b      	ldrh	r3, [r7, #8]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	69b9      	ldr	r1, [r7, #24]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f89c 	bl	8004616 <I2C_WaitOnTXISFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e012      	b.n	800450e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2140      	movs	r1, #64	@ 0x40
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f831 	bl	8004564 <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	80002000 	.word	0x80002000

0800451c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d103      	bne.n	800453a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d007      	beq.n	8004558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	619a      	str	r2, [r3, #24]
  }
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004574:	e03b      	b.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8d6 	bl	800472c <I2C_IsErrorOccurred>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e041      	b.n	800460e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004590:	d02d      	beq.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fe ff89 	bl	80034a8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d122      	bne.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d113      	bne.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e00f      	b.n	800460e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699a      	ldr	r2, [r3, #24]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	429a      	cmp	r2, r3
 800460a:	d0b4      	beq.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004622:	e033      	b.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f87f 	bl	800472c <I2C_IsErrorOccurred>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e031      	b.n	800469c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800463e:	d025      	beq.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004640:	f7fe ff32 	bl	80034a8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11a      	bne.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d013      	beq.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d1c4      	bne.n	8004624 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b0:	e02f      	b.n	8004712 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f838 	bl	800472c <I2C_IsErrorOccurred>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e02d      	b.n	8004722 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fe feef 	bl	80034a8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d302      	bcc.n	80046dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11a      	bne.n	8004712 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d013      	beq.n	8004712 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e007      	b.n	8004722 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d1c8      	bne.n	80046b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	@ 0x28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d068      	beq.n	800482a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2210      	movs	r2, #16
 800475e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004760:	e049      	b.n	80047f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004768:	d045      	beq.n	80047f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fe fe9d 	bl	80034a8 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_IsErrorOccurred+0x54>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d13a      	bne.n	80047f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004792:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a2:	d121      	bne.n	80047e8 <I2C_IsErrorOccurred+0xbc>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047aa:	d01d      	beq.n	80047e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d01a      	beq.n	80047e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047c2:	f7fe fe71 	bl	80034a8 <HAL_GetTick>
 80047c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c8:	e00e      	b.n	80047e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047ca:	f7fe fe6d 	bl	80034a8 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b19      	cmp	r3, #25
 80047d6:	d907      	bls.n	80047e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f043 0320 	orr.w	r3, r3, #32
 80047de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047e6:	e006      	b.n	80047f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d1e9      	bne.n	80047ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d003      	beq.n	800480c <I2C_IsErrorOccurred+0xe0>
 8004804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0aa      	beq.n	8004762 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800480c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2220      	movs	r2, #32
 800481a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f043 0304 	orr.w	r3, r3, #4
 8004822:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800484c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f043 0308 	orr.w	r3, r3, #8
 8004864:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800486e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	f043 0302 	orr.w	r3, r3, #2
 8004886:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004890:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01c      	beq.n	80048da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff fe3b 	bl	800451c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <I2C_IsErrorOccurred+0x1bc>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3728      	adds	r7, #40	@ 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	fe00e800 	.word	0xfe00e800

080048ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	817b      	strh	r3, [r7, #10]
 80048fa:	4613      	mov	r3, r2
 80048fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004904:	7a7b      	ldrb	r3, [r7, #9]
 8004906:	041b      	lsls	r3, r3, #16
 8004908:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800490c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	4313      	orrs	r3, r2
 8004916:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800491a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	0d5b      	lsrs	r3, r3, #21
 8004926:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <I2C_TransferConfig+0x60>)
 800492c:	430b      	orrs	r3, r1
 800492e:	43db      	mvns	r3, r3
 8004930:	ea02 0103 	and.w	r1, r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	03ff63ff 	.word	0x03ff63ff

08004950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b20      	cmp	r3, #32
 8004964:	d138      	bne.n	80049d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004970:	2302      	movs	r3, #2
 8004972:	e032      	b.n	80049da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	@ 0x24
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d139      	bne.n	8004a70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e033      	b.n	8004a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2224      	movs	r2, #36	@ 0x24
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aaa:	d130      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aac:	4b23      	ldr	r3, [pc, #140]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d038      	beq.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2232      	movs	r2, #50	@ 0x32
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	0c9b      	lsrs	r3, r3, #18
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae0:	e002      	b.n	8004ae8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae8:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af4:	d102      	bne.n	8004afc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f2      	bne.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004afc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b08:	d110      	bne.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e00f      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1a:	d007      	beq.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b1c:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b24:	4a05      	ldr	r2, [pc, #20]	@ (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	20000018 	.word	0x20000018
 8004b44:	431bde83 	.word	0x431bde83

08004b48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e3ca      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b97      	ldr	r3, [pc, #604]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b64:	4b94      	ldr	r3, [pc, #592]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80e4 	beq.w	8004d44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <HAL_RCC_OscConfig+0x4a>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b0c      	cmp	r3, #12
 8004b86:	f040 808b 	bne.w	8004ca0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 8087 	bne.w	8004ca0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b92:	4b89      	ldr	r3, [pc, #548]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_RCC_OscConfig+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e3a2      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1a      	ldr	r2, [r3, #32]
 8004bae:	4b82      	ldr	r3, [pc, #520]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x7c>
 8004bba:	4b7f      	ldr	r3, [pc, #508]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCC_OscConfig+0x88>
 8004bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d223      	bcs.n	8004c1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd55 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e383      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be8:	4b73      	ldr	r3, [pc, #460]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a72      	ldr	r2, [pc, #456]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bee:	f043 0308 	orr.w	r3, r3, #8
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b70      	ldr	r3, [pc, #448]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	496d      	ldr	r1, [pc, #436]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c06:	4b6c      	ldr	r3, [pc, #432]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	4968      	ldr	r1, [pc, #416]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
 8004c1a:	e025      	b.n	8004c68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c1c:	4b66      	ldr	r3, [pc, #408]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a65      	ldr	r2, [pc, #404]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c22:	f043 0308 	orr.w	r3, r3, #8
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b63      	ldr	r3, [pc, #396]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	4960      	ldr	r1, [pc, #384]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	495b      	ldr	r1, [pc, #364]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fd15 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e343      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c68:	f000 fc4a 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b52      	ldr	r3, [pc, #328]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	4950      	ldr	r1, [pc, #320]	@ (8004dbc <HAL_RCC_OscConfig+0x274>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
 8004c84:	4a4e      	ldr	r2, [pc, #312]	@ (8004dc0 <HAL_RCC_OscConfig+0x278>)
 8004c86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c88:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fbbb 	bl	8003408 <HAL_InitTick>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d052      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	e327      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d032      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ca8:	4b43      	ldr	r3, [pc, #268]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a42      	ldr	r2, [pc, #264]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cb4:	f7fe fbf8 	bl	80034a8 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cbc:	f7fe fbf4 	bl	80034a8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e310      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cce:	4b3a      	ldr	r3, [pc, #232]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cda:	4b37      	ldr	r3, [pc, #220]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a36      	ldr	r2, [pc, #216]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	f043 0308 	orr.w	r3, r3, #8
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b34      	ldr	r3, [pc, #208]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4931      	ldr	r1, [pc, #196]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	492c      	ldr	r1, [pc, #176]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	e01a      	b.n	8004d44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a29      	ldr	r2, [pc, #164]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d1a:	f7fe fbc5 	bl	80034a8 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d22:	f7fe fbc1 	bl	80034a8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e2dd      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d34:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x1da>
 8004d40:	e000      	b.n	8004d44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d074      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d005      	beq.n	8004d62 <HAL_RCC_OscConfig+0x21a>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d10e      	bne.n	8004d7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d10b      	bne.n	8004d7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d064      	beq.n	8004e38 <HAL_RCC_OscConfig+0x2f0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d160      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e2ba      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d82:	d106      	bne.n	8004d92 <HAL_RCC_OscConfig+0x24a>
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a0b      	ldr	r2, [pc, #44]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e026      	b.n	8004de0 <HAL_RCC_OscConfig+0x298>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d9a:	d115      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x280>
 8004d9c:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a05      	ldr	r2, [pc, #20]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004da2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a02      	ldr	r2, [pc, #8]	@ (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e014      	b.n	8004de0 <HAL_RCC_OscConfig+0x298>
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800df7c 	.word	0x0800df7c
 8004dc0:	20000018 	.word	0x20000018
 8004dc4:	200000f0 	.word	0x200000f0
 8004dc8:	4ba0      	ldr	r3, [pc, #640]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a9f      	ldr	r2, [pc, #636]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a9c      	ldr	r2, [pc, #624]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fb5e 	bl	80034a8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fe fb5a 	bl	80034a8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e276      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e02:	4b92      	ldr	r3, [pc, #584]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x2a8>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fe fb4a 	bl	80034a8 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e18:	f7fe fb46 	bl	80034a8 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	@ 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e262      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2a:	4b88      	ldr	r3, [pc, #544]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x2d0>
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d060      	beq.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_OscConfig+0x310>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d119      	bne.n	8004e86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d116      	bne.n	8004e86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e58:	4b7c      	ldr	r3, [pc, #496]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_OscConfig+0x328>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e23f      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e70:	4b76      	ldr	r3, [pc, #472]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	4973      	ldr	r1, [pc, #460]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	e040      	b.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d023      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6e      	ldr	r2, [pc, #440]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fe fb05 	bl	80034a8 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7fe fb01 	bl	80034a8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e21d      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb4:	4b65      	ldr	r3, [pc, #404]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec0:	4b62      	ldr	r3, [pc, #392]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	495f      	ldr	r1, [pc, #380]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
 8004ed4:	e018      	b.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5c      	ldr	r2, [pc, #368]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fe fae1 	bl	80034a8 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eea:	f7fe fadd 	bl	80034a8 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e1f9      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004efc:	4b53      	ldr	r3, [pc, #332]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f22:	4a4a      	ldr	r2, [pc, #296]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fe fabc 	bl	80034a8 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f34:	f7fe fab8 	bl	80034a8 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1d4      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f46:	4b41      	ldr	r3, [pc, #260]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ef      	beq.n	8004f34 <HAL_RCC_OscConfig+0x3ec>
 8004f54:	e01b      	b.n	8004f8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f56:	4b3d      	ldr	r3, [pc, #244]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fe fa9f 	bl	80034a8 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fe fa9b 	bl	80034a8 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1b7      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f80:	4b32      	ldr	r3, [pc, #200]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ef      	bne.n	8004f6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a6 	beq.w	80050e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10d      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b27      	ldr	r3, [pc, #156]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	4a26      	ldr	r2, [pc, #152]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb8:	4b24      	ldr	r3, [pc, #144]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc8:	4b21      	ldr	r3, [pc, #132]	@ (8005050 <HAL_RCC_OscConfig+0x508>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d118      	bne.n	8005006 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <HAL_RCC_OscConfig+0x508>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <HAL_RCC_OscConfig+0x508>)
 8004fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe0:	f7fe fa62 	bl	80034a8 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7fe fa5e 	bl	80034a8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e17a      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_RCC_OscConfig+0x508>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d108      	bne.n	8005020 <HAL_RCC_OscConfig+0x4d8>
 800500e:	4b0f      	ldr	r3, [pc, #60]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005014:	4a0d      	ldr	r2, [pc, #52]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800501e:	e029      	b.n	8005074 <HAL_RCC_OscConfig+0x52c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b05      	cmp	r3, #5
 8005026:	d115      	bne.n	8005054 <HAL_RCC_OscConfig+0x50c>
 8005028:	4b08      	ldr	r3, [pc, #32]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502e:	4a07      	ldr	r2, [pc, #28]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005038:	4b04      	ldr	r3, [pc, #16]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	4a03      	ldr	r2, [pc, #12]	@ (800504c <HAL_RCC_OscConfig+0x504>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005048:	e014      	b.n	8005074 <HAL_RCC_OscConfig+0x52c>
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	40007000 	.word	0x40007000
 8005054:	4b9c      	ldr	r3, [pc, #624]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	4a9b      	ldr	r2, [pc, #620]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005064:	4b98      	ldr	r3, [pc, #608]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	4a97      	ldr	r2, [pc, #604]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d016      	beq.n	80050aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fe fa14 	bl	80034a8 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	e00a      	b.n	800509a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7fe fa10 	bl	80034a8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e12a      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	4b8b      	ldr	r3, [pc, #556]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ed      	beq.n	8005084 <HAL_RCC_OscConfig+0x53c>
 80050a8:	e015      	b.n	80050d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7fe f9fd 	bl	80034a8 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fe f9f9 	bl	80034a8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e113      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c8:	4b7f      	ldr	r3, [pc, #508]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1ed      	bne.n	80050b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d6:	7ffb      	ldrb	r3, [r7, #31]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d105      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050dc:	4b7a      	ldr	r3, [pc, #488]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	4a79      	ldr	r2, [pc, #484]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80fe 	beq.w	80052ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	f040 80d0 	bne.w	800529c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050fc:	4b72      	ldr	r3, [pc, #456]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0203 	and.w	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	429a      	cmp	r2, r3
 800510e:	d130      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	3b01      	subs	r3, #1
 800511c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d127      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11f      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800513c:	2a07      	cmp	r2, #7
 800513e:	bf14      	ite	ne
 8005140:	2201      	movne	r2, #1
 8005142:	2200      	moveq	r2, #0
 8005144:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005146:	4293      	cmp	r3, r2
 8005148:	d113      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d109      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d06e      	beq.n	8005250 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d069      	beq.n	800524c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005178:	4b53      	ldr	r3, [pc, #332]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005184:	4b50      	ldr	r3, [pc, #320]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0ad      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005194:	4b4c      	ldr	r3, [pc, #304]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4b      	ldr	r2, [pc, #300]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800519a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800519e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a0:	f7fe f982 	bl	80034a8 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fe f97e 	bl	80034a8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e09a      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ba:	4b43      	ldr	r3, [pc, #268]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c6:	4b40      	ldr	r3, [pc, #256]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4b40      	ldr	r3, [pc, #256]	@ (80052cc <HAL_RCC_OscConfig+0x784>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051d6:	3a01      	subs	r2, #1
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051e0:	0212      	lsls	r2, r2, #8
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051e8:	0852      	lsrs	r2, r2, #1
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0552      	lsls	r2, r2, #21
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80051f4:	0852      	lsrs	r2, r2, #1
 80051f6:	3a01      	subs	r2, #1
 80051f8:	0652      	lsls	r2, r2, #25
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005200:	0912      	lsrs	r2, r2, #4
 8005202:	0452      	lsls	r2, r2, #17
 8005204:	430a      	orrs	r2, r1
 8005206:	4930      	ldr	r1, [pc, #192]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005208:	4313      	orrs	r3, r2
 800520a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800520c:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2d      	ldr	r2, [pc, #180]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005216:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005218:	4b2b      	ldr	r3, [pc, #172]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a2a      	ldr	r2, [pc, #168]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800521e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005224:	f7fe f940 	bl	80034a8 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522c:	f7fe f93c 	bl	80034a8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e058      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523e:	4b22      	ldr	r3, [pc, #136]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800524a:	e050      	b.n	80052ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e04f      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d148      	bne.n	80052ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800525c:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a19      	ldr	r2, [pc, #100]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005268:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a16      	ldr	r2, [pc, #88]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 800526e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005274:	f7fe f918 	bl	80034a8 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fe f914 	bl	80034a8 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e030      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528e:	4b0e      	ldr	r3, [pc, #56]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x734>
 800529a:	e028      	b.n	80052ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d023      	beq.n	80052ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <HAL_RCC_OscConfig+0x780>)
 80052a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fe f8fb 	bl	80034a8 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b4:	e00c      	b.n	80052d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b6:	f7fe f8f7 	bl	80034a8 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d905      	bls.n	80052d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e013      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
 80052c8:	40021000 	.word	0x40021000
 80052cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d0:	4b09      	ldr	r3, [pc, #36]	@ (80052f8 <HAL_RCC_OscConfig+0x7b0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ec      	bne.n	80052b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_RCC_OscConfig+0x7b0>)
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	4905      	ldr	r1, [pc, #20]	@ (80052f8 <HAL_RCC_OscConfig+0x7b0>)
 80052e2:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <HAL_RCC_OscConfig+0x7b4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
 80052e8:	e001      	b.n	80052ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	feeefffc 	.word	0xfeeefffc

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0e7      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b75      	ldr	r3, [pc, #468]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d910      	bls.n	8005344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b72      	ldr	r3, [pc, #456]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 0207 	bic.w	r2, r3, #7
 800532a:	4970      	ldr	r1, [pc, #448]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b6e      	ldr	r3, [pc, #440]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0cf      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	4b66      	ldr	r3, [pc, #408]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535c:	429a      	cmp	r2, r3
 800535e:	d908      	bls.n	8005372 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005360:	4b63      	ldr	r3, [pc, #396]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4960      	ldr	r1, [pc, #384]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d04c      	beq.n	8005418 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005386:	4b5a      	ldr	r3, [pc, #360]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d121      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0a6      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539e:	4b54      	ldr	r3, [pc, #336]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d115      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e09a      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053b6:	4b4e      	ldr	r3, [pc, #312]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e08e      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c6:	4b4a      	ldr	r3, [pc, #296]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e086      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b46      	ldr	r3, [pc, #280]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4943      	ldr	r1, [pc, #268]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7fe f85e 	bl	80034a8 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fe f85a 	bl	80034a8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e06e      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b3a      	ldr	r3, [pc, #232]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b31      	ldr	r3, [pc, #196]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005430:	429a      	cmp	r2, r3
 8005432:	d208      	bcs.n	8005446 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005434:	4b2e      	ldr	r3, [pc, #184]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	492b      	ldr	r1, [pc, #172]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005446:	4b29      	ldr	r3, [pc, #164]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d210      	bcs.n	8005476 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005454:	4b25      	ldr	r3, [pc, #148]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 0207 	bic.w	r2, r3, #7
 800545c:	4923      	ldr	r1, [pc, #140]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005464:	4b21      	ldr	r3, [pc, #132]	@ (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d001      	beq.n	8005476 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e036      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005482:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4918      	ldr	r1, [pc, #96]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4910      	ldr	r1, [pc, #64]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b4:	f000 f824 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	490b      	ldr	r1, [pc, #44]	@ (80054f4 <HAL_RCC_ClockConfig+0x1f4>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <HAL_RCC_ClockConfig+0x1f8>)
 80054d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054d4:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <HAL_RCC_ClockConfig+0x1fc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fd ff95 	bl	8003408 <HAL_InitTick>
 80054de:	4603      	mov	r3, r0
 80054e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80054e2:	7afb      	ldrb	r3, [r7, #11]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40022000 	.word	0x40022000
 80054f0:	40021000 	.word	0x40021000
 80054f4:	0800df7c 	.word	0x0800df7c
 80054f8:	20000018 	.word	0x20000018
 80054fc:	200000f0 	.word	0x200000f0

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	@ 0x24
 8005504:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550e:	4b3e      	ldr	r3, [pc, #248]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005518:	4b3b      	ldr	r3, [pc, #236]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x34>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d121      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d11e      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005534:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005540:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e005      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005550:	4b2d      	ldr	r3, [pc, #180]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800555c:	4a2b      	ldr	r2, [pc, #172]	@ (800560c <HAL_RCC_GetSysClockFreq+0x10c>)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005570:	e00a      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d102      	bne.n	800557e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005578:	4b25      	ldr	r3, [pc, #148]	@ (8005610 <HAL_RCC_GetSysClockFreq+0x110>)
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e004      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d101      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005584:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <HAL_RCC_GetSysClockFreq+0x114>)
 8005586:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d134      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800558e:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d003      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0xac>
 80055a4:	e005      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <HAL_RCC_GetSysClockFreq+0x110>)
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	e005      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055ac:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ae:	617b      	str	r3, [r7, #20]
      break;
 80055b0:	e002      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	617b      	str	r3, [r7, #20]
      break;
 80055b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b8:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	3301      	adds	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055c6:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	fb03 f202 	mul.w	r2, r3, r2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055de:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	0e5b      	lsrs	r3, r3, #25
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	3301      	adds	r3, #1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055f8:	69bb      	ldr	r3, [r7, #24]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3724      	adds	r7, #36	@ 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	0800df94 	.word	0x0800df94
 8005610:	00f42400 	.word	0x00f42400
 8005614:	007a1200 	.word	0x007a1200

08005618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800561c:	4b03      	ldr	r3, [pc, #12]	@ (800562c <HAL_RCC_GetHCLKFreq+0x14>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000018 	.word	0x20000018

08005630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005634:	f7ff fff0 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4904      	ldr	r1, [pc, #16]	@ (8005658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	0800df8c 	.word	0x0800df8c

0800565c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005660:	f7ff ffda 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0adb      	lsrs	r3, r3, #11
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4904      	ldr	r1, [pc, #16]	@ (8005684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000
 8005684:	0800df8c 	.word	0x0800df8c

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005694:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056a0:	f7ff f9ee 	bl	8004a80 <HAL_PWREx_GetVoltageRange>
 80056a4:	6178      	str	r0, [r7, #20]
 80056a6:	e014      	b.n	80056d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	4a24      	ldr	r2, [pc, #144]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b4:	4b22      	ldr	r3, [pc, #136]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056c0:	f7ff f9de 	bl	8004a80 <HAL_PWREx_GetVoltageRange>
 80056c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d8:	d10b      	bne.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b80      	cmp	r3, #128	@ 0x80
 80056de:	d919      	bls.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80056e4:	d902      	bls.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e6:	2302      	movs	r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e013      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056ec:	2301      	movs	r3, #1
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e010      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	@ 0x80
 80056f6:	d902      	bls.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056f8:	2303      	movs	r3, #3
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e00a      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b80      	cmp	r3, #128	@ 0x80
 8005702:	d102      	bne.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005704:	2302      	movs	r3, #2
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e004      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b70      	cmp	r3, #112	@ 0x70
 800570e:	d101      	bne.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005710:	2301      	movs	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 0207 	bic.w	r2, r3, #7
 800571c:	4909      	ldr	r1, [pc, #36]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005724:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	40022000 	.word	0x40022000

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005750:	2300      	movs	r3, #0
 8005752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005754:	2300      	movs	r3, #0
 8005756:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d041      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005768:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800576c:	d02a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800576e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005772:	d824      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005778:	d008      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800577a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800577e:	d81e      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005788:	d010      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800578a:	e018      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800578c:	4b86      	ldr	r3, [pc, #536]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a85      	ldr	r2, [pc, #532]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005796:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005798:	e015      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3304      	adds	r3, #4
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 facb 	bl	8005d3c <RCCEx_PLLSAI1_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057aa:	e00c      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3320      	adds	r3, #32
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fbb6 	bl	8005f24 <RCCEx_PLLSAI2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	74fb      	strb	r3, [r7, #19]
      break;
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057cc:	4b76      	ldr	r3, [pc, #472]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057da:	4973      	ldr	r1, [pc, #460]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057e2:	e001      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d041      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057fc:	d02a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005802:	d824      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005808:	d008      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800580a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800580e:	d81e      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005818:	d010      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800581a:	e018      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800581c:	4b62      	ldr	r3, [pc, #392]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a61      	ldr	r2, [pc, #388]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005826:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005828:	e015      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fa83 	bl	8005d3c <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800583a:	e00c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3320      	adds	r3, #32
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb6e 	bl	8005f24 <RCCEx_PLLSAI2_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	74fb      	strb	r3, [r7, #19]
      break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800585c:	4b52      	ldr	r3, [pc, #328]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800586a:	494f      	ldr	r1, [pc, #316]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005872:	e001      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a0 	beq.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800588a:	4b47      	ldr	r3, [pc, #284]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	4a40      	ldr	r2, [pc, #256]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ac:	4b3e      	ldr	r3, [pc, #248]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b8:	2301      	movs	r3, #1
 80058ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058bc:	4b3b      	ldr	r3, [pc, #236]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3a      	ldr	r2, [pc, #232]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c8:	f7fd fdee 	bl	80034a8 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d0:	f7fd fdea 	bl	80034a8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	74fb      	strb	r3, [r7, #19]
        break;
 80058e2:	e005      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058e4:	4b31      	ldr	r3, [pc, #196]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d15c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058f6:	4b2c      	ldr	r3, [pc, #176]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005900:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01f      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	429a      	cmp	r2, r3
 8005912:	d019      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005914:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005920:	4b21      	ldr	r3, [pc, #132]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005926:	4a20      	ldr	r2, [pc, #128]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005930:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005940:	4a19      	ldr	r2, [pc, #100]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fd fda9 	bl	80034a8 <HAL_GetTick>
 8005956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005958:	e00b      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fd fda5 	bl	80034a8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d902      	bls.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	74fb      	strb	r3, [r7, #19]
            break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ec      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005986:	4b08      	ldr	r3, [pc, #32]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005996:	4904      	ldr	r1, [pc, #16]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800599e:	e009      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	74bb      	strb	r3, [r7, #18]
 80059a4:	e006      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059a6:	bf00      	nop
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7cfb      	ldrb	r3, [r7, #19]
 80059b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b4:	7c7b      	ldrb	r3, [r7, #17]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d105      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ba:	4b9e      	ldr	r3, [pc, #632]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	4a9d      	ldr	r2, [pc, #628]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059d2:	4b98      	ldr	r3, [pc, #608]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d8:	f023 0203 	bic.w	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	4994      	ldr	r1, [pc, #592]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fa:	f023 020c 	bic.w	r2, r3, #12
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	498c      	ldr	r1, [pc, #560]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a16:	4b87      	ldr	r3, [pc, #540]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	4983      	ldr	r1, [pc, #524]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a38:	4b7e      	ldr	r3, [pc, #504]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a46:	497b      	ldr	r1, [pc, #492]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a5a:	4b76      	ldr	r3, [pc, #472]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a68:	4972      	ldr	r1, [pc, #456]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8a:	496a      	ldr	r1, [pc, #424]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a9e:	4b65      	ldr	r3, [pc, #404]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	4961      	ldr	r1, [pc, #388]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ace:	4959      	ldr	r1, [pc, #356]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae2:	4b54      	ldr	r3, [pc, #336]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af0:	4950      	ldr	r1, [pc, #320]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b04:	4b4b      	ldr	r3, [pc, #300]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	4948      	ldr	r1, [pc, #288]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b26:	4b43      	ldr	r3, [pc, #268]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	493f      	ldr	r1, [pc, #252]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d028      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b48:	4b3a      	ldr	r3, [pc, #232]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b56:	4937      	ldr	r1, [pc, #220]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b66:	d106      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b68:	4b32      	ldr	r3, [pc, #200]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b72:	60d3      	str	r3, [r2, #12]
 8005b74:	e011      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f8d8 	bl	8005d3c <RCCEx_PLLSAI1_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d028      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ba6:	4b23      	ldr	r3, [pc, #140]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb4:	491f      	ldr	r1, [pc, #124]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bc4:	d106      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bd0:	60d3      	str	r3, [r2, #12]
 8005bd2:	e011      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f8a9 	bl	8005d3c <RCCEx_PLLSAI1_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02b      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c04:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c12:	4908      	ldr	r1, [pc, #32]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c22:	d109      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c24:	4b03      	ldr	r3, [pc, #12]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a02      	ldr	r2, [pc, #8]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c2e:	60d3      	str	r3, [r2, #12]
 8005c30:	e014      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f877 	bl	8005d3c <RCCEx_PLLSAI1_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c68:	4b2b      	ldr	r3, [pc, #172]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c76:	4928      	ldr	r1, [pc, #160]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c86:	d10d      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f854 	bl	8005d3c <RCCEx_PLLSAI1_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	74bb      	strb	r3, [r7, #18]
 8005ca2:	e011      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3320      	adds	r3, #32
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f935 	bl	8005f24 <RCCEx_PLLSAI2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cd4:	4b10      	ldr	r3, [pc, #64]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ce2:	490d      	ldr	r1, [pc, #52]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cf6:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d06:	4904      	ldr	r1, [pc, #16]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000

08005d1c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005d20:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a04      	ldr	r2, [pc, #16]	@ (8005d38 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d26:	f043 0304 	orr.w	r3, r3, #4
 8005d2a:	6013      	str	r3, [r2, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000

08005d3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d4a:	4b75      	ldr	r3, [pc, #468]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d018      	beq.n	8005d88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d56:	4b72      	ldr	r3, [pc, #456]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0203 	and.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d10d      	bne.n	8005d82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
       ||
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d6e:	4b6c      	ldr	r3, [pc, #432]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d047      	beq.n	8005e12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	e044      	b.n	8005e12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d018      	beq.n	8005dc2 <RCCEx_PLLSAI1_Config+0x86>
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d825      	bhi.n	8005de0 <RCCEx_PLLSAI1_Config+0xa4>
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d002      	beq.n	8005d9e <RCCEx_PLLSAI1_Config+0x62>
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d009      	beq.n	8005db0 <RCCEx_PLLSAI1_Config+0x74>
 8005d9c:	e020      	b.n	8005de0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d9e:	4b60      	ldr	r3, [pc, #384]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11d      	bne.n	8005de6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dae:	e01a      	b.n	8005de6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005db0:	4b5b      	ldr	r3, [pc, #364]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d116      	bne.n	8005dea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dc0:	e013      	b.n	8005dea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dc2:	4b57      	ldr	r3, [pc, #348]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10f      	bne.n	8005dee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dce:	4b54      	ldr	r3, [pc, #336]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dde:	e006      	b.n	8005dee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	e004      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005de6:	bf00      	nop
 8005de8:	e002      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10d      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005df6:	4b4a      	ldr	r3, [pc, #296]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	4944      	ldr	r1, [pc, #272]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d17d      	bne.n	8005f14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e18:	4b41      	ldr	r3, [pc, #260]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a40      	ldr	r2, [pc, #256]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e24:	f7fd fb40 	bl	80034a8 <HAL_GetTick>
 8005e28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e2a:	e009      	b.n	8005e40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e2c:	f7fd fb3c 	bl	80034a8 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d902      	bls.n	8005e40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e3e:	e005      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e40:	4b37      	ldr	r3, [pc, #220]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1ef      	bne.n	8005e2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d160      	bne.n	8005f14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d111      	bne.n	8005e7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e58:	4b31      	ldr	r3, [pc, #196]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6892      	ldr	r2, [r2, #8]
 8005e68:	0211      	lsls	r1, r2, #8
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68d2      	ldr	r2, [r2, #12]
 8005e6e:	0912      	lsrs	r2, r2, #4
 8005e70:	0452      	lsls	r2, r2, #17
 8005e72:	430a      	orrs	r2, r1
 8005e74:	492a      	ldr	r1, [pc, #168]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	610b      	str	r3, [r1, #16]
 8005e7a:	e027      	b.n	8005ecc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d112      	bne.n	8005ea8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e82:	4b27      	ldr	r3, [pc, #156]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6892      	ldr	r2, [r2, #8]
 8005e92:	0211      	lsls	r1, r2, #8
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6912      	ldr	r2, [r2, #16]
 8005e98:	0852      	lsrs	r2, r2, #1
 8005e9a:	3a01      	subs	r2, #1
 8005e9c:	0552      	lsls	r2, r2, #21
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	491f      	ldr	r1, [pc, #124]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	610b      	str	r3, [r1, #16]
 8005ea6:	e011      	b.n	8005ecc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005eb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	0211      	lsls	r1, r2, #8
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6952      	ldr	r2, [r2, #20]
 8005ebe:	0852      	lsrs	r2, r2, #1
 8005ec0:	3a01      	subs	r2, #1
 8005ec2:	0652      	lsls	r2, r2, #25
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	4916      	ldr	r1, [pc, #88]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ecc:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fd fae6 	bl	80034a8 <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ede:	e009      	b.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee0:	f7fd fae2 	bl	80034a8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d902      	bls.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ef2:	e005      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ef      	beq.n	8005ee0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f06:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	4904      	ldr	r1, [pc, #16]	@ (8005f20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000

08005f24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f32:	4b6a      	ldr	r3, [pc, #424]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d018      	beq.n	8005f70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f3e:	4b67      	ldr	r3, [pc, #412]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d10d      	bne.n	8005f6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
       ||
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f56:	4b61      	ldr	r3, [pc, #388]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
       ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d047      	beq.n	8005ffa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
 8005f6e:	e044      	b.n	8005ffa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d018      	beq.n	8005faa <RCCEx_PLLSAI2_Config+0x86>
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d825      	bhi.n	8005fc8 <RCCEx_PLLSAI2_Config+0xa4>
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d002      	beq.n	8005f86 <RCCEx_PLLSAI2_Config+0x62>
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d009      	beq.n	8005f98 <RCCEx_PLLSAI2_Config+0x74>
 8005f84:	e020      	b.n	8005fc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f86:	4b55      	ldr	r3, [pc, #340]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11d      	bne.n	8005fce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f96:	e01a      	b.n	8005fce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f98:	4b50      	ldr	r3, [pc, #320]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d116      	bne.n	8005fd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa8:	e013      	b.n	8005fd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005faa:	4b4c      	ldr	r3, [pc, #304]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fb6:	4b49      	ldr	r3, [pc, #292]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fc6:	e006      	b.n	8005fd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
      break;
 8005fcc:	e004      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e002      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fd2:	bf00      	nop
 8005fd4:	e000      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10d      	bne.n	8005ffa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fde:	4b3f      	ldr	r3, [pc, #252]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6819      	ldr	r1, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	4939      	ldr	r1, [pc, #228]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d167      	bne.n	80060d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006000:	4b36      	ldr	r3, [pc, #216]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a35      	ldr	r2, [pc, #212]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800600a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600c:	f7fd fa4c 	bl	80034a8 <HAL_GetTick>
 8006010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006012:	e009      	b.n	8006028 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006014:	f7fd fa48 	bl	80034a8 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d902      	bls.n	8006028 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	73fb      	strb	r3, [r7, #15]
        break;
 8006026:	e005      	b.n	8006034 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006028:	4b2c      	ldr	r3, [pc, #176]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ef      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d14a      	bne.n	80060d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d111      	bne.n	8006064 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006040:	4b26      	ldr	r3, [pc, #152]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6892      	ldr	r2, [r2, #8]
 8006050:	0211      	lsls	r1, r2, #8
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68d2      	ldr	r2, [r2, #12]
 8006056:	0912      	lsrs	r2, r2, #4
 8006058:	0452      	lsls	r2, r2, #17
 800605a:	430a      	orrs	r2, r1
 800605c:	491f      	ldr	r1, [pc, #124]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800605e:	4313      	orrs	r3, r2
 8006060:	614b      	str	r3, [r1, #20]
 8006062:	e011      	b.n	8006088 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006064:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800606c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	0211      	lsls	r1, r2, #8
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6912      	ldr	r2, [r2, #16]
 800607a:	0852      	lsrs	r2, r2, #1
 800607c:	3a01      	subs	r2, #1
 800607e:	0652      	lsls	r2, r2, #25
 8006080:	430a      	orrs	r2, r1
 8006082:	4916      	ldr	r1, [pc, #88]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006084:	4313      	orrs	r3, r2
 8006086:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006088:	4b14      	ldr	r3, [pc, #80]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006092:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fd fa08 	bl	80034a8 <HAL_GetTick>
 8006098:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800609a:	e009      	b.n	80060b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800609c:	f7fd fa04 	bl	80034a8 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d902      	bls.n	80060b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	73fb      	strb	r3, [r7, #15]
          break;
 80060ae:	e005      	b.n	80060bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0ef      	beq.n	800609c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060c2:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c4:	695a      	ldr	r2, [r3, #20]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	4904      	ldr	r1, [pc, #16]	@ (80060dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40021000 	.word	0x40021000

080060e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e095      	b.n	800621e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d108      	bne.n	800610c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006102:	d009      	beq.n	8006118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
 800610a:	e005      	b.n	8006118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fb fbca 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800614e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006158:	d902      	bls.n	8006160 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e002      	b.n	8006166 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006164:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800616e:	d007      	beq.n	8006180 <HAL_SPI_Init+0xa0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006178:	d002      	beq.n	8006180 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	ea42 0103 	orr.w	r1, r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	0c1b      	lsrs	r3, r3, #16
 80061dc:	f003 0204 	and.w	r2, r3, #4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e01a      	b.n	800626e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800624e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fb fb87 	bl	8001964 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b088      	sub	sp, #32
 800627a:	af02      	add	r7, sp, #8
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	d001      	beq.n	8006296 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
 8006294:	e123      	b.n	80064de <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800629e:	d112      	bne.n	80062c6 <HAL_SPI_Receive+0x50>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10e      	bne.n	80062c6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2204      	movs	r2, #4
 80062ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f912 	bl	80064e6 <HAL_SPI_TransmitReceive>
 80062c2:	4603      	mov	r3, r0
 80062c4:	e10b      	b.n	80064de <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c6:	f7fd f8ef 	bl	80034a8 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_Receive+0x62>
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e100      	b.n	80064de <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_SPI_Receive+0x74>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e0f9      	b.n	80064de <HAL_SPI_Receive+0x268>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	88fa      	ldrh	r2, [r7, #6]
 800630a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	88fa      	ldrh	r2, [r7, #6]
 8006312:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800633c:	d908      	bls.n	8006350 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	e007      	b.n	8006360 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800635e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006368:	d10f      	bne.n	800638a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	d007      	beq.n	80063a8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063b0:	d875      	bhi.n	800649e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063b2:	e037      	b.n	8006424 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d117      	bne.n	80063f2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f103 020c 	add.w	r2, r3, #12
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80063f0:	e018      	b.n	8006424 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f2:	f7fd f859 	bl	80034a8 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d803      	bhi.n	800640a <HAL_SPI_Receive+0x194>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Receive+0x19a>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e05c      	b.n	80064de <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1c1      	bne.n	80063b4 <HAL_SPI_Receive+0x13e>
 8006430:	e03b      	b.n	80064aa <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d115      	bne.n	800646c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	b292      	uxth	r2, r2
 800644c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800646a:	e018      	b.n	800649e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800646c:	f7fd f81c 	bl	80034a8 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d803      	bhi.n	8006484 <HAL_SPI_Receive+0x20e>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006482:	d102      	bne.n	800648a <HAL_SPI_Receive+0x214>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e01f      	b.n	80064de <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1c3      	bne.n	8006432 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 ffee 	bl	8007490 <SPI_EndRxTransaction>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
  }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b08a      	sub	sp, #40	@ 0x28
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064f4:	2301      	movs	r3, #1
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f8:	f7fc ffd6 	bl	80034a8 <HAL_GetTick>
 80064fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006504:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006514:	7ffb      	ldrb	r3, [r7, #31]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d00c      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x4e>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006520:	d106      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x4a>
 800652a:	7ffb      	ldrb	r3, [r7, #31]
 800652c:	2b04      	cmp	r3, #4
 800652e:	d001      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
 8006532:	e1f3      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x60>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x60>
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e1e8      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x72>
 8006554:	2302      	movs	r3, #2
 8006556:	e1e1      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b04      	cmp	r3, #4
 800656a:	d003      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2205      	movs	r2, #5
 8006570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	887a      	ldrh	r2, [r7, #2]
 800658c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	887a      	ldrh	r2, [r7, #2]
 800659a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065b6:	d802      	bhi.n	80065be <HAL_SPI_TransmitReceive+0xd8>
 80065b8:	8abb      	ldrh	r3, [r7, #20]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d908      	bls.n	80065d0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	e007      	b.n	80065e0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b40      	cmp	r3, #64	@ 0x40
 80065ec:	d007      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006606:	f240 8083 	bls.w	8006710 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x132>
 8006612:	8afb      	ldrh	r3, [r7, #22]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d16f      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661c:	881a      	ldrh	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663c:	e05c      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d11b      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x19e>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_SPI_TransmitReceive+0x19e>
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	2b01      	cmp	r3, #1
 800665a:	d113      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006660:	881a      	ldrh	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666c:	1c9a      	adds	r2, r3, #2
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b01      	cmp	r3, #1
 8006690:	d11c      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x1e6>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	b292      	uxth	r2, r2
 80066aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	1c9a      	adds	r2, r3, #2
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c8:	2301      	movs	r3, #1
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066cc:	f7fc feec 	bl	80034a8 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d8:	429a      	cmp	r2, r3
 80066da:	d80d      	bhi.n	80066f8 <HAL_SPI_TransmitReceive+0x212>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066e2:	d009      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e111      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d19d      	bne.n	800663e <HAL_SPI_TransmitReceive+0x158>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d197      	bne.n	800663e <HAL_SPI_TransmitReceive+0x158>
 800670e:	e0e5      	b.n	80068dc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x23a>
 8006718:	8afb      	ldrh	r3, [r7, #22]
 800671a:	2b01      	cmp	r3, #1
 800671c:	f040 80d1 	bne.w	80068c2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d912      	bls.n	8006750 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b02      	subs	r3, #2
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800674e:	e0b8      	b.n	80068c2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	7812      	ldrb	r2, [r2, #0]
 800675c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006776:	e0a4      	b.n	80068c2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b02      	cmp	r3, #2
 8006784:	d134      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x30a>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02f      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x30a>
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	2b01      	cmp	r3, #1
 8006794:	d12c      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d912      	bls.n	80067c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b02      	subs	r3, #2
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067c4:	e012      	b.n	80067ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d148      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x3aa>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d042      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d923      	bls.n	800685e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	b292      	uxth	r2, r2
 8006822:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006828:	1c9a      	adds	r2, r3, #2
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b02      	subs	r3, #2
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d81f      	bhi.n	800688c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	e016      	b.n	800688c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f103 020c 	add.w	r2, r3, #12
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800688c:	2301      	movs	r3, #1
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006890:	f7fc fe0a 	bl	80034a8 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800689c:	429a      	cmp	r2, r3
 800689e:	d803      	bhi.n	80068a8 <HAL_SPI_TransmitReceive+0x3c2>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a6:	d102      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x3c8>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e02c      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f47f af55 	bne.w	8006778 <HAL_SPI_TransmitReceive+0x292>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f47f af4e 	bne.w	8006778 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068dc:	6a3a      	ldr	r2, [r7, #32]
 80068de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fe2d 	bl	8007540 <SPI_EndRxTxTransaction>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e00e      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800691a:	2300      	movs	r3, #0
  }
}
 800691c:	4618      	mov	r0, r3
 800691e:	3728      	adds	r7, #40	@ 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SPI_Transmit_IT+0x1a>
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e06d      	b.n	8006a1e <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
 8006950:	e065      	b.n	8006a1e <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_SPI_Transmit_IT+0x3c>
 800695c:	2302      	movs	r3, #2
 800695e:	e05e      	b.n	8006a1e <HAL_SPI_Transmit_IT+0xfa>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2203      	movs	r2, #3
 800696c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069ac:	d903      	bls.n	80069b6 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <HAL_SPI_Transmit_IT+0x108>)
 80069b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80069b4:	e002      	b.n	80069bc <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a30 <HAL_SPI_Transmit_IT+0x10c>)
 80069ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c4:	d10f      	bne.n	80069e6 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f0:	2b40      	cmp	r3, #64	@ 0x40
 80069f2:	d007      	beq.n	8006a04 <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a02:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006a1a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	0800720f 	.word	0x0800720f
 8006a30:	080071c9 	.word	0x080071c9

08006a34 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d001      	beq.n	8006a52 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e092      	b.n	8006b78 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d110      	bne.n	8006a7c <HAL_SPI_Receive_IT+0x48>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a62:	d10b      	bne.n	8006a7c <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2204      	movs	r2, #4
 8006a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f888 	bl	8006b88 <HAL_SPI_TransmitReceive_IT>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e07d      	b.n	8006b78 <HAL_SPI_Receive_IT+0x144>
  }


  if ((pData == NULL) || (Size == 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_Receive_IT+0x54>
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e075      	b.n	8006b78 <HAL_SPI_Receive_IT+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_SPI_Receive_IT+0x66>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e06e      	b.n	8006b78 <HAL_SPI_Receive_IT+0x144>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	88fa      	ldrh	r2, [r7, #6]
 8006aba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	88fa      	ldrh	r2, [r7, #6]
 8006ac2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ae6:	d90b      	bls.n	8006b00 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006af6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4a21      	ldr	r2, [pc, #132]	@ (8006b80 <HAL_SPI_Receive_IT+0x14c>)
 8006afc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006afe:	e00a      	b.n	8006b16 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b0e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <HAL_SPI_Receive_IT+0x150>)
 8006b14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b1e:	d10f      	bne.n	8006b40 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b3e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4a:	2b40      	cmp	r3, #64	@ 0x40
 8006b4c:	d007      	beq.n	8006b5e <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006b74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	0800717d 	.word	0x0800717d
 8006b84:	0800712d 	.word	0x0800712d

08006b88 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b9c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bb0:	d106      	bne.n	8006bc0 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <HAL_SPI_TransmitReceive_IT+0x38>
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d001      	beq.n	8006bc4 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e07d      	b.n	8006cc0 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006bd0:	887b      	ldrh	r3, [r7, #2]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e072      	b.n	8006cc0 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_SPI_TransmitReceive_IT+0x60>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e06b      	b.n	8006cc0 <HAL_SPI_TransmitReceive_IT+0x138>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d003      	beq.n	8006c04 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2205      	movs	r2, #5
 8006c00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	887a      	ldrh	r2, [r7, #2]
 8006c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	887a      	ldrh	r2, [r7, #2]
 8006c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	887a      	ldrh	r2, [r7, #2]
 8006c26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	887a      	ldrh	r2, [r7, #2]
 8006c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c3a:	d906      	bls.n	8006c4a <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a23      	ldr	r2, [pc, #140]	@ (8006ccc <HAL_SPI_TransmitReceive_IT+0x144>)
 8006c40:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4a22      	ldr	r2, [pc, #136]	@ (8006cd0 <HAL_SPI_TransmitReceive_IT+0x148>)
 8006c46:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c48:	e005      	b.n	8006c56 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a21      	ldr	r2, [pc, #132]	@ (8006cd4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8006c4e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a21      	ldr	r2, [pc, #132]	@ (8006cd8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006c54:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c5e:	d802      	bhi.n	8006c66 <HAL_SPI_TransmitReceive_IT+0xde>
 8006c60:	887b      	ldrh	r3, [r7, #2]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d908      	bls.n	8006c78 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	e007      	b.n	8006c88 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c86:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c92:	2b40      	cmp	r3, #64	@ 0x40
 8006c94:	d007      	beq.n	8006ca6 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006cbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	08007067 	.word	0x08007067
 8006cd0:	080070cd 	.word	0x080070cd
 8006cd4:	08006f17 	.word	0x08006f17
 8006cd8:	08006fd5 	.word	0x08006fd5

08006cdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10e      	bne.n	8006d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d009      	beq.n	8006d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	4798      	blx	r3
    return;
 8006d1a:	e0ce      	b.n	8006eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <HAL_SPI_IRQHandler+0x5e>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
    return;
 8006d38:	e0bf      	b.n	8006eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <HAL_SPI_IRQHandler+0x7e>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80b0 	beq.w	8006eba <HAL_SPI_IRQHandler+0x1de>
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80aa 	beq.w	8006eba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d023      	beq.n	8006db8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d011      	beq.n	8006da0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d80:	f043 0204 	orr.w	r2, r3, #4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	e00b      	b.n	8006db8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
        return;
 8006db6:	e080      	b.n	8006eba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfa:	f043 0208 	orr.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e02:	2300      	movs	r3, #0
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d04f      	beq.n	8006eb8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <HAL_SPI_IRQHandler+0x168>
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d034      	beq.n	8006eae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0203 	bic.w	r2, r2, #3
 8006e52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d011      	beq.n	8006e80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e60:	4a17      	ldr	r2, [pc, #92]	@ (8006ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fc fc90 	bl	800378e <HAL_DMA_Abort_IT>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d016      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8006e8e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fc fc7a 	bl	800378e <HAL_DMA_Abort_IT>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006eac:	e003      	b.n	8006eb6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f812 	bl	8006ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006eb4:	e000      	b.n	8006eb8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006eb6:	bf00      	nop
    return;
 8006eb8:	bf00      	nop
  }
}
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08006eed 	.word	0x08006eed

08006ec4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ffe5 	bl	8006ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d923      	bls.n	8006f72 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f34:	b292      	uxth	r2, r2
 8006f36:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b02      	subs	r3, #2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d11f      	bne.n	8006fa0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f6e:	605a      	str	r2, [r3, #4]
 8006f70:	e016      	b.n	8006fa0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f103 020c 	add.w	r2, r3, #12
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10f      	bne.n	8006fcc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006fba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fb00 	bl	80075cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d912      	bls.n	800700c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b02      	subs	r3, #2
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800700a:	e012      	b.n	8007032 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d110      	bne.n	800705e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800704a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fab7 	bl	80075cc <SPI_CloseRxTx_ISR>
    }
  }
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007078:	b292      	uxth	r2, r2
 800707a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	1c9a      	adds	r2, r3, #2
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10f      	bne.n	80070c4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa84 	bl	80075cc <SPI_CloseRxTx_ISR>
    }
  }
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	881a      	ldrh	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e4:	1c9a      	adds	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d110      	bne.n	8007124 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007110:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa54 	bl	80075cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f103 020c 	add.w	r2, r3, #12
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa6e 	bl	8007650 <SPI_CloseRx_ISR>
  }
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	b292      	uxth	r2, r2
 8007190:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	1c9a      	adds	r2, r3, #2
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa48 	bl	8007650 <SPI_CloseRx_ISR>
  }
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa55 	bl	80076b0 <SPI_CloseTx_ISR>
  }
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fa33 	bl	80076b0 <SPI_CloseTx_ISR>
  }
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007264:	f7fc f920 	bl	80034a8 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4413      	add	r3, r2
 8007272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007274:	f7fc f918 	bl	80034a8 <HAL_GetTick>
 8007278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800727a:	4b39      	ldr	r3, [pc, #228]	@ (8007360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	015b      	lsls	r3, r3, #5
 8007280:	0d1b      	lsrs	r3, r3, #20
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	fb02 f303 	mul.w	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728a:	e054      	b.n	8007336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007292:	d050      	beq.n	8007336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007294:	f7fc f908 	bl	80034a8 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d902      	bls.n	80072aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d13d      	bne.n	8007326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072c2:	d111      	bne.n	80072e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072cc:	d004      	beq.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d6:	d107      	bne.n	80072e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f0:	d10f      	bne.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e017      	b.n	8007356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	3b01      	subs	r3, #1
 8007334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d19b      	bne.n	800728c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000018 	.word	0x20000018

08007364 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	@ 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007376:	f7fc f897 	bl	80034a8 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	4413      	add	r3, r2
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007386:	f7fc f88f 	bl	80034a8 <HAL_GetTick>
 800738a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007394:	4b3d      	ldr	r3, [pc, #244]	@ (800748c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	00da      	lsls	r2, r3, #3
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	0d1b      	lsrs	r3, r3, #20
 80073a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073ac:	e060      	b.n	8007470 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073b4:	d107      	bne.n	80073c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073cc:	d050      	beq.n	8007470 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ce:	f7fc f86b 	bl	80034a8 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073da:	429a      	cmp	r2, r3
 80073dc:	d902      	bls.n	80073e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d13d      	bne.n	8007460 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073fc:	d111      	bne.n	8007422 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007406:	d004      	beq.n	8007412 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007410:	d107      	bne.n	8007422 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007420:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800742a:	d10f      	bne.n	800744c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800744a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e010      	b.n	8007482 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	3b01      	subs	r3, #1
 800746e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d196      	bne.n	80073ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3728      	adds	r7, #40	@ 0x28
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000018 	.word	0x20000018

08007490 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074a4:	d111      	bne.n	80074ca <SPI_EndRxTransaction+0x3a>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ae:	d004      	beq.n	80074ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b8:	d107      	bne.n	80074ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2180      	movs	r1, #128	@ 0x80
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff febd 	bl	8007254 <SPI_WaitFlagStateUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e023      	b.n	8007538 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074f8:	d11d      	bne.n	8007536 <SPI_EndRxTransaction+0xa6>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007502:	d004      	beq.n	800750e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750c:	d113      	bne.n	8007536 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff ff22 	bl	8007364 <SPI_WaitFifoStateUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e000      	b.n	8007538 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff ff03 	bl	8007364 <SPI_WaitFifoStateUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e027      	b.n	80075c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	2180      	movs	r1, #128	@ 0x80
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff fe68 	bl	8007254 <SPI_WaitFlagStateUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e014      	b.n	80075c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fedc 	bl	8007364 <SPI_WaitFifoStateUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e000      	b.n	80075c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d4:	f7fb ff68 	bl	80034a8 <HAL_GetTick>
 80075d8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0220 	bic.w	r2, r2, #32
 80075e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	2164      	movs	r1, #100	@ 0x64
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff ffa6 	bl	8007540 <SPI_EndRxTxTransaction>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075fe:	f043 0220 	orr.w	r2, r3, #32
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760a:	2b00      	cmp	r3, #0
 800760c:	d115      	bne.n	800763a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b04      	cmp	r3, #4
 8007618:	d107      	bne.n	800762a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f002 f8d2 	bl	80097cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007628:	e00e      	b.n	8007648 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fc46 	bl	8006ec4 <HAL_SPI_TxRxCpltCallback>
}
 8007638:	e006      	b.n	8007648 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff fc48 	bl	8006ed8 <HAL_SPI_ErrorCallback>
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007666:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007668:	f7fb ff1e 	bl	80034a8 <HAL_GetTick>
 800766c:	4603      	mov	r3, r0
 800766e:	461a      	mov	r2, r3
 8007670:	2164      	movs	r1, #100	@ 0x64
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff ff0c 	bl	8007490 <SPI_EndRxTransaction>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f002 f896 	bl	80097cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80076a0:	e002      	b.n	80076a8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff fc18 	bl	8006ed8 <HAL_SPI_ErrorCallback>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076b8:	f7fb fef6 	bl	80034a8 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80076cc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	2164      	movs	r1, #100	@ 0x64
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff ff34 	bl	8007540 <SPI_EndRxTxTransaction>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076e2:	f043 0220 	orr.w	r2, r3, #32
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076f2:	2300      	movs	r3, #0
 80076f4:	60bb      	str	r3, [r7, #8]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	60bb      	str	r3, [r7, #8]
 8007706:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff fbdd 	bl	8006ed8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800771e:	e002      	b.n	8007726 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f002 f867 	bl	80097f4 <HAL_SPI_TxCpltCallback>
}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e040      	b.n	80077c2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fa f929 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2224      	movs	r2, #36	@ 0x24
 800775a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb69 	bl	8007e4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8ae 	bl	80078dc <UART_SetConfig>
 8007780:	4603      	mov	r3, r0
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e01b      	b.n	80077c2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007798:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fbe8 	bl	8007f90 <UART_CheckIdleState>
 80077c0:	4603      	mov	r3, r0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b08a      	sub	sp, #40	@ 0x28
 80077ce:	af02      	add	r7, sp, #8
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d177      	bne.n	80078d2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_UART_Transmit+0x24>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e070      	b.n	80078d4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2221      	movs	r2, #33	@ 0x21
 80077fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007800:	f7fb fe52 	bl	80034a8 <HAL_GetTick>
 8007804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800781e:	d108      	bne.n	8007832 <HAL_UART_Transmit+0x68>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	e003      	b.n	800783a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800783a:	e02f      	b.n	800789c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2200      	movs	r2, #0
 8007844:	2180      	movs	r1, #128	@ 0x80
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fc4a 	bl	80080e0 <UART_WaitOnFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2220      	movs	r2, #32
 8007856:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e03b      	b.n	80078d4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	881a      	ldrh	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800786e:	b292      	uxth	r2, r2
 8007870:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	3302      	adds	r3, #2
 8007876:	61bb      	str	r3, [r7, #24]
 8007878:	e007      	b.n	800788a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	3301      	adds	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1c9      	bne.n	800783c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2200      	movs	r2, #0
 80078b0:	2140      	movs	r1, #64	@ 0x40
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fc14 	bl	80080e0 <UART_WaitOnFlagUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e005      	b.n	80078d4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078e0:	b08a      	sub	sp, #40	@ 0x28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	4313      	orrs	r3, r2
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4ba4      	ldr	r3, [pc, #656]	@ (8007b9c <UART_SetConfig+0x2c0>)
 800790c:	4013      	ands	r3, r2
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007914:	430b      	orrs	r3, r1
 8007916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a99      	ldr	r2, [pc, #612]	@ (8007ba0 <UART_SetConfig+0x2c4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007944:	4313      	orrs	r3, r2
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007958:	430a      	orrs	r2, r1
 800795a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a90      	ldr	r2, [pc, #576]	@ (8007ba4 <UART_SetConfig+0x2c8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d126      	bne.n	80079b4 <UART_SetConfig+0xd8>
 8007966:	4b90      	ldr	r3, [pc, #576]	@ (8007ba8 <UART_SetConfig+0x2cc>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	2b03      	cmp	r3, #3
 8007972:	d81b      	bhi.n	80079ac <UART_SetConfig+0xd0>
 8007974:	a201      	add	r2, pc, #4	@ (adr r2, 800797c <UART_SetConfig+0xa0>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	0800798d 	.word	0x0800798d
 8007980:	0800799d 	.word	0x0800799d
 8007984:	08007995 	.word	0x08007995
 8007988:	080079a5 	.word	0x080079a5
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007992:	e116      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007994:	2302      	movs	r3, #2
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800799a:	e112      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 800799c:	2304      	movs	r3, #4
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a2:	e10e      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 80079a4:	2308      	movs	r3, #8
 80079a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079aa:	e10a      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 80079ac:	2310      	movs	r3, #16
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b2:	e106      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a7c      	ldr	r2, [pc, #496]	@ (8007bac <UART_SetConfig+0x2d0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d138      	bne.n	8007a30 <UART_SetConfig+0x154>
 80079be:	4b7a      	ldr	r3, [pc, #488]	@ (8007ba8 <UART_SetConfig+0x2cc>)
 80079c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c4:	f003 030c 	and.w	r3, r3, #12
 80079c8:	2b0c      	cmp	r3, #12
 80079ca:	d82d      	bhi.n	8007a28 <UART_SetConfig+0x14c>
 80079cc:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <UART_SetConfig+0xf8>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a29 	.word	0x08007a29
 80079dc:	08007a29 	.word	0x08007a29
 80079e0:	08007a29 	.word	0x08007a29
 80079e4:	08007a19 	.word	0x08007a19
 80079e8:	08007a29 	.word	0x08007a29
 80079ec:	08007a29 	.word	0x08007a29
 80079f0:	08007a29 	.word	0x08007a29
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	08007a29 	.word	0x08007a29
 80079fc:	08007a29 	.word	0x08007a29
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a0e:	e0d8      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a10:	2302      	movs	r3, #2
 8007a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a16:	e0d4      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a18:	2304      	movs	r3, #4
 8007a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a1e:	e0d0      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a20:	2308      	movs	r3, #8
 8007a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a26:	e0cc      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a2e:	e0c8      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a5e      	ldr	r2, [pc, #376]	@ (8007bb0 <UART_SetConfig+0x2d4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d125      	bne.n	8007a86 <UART_SetConfig+0x1aa>
 8007a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ba8 <UART_SetConfig+0x2cc>)
 8007a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a44:	2b30      	cmp	r3, #48	@ 0x30
 8007a46:	d016      	beq.n	8007a76 <UART_SetConfig+0x19a>
 8007a48:	2b30      	cmp	r3, #48	@ 0x30
 8007a4a:	d818      	bhi.n	8007a7e <UART_SetConfig+0x1a2>
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d00a      	beq.n	8007a66 <UART_SetConfig+0x18a>
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d814      	bhi.n	8007a7e <UART_SetConfig+0x1a2>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <UART_SetConfig+0x182>
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d008      	beq.n	8007a6e <UART_SetConfig+0x192>
 8007a5c:	e00f      	b.n	8007a7e <UART_SetConfig+0x1a2>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a64:	e0ad      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a66:	2302      	movs	r3, #2
 8007a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6c:	e0a9      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a6e:	2304      	movs	r3, #4
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a74:	e0a5      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a76:	2308      	movs	r3, #8
 8007a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a7c:	e0a1      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a7e:	2310      	movs	r3, #16
 8007a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a84:	e09d      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb4 <UART_SetConfig+0x2d8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d125      	bne.n	8007adc <UART_SetConfig+0x200>
 8007a90:	4b45      	ldr	r3, [pc, #276]	@ (8007ba8 <UART_SetConfig+0x2cc>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a9c:	d016      	beq.n	8007acc <UART_SetConfig+0x1f0>
 8007a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aa0:	d818      	bhi.n	8007ad4 <UART_SetConfig+0x1f8>
 8007aa2:	2b80      	cmp	r3, #128	@ 0x80
 8007aa4:	d00a      	beq.n	8007abc <UART_SetConfig+0x1e0>
 8007aa6:	2b80      	cmp	r3, #128	@ 0x80
 8007aa8:	d814      	bhi.n	8007ad4 <UART_SetConfig+0x1f8>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <UART_SetConfig+0x1d8>
 8007aae:	2b40      	cmp	r3, #64	@ 0x40
 8007ab0:	d008      	beq.n	8007ac4 <UART_SetConfig+0x1e8>
 8007ab2:	e00f      	b.n	8007ad4 <UART_SetConfig+0x1f8>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aba:	e082      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac2:	e07e      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aca:	e07a      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad2:	e076      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ada:	e072      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a35      	ldr	r2, [pc, #212]	@ (8007bb8 <UART_SetConfig+0x2dc>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d12a      	bne.n	8007b3c <UART_SetConfig+0x260>
 8007ae6:	4b30      	ldr	r3, [pc, #192]	@ (8007ba8 <UART_SetConfig+0x2cc>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007af0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af4:	d01a      	beq.n	8007b2c <UART_SetConfig+0x250>
 8007af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007afa:	d81b      	bhi.n	8007b34 <UART_SetConfig+0x258>
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b00:	d00c      	beq.n	8007b1c <UART_SetConfig+0x240>
 8007b02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b06:	d815      	bhi.n	8007b34 <UART_SetConfig+0x258>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <UART_SetConfig+0x238>
 8007b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b10:	d008      	beq.n	8007b24 <UART_SetConfig+0x248>
 8007b12:	e00f      	b.n	8007b34 <UART_SetConfig+0x258>
 8007b14:	2300      	movs	r3, #0
 8007b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b1a:	e052      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b22:	e04e      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b24:	2304      	movs	r3, #4
 8007b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2a:	e04a      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b2c:	2308      	movs	r3, #8
 8007b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b32:	e046      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b34:	2310      	movs	r3, #16
 8007b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3a:	e042      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a17      	ldr	r2, [pc, #92]	@ (8007ba0 <UART_SetConfig+0x2c4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d13a      	bne.n	8007bbc <UART_SetConfig+0x2e0>
 8007b46:	4b18      	ldr	r3, [pc, #96]	@ (8007ba8 <UART_SetConfig+0x2cc>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b54:	d01a      	beq.n	8007b8c <UART_SetConfig+0x2b0>
 8007b56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b5a:	d81b      	bhi.n	8007b94 <UART_SetConfig+0x2b8>
 8007b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b60:	d00c      	beq.n	8007b7c <UART_SetConfig+0x2a0>
 8007b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b66:	d815      	bhi.n	8007b94 <UART_SetConfig+0x2b8>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <UART_SetConfig+0x298>
 8007b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b70:	d008      	beq.n	8007b84 <UART_SetConfig+0x2a8>
 8007b72:	e00f      	b.n	8007b94 <UART_SetConfig+0x2b8>
 8007b74:	2300      	movs	r3, #0
 8007b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b7a:	e022      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b82:	e01e      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b8a:	e01a      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b92:	e016      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b9a:	e012      	b.n	8007bc2 <UART_SetConfig+0x2e6>
 8007b9c:	efff69f3 	.word	0xefff69f3
 8007ba0:	40008000 	.word	0x40008000
 8007ba4:	40013800 	.word	0x40013800
 8007ba8:	40021000 	.word	0x40021000
 8007bac:	40004400 	.word	0x40004400
 8007bb0:	40004800 	.word	0x40004800
 8007bb4:	40004c00 	.word	0x40004c00
 8007bb8:	40005000 	.word	0x40005000
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a9f      	ldr	r2, [pc, #636]	@ (8007e44 <UART_SetConfig+0x568>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d17a      	bne.n	8007cc2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d824      	bhi.n	8007c1e <UART_SetConfig+0x342>
 8007bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <UART_SetConfig+0x300>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c1f 	.word	0x08007c1f
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c1f 	.word	0x08007c1f
 8007bec:	08007c0f 	.word	0x08007c0f
 8007bf0:	08007c1f 	.word	0x08007c1f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c1f 	.word	0x08007c1f
 8007bfc:	08007c17 	.word	0x08007c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fd fd16 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 8007c04:	61f8      	str	r0, [r7, #28]
        break;
 8007c06:	e010      	b.n	8007c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c08:	4b8f      	ldr	r3, [pc, #572]	@ (8007e48 <UART_SetConfig+0x56c>)
 8007c0a:	61fb      	str	r3, [r7, #28]
        break;
 8007c0c:	e00d      	b.n	8007c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0e:	f7fd fc77 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8007c12:	61f8      	str	r0, [r7, #28]
        break;
 8007c14:	e009      	b.n	8007c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c1a:	61fb      	str	r3, [r7, #28]
        break;
 8007c1c:	e005      	b.n	8007c2a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 80fb 	beq.w	8007e28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d305      	bcc.n	8007c4e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d903      	bls.n	8007c56 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c54:	e0e8      	b.n	8007e28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	4615      	mov	r5, r2
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	022b      	lsls	r3, r5, #8
 8007c68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c6c:	0222      	lsls	r2, r4, #8
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6849      	ldr	r1, [r1, #4]
 8007c72:	0849      	lsrs	r1, r1, #1
 8007c74:	2000      	movs	r0, #0
 8007c76:	4688      	mov	r8, r1
 8007c78:	4681      	mov	r9, r0
 8007c7a:	eb12 0a08 	adds.w	sl, r2, r8
 8007c7e:	eb43 0b09 	adc.w	fp, r3, r9
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c90:	4650      	mov	r0, sl
 8007c92:	4659      	mov	r1, fp
 8007c94:	f7f8 ff88 	bl	8000ba8 <__aeabi_uldivmod>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca6:	d308      	bcc.n	8007cba <UART_SetConfig+0x3de>
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cae:	d204      	bcs.n	8007cba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	60da      	str	r2, [r3, #12]
 8007cb8:	e0b6      	b.n	8007e28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cc0:	e0b2      	b.n	8007e28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cca:	d15e      	bne.n	8007d8a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d828      	bhi.n	8007d26 <UART_SetConfig+0x44a>
 8007cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x400>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	08007d27 	.word	0x08007d27
 8007cec:	08007d17 	.word	0x08007d17
 8007cf0:	08007d27 	.word	0x08007d27
 8007cf4:	08007d27 	.word	0x08007d27
 8007cf8:	08007d27 	.word	0x08007d27
 8007cfc:	08007d1f 	.word	0x08007d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fd fc96 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 8007d04:	61f8      	str	r0, [r7, #28]
        break;
 8007d06:	e014      	b.n	8007d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d08:	f7fd fca8 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 8007d0c:	61f8      	str	r0, [r7, #28]
        break;
 8007d0e:	e010      	b.n	8007d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d10:	4b4d      	ldr	r3, [pc, #308]	@ (8007e48 <UART_SetConfig+0x56c>)
 8007d12:	61fb      	str	r3, [r7, #28]
        break;
 8007d14:	e00d      	b.n	8007d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d16:	f7fd fbf3 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8007d1a:	61f8      	str	r0, [r7, #28]
        break;
 8007d1c:	e009      	b.n	8007d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d22:	61fb      	str	r3, [r7, #28]
        break;
 8007d24:	e005      	b.n	8007d32 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d077      	beq.n	8007e28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	005a      	lsls	r2, r3, #1
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b0f      	cmp	r3, #15
 8007d52:	d916      	bls.n	8007d82 <UART_SetConfig+0x4a6>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d5a:	d212      	bcs.n	8007d82 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f023 030f 	bic.w	r3, r3, #15
 8007d64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	085b      	lsrs	r3, r3, #1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f003 0307 	and.w	r3, r3, #7
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	8afb      	ldrh	r3, [r7, #22]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	8afa      	ldrh	r2, [r7, #22]
 8007d7e:	60da      	str	r2, [r3, #12]
 8007d80:	e052      	b.n	8007e28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d88:	e04e      	b.n	8007e28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d827      	bhi.n	8007de2 <UART_SetConfig+0x506>
 8007d92:	a201      	add	r2, pc, #4	@ (adr r2, 8007d98 <UART_SetConfig+0x4bc>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	08007de3 	.word	0x08007de3
 8007da8:	08007dd3 	.word	0x08007dd3
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007de3 	.word	0x08007de3
 8007db4:	08007de3 	.word	0x08007de3
 8007db8:	08007ddb 	.word	0x08007ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dbc:	f7fd fc38 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 8007dc0:	61f8      	str	r0, [r7, #28]
        break;
 8007dc2:	e014      	b.n	8007dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc4:	f7fd fc4a 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 8007dc8:	61f8      	str	r0, [r7, #28]
        break;
 8007dca:	e010      	b.n	8007dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e48 <UART_SetConfig+0x56c>)
 8007dce:	61fb      	str	r3, [r7, #28]
        break;
 8007dd0:	e00d      	b.n	8007dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd2:	f7fd fb95 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8007dd6:	61f8      	str	r0, [r7, #28]
        break;
 8007dd8:	e009      	b.n	8007dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dde:	61fb      	str	r3, [r7, #28]
        break;
 8007de0:	e005      	b.n	8007dee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007dec:	bf00      	nop
    }

    if (pclk != 0U)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d019      	beq.n	8007e28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	085a      	lsrs	r2, r3, #1
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	441a      	add	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b0f      	cmp	r3, #15
 8007e0c:	d909      	bls.n	8007e22 <UART_SetConfig+0x546>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e14:	d205      	bcs.n	8007e22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60da      	str	r2, [r3, #12]
 8007e20:	e002      	b.n	8007e28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3728      	adds	r7, #40	@ 0x28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e42:	bf00      	nop
 8007e44:	40008000 	.word	0x40008000
 8007e48:	00f42400 	.word	0x00f42400

08007e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01a      	beq.n	8007f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f4a:	d10a      	bne.n	8007f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b098      	sub	sp, #96	@ 0x60
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fa0:	f7fb fa82 	bl	80034a8 <HAL_GetTick>
 8007fa4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d12e      	bne.n	8008012 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f88c 	bl	80080e0 <UART_WaitOnFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d021      	beq.n	8008012 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2220      	movs	r2, #32
 8008004:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e062      	b.n	80080d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d149      	bne.n	80080b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008020:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008028:	2200      	movs	r2, #0
 800802a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f856 	bl	80080e0 <UART_WaitOnFlagUntilTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d03c      	beq.n	80080b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	623b      	str	r3, [r7, #32]
   return(result);
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800804e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008058:	633b      	str	r3, [r7, #48]	@ 0x30
 800805a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800805e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e6      	bne.n	800803a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3308      	adds	r3, #8
 8008072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	60fb      	str	r3, [r7, #12]
   return(result);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800808c:	61fa      	str	r2, [r7, #28]
 800808e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	69b9      	ldr	r1, [r7, #24]
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	617b      	str	r3, [r7, #20]
   return(result);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e5      	bne.n	800806c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e011      	b.n	80080d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3758      	adds	r7, #88	@ 0x58
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f0:	e04f      	b.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080f8:	d04b      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080fa:	f7fb f9d5 	bl	80034a8 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <UART_WaitOnFlagUntilTimeout+0x30>
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e04e      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d037      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b80      	cmp	r3, #128	@ 0x80
 8008126:	d034      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b40      	cmp	r3, #64	@ 0x40
 800812c:	d031      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b08      	cmp	r3, #8
 800813a:	d110      	bne.n	800815e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2208      	movs	r2, #8
 8008142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f838 	bl	80081ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2208      	movs	r2, #8
 800814e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e029      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800816c:	d111      	bne.n	8008192 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f81e 	bl	80081ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e00f      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4013      	ands	r3, r2
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d0a0      	beq.n	80080f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b095      	sub	sp, #84	@ 0x54
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e6      	bne.n	80081c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	61fb      	str	r3, [r7, #28]
   return(result);
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f023 0301 	bic.w	r3, r3, #1
 800820a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008214:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008216:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800821a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e5      	bne.n	80081f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800822c:	2b01      	cmp	r3, #1
 800822e:	d118      	bne.n	8008262 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	60bb      	str	r3, [r7, #8]
   return(result);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f023 0310 	bic.w	r3, r3, #16
 8008244:	647b      	str	r3, [r7, #68]	@ 0x44
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6979      	ldr	r1, [r7, #20]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	613b      	str	r3, [r7, #16]
   return(result);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e6      	bne.n	8008230 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008276:	bf00      	nop
 8008278:	3754      	adds	r7, #84	@ 0x54
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	4603      	mov	r3, r0
 800828a:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008290:	d906      	bls.n	80082a0 <Hex2Num+0x1e>
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	2b39      	cmp	r3, #57	@ 0x39
 8008296:	d803      	bhi.n	80082a0 <Hex2Num+0x1e>
        return a - '0';
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	3b30      	subs	r3, #48	@ 0x30
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e014      	b.n	80082ca <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	2b60      	cmp	r3, #96	@ 0x60
 80082a4:	d906      	bls.n	80082b4 <Hex2Num+0x32>
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	2b66      	cmp	r3, #102	@ 0x66
 80082aa:	d803      	bhi.n	80082b4 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	3b57      	subs	r3, #87	@ 0x57
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	e00a      	b.n	80082ca <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	2b40      	cmp	r3, #64	@ 0x40
 80082b8:	d906      	bls.n	80082c8 <Hex2Num+0x46>
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	2b46      	cmp	r3, #70	@ 0x46
 80082be:	d803      	bhi.n	80082c8 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	3b37      	subs	r3, #55	@ 0x37
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	e000      	b.n	80082ca <Hex2Num+0x48>
    }

    return 0;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80082e8:	e012      	b.n	8008310 <ParseHexNumber+0x3a>
        sum <<= 4;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff ffc4 	bl	8008282 <Hex2Num>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
        ptr++;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3301      	adds	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
        i++;
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	3301      	adds	r3, #1
 800830e:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b2f      	cmp	r3, #47	@ 0x2f
 8008316:	d903      	bls.n	8008320 <ParseHexNumber+0x4a>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b39      	cmp	r3, #57	@ 0x39
 800831e:	d9e4      	bls.n	80082ea <ParseHexNumber+0x14>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b60      	cmp	r3, #96	@ 0x60
 8008326:	d903      	bls.n	8008330 <ParseHexNumber+0x5a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b66      	cmp	r3, #102	@ 0x66
 800832e:	d9dc      	bls.n	80082ea <ParseHexNumber+0x14>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b40      	cmp	r3, #64	@ 0x40
 8008336:	d903      	bls.n	8008340 <ParseHexNumber+0x6a>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b46      	cmp	r3, #70	@ 0x46
 800833e:	d9d4      	bls.n	80082ea <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <ParseHexNumber+0x76>
        *cnt = i;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	7afa      	ldrb	r2, [r7, #11]
 800834a:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	73fb      	strb	r3, [r7, #15]
 8008364:	2300      	movs	r3, #0
 8008366:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b2d      	cmp	r3, #45	@ 0x2d
 8008372:	d119      	bne.n	80083a8 <ParseNumber+0x52>
        minus = 1;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3301      	adds	r3, #1
 800837c:	607b      	str	r3, [r7, #4]
        i++;
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	3301      	adds	r3, #1
 8008382:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8008384:	e010      	b.n	80083a8 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	3b30      	subs	r3, #48	@ 0x30
 8008398:	4413      	add	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]
        ptr++;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3301      	adds	r3, #1
 80083a0:	607b      	str	r3, [r7, #4]
        i++;
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	3301      	adds	r3, #1
 80083a6:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80083ae:	d903      	bls.n	80083b8 <ParseNumber+0x62>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b39      	cmp	r3, #57	@ 0x39
 80083b6:	d9e6      	bls.n	8008386 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <ParseNumber+0x6e>
        *cnt = i;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	7bba      	ldrb	r2, [r7, #14]
 80083c2:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <ParseNumber+0x7a>
        return 0 - sum;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	425b      	negs	r3, r3
 80083ce:	e000      	b.n	80083d2 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80083d0:	68bb      	ldr	r3, [r7, #8]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80083ec:	e019      	b.n	8008422 <ParseMAC+0x44>
    hexcnt = 1;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80083f8:	d00e      	beq.n	8008418 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80083fa:	f107 030e 	add.w	r3, r7, #14
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff ff68 	bl	80082d6 <ParseHexNumber>
 8008406:	4601      	mov	r1, r0
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	73fa      	strb	r2, [r7, #15]
 800840e:	461a      	mov	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	4413      	add	r3, r2
 8008414:	b2ca      	uxtb	r2, r1
 8008416:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e1      	bne.n	80083ee <ParseMAC+0x10>
  }
}
 800842a:	bf00      	nop
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8008442:	e019      	b.n	8008478 <ParseIP+0x44>
    hexcnt = 1;
 8008444:	2301      	movs	r3, #1
 8008446:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b2e      	cmp	r3, #46	@ 0x2e
 800844e:	d00e      	beq.n	800846e <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8008450:	f107 030e 	add.w	r3, r7, #14
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff ff7d 	bl	8008356 <ParseNumber>
 800845c:	4601      	mov	r1, r0
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	73fa      	strb	r2, [r7, #15]
 8008464:	461a      	mov	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	4413      	add	r3, r2
 800846a:	b2ca      	uxtb	r2, r1
 800846c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	461a      	mov	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4413      	add	r3, r2
 8008476:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e1      	bne.n	8008444 <ParseIP+0x10>
  }
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	3302      	adds	r3, #2
 800849e:	4934      	ldr	r1, [pc, #208]	@ (8008570 <AT_ParseInfo+0xe4>)
 80084a0:	4618      	mov	r0, r3
 80084a2:	f003 f893 	bl	800b5cc <strtok>
 80084a6:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80084a8:	e05a      	b.n	8008560 <AT_ParseInfo+0xd4>
    switch (num++) {
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	72fa      	strb	r2, [r7, #11]
 80084b0:	2b06      	cmp	r3, #6
 80084b2:	d84f      	bhi.n	8008554 <AT_ParseInfo+0xc8>
 80084b4:	a201      	add	r2, pc, #4	@ (adr r2, 80084bc <AT_ParseInfo+0x30>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084e7 	.word	0x080084e7
 80084c4:	080084f7 	.word	0x080084f7
 80084c8:	08008507 	.word	0x08008507
 80084cc:	08008517 	.word	0x08008517
 80084d0:	08008527 	.word	0x08008527
 80084d4:	0800853b 	.word	0x0800853b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	4618      	mov	r0, r3
 80084e0:	f003 f860 	bl	800b5a4 <strncpy>
      break;
 80084e4:	e037      	b.n	8008556 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3320      	adds	r3, #32
 80084ea:	2218      	movs	r2, #24
 80084ec:	68f9      	ldr	r1, [r7, #12]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 f858 	bl	800b5a4 <strncpy>
      break;
 80084f4:	e02f      	b.n	8008556 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3338      	adds	r3, #56	@ 0x38
 80084fa:	2210      	movs	r2, #16
 80084fc:	68f9      	ldr	r1, [r7, #12]
 80084fe:	4618      	mov	r0, r3
 8008500:	f003 f850 	bl	800b5a4 <strncpy>
      break;
 8008504:	e027      	b.n	8008556 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3348      	adds	r3, #72	@ 0x48
 800850a:	2210      	movs	r2, #16
 800850c:	68f9      	ldr	r1, [r7, #12]
 800850e:	4618      	mov	r0, r3
 8008510:	f003 f848 	bl	800b5a4 <strncpy>
      break;
 8008514:	e01f      	b.n	8008556 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3358      	adds	r3, #88	@ 0x58
 800851a:	2210      	movs	r2, #16
 800851c:	68f9      	ldr	r1, [r7, #12]
 800851e:	4618      	mov	r0, r3
 8008520:	f003 f840 	bl	800b5a4 <strncpy>
      break;
 8008524:	e017      	b.n	8008556 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8008526:	2100      	movs	r1, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff ff14 	bl	8008356 <ParseNumber>
 800852e:	4603      	mov	r3, r0
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8008538:	e00d      	b.n	8008556 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800853a:	490e      	ldr	r1, [pc, #56]	@ (8008574 <AT_ParseInfo+0xe8>)
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f003 f845 	bl	800b5cc <strtok>
 8008542:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3368      	adds	r3, #104	@ 0x68
 8008548:	2220      	movs	r2, #32
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	4618      	mov	r0, r3
 800854e:	f003 f829 	bl	800b5a4 <strncpy>
      break;
 8008552:	e000      	b.n	8008556 <AT_ParseInfo+0xca>

    default: break;
 8008554:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8008556:	4906      	ldr	r1, [pc, #24]	@ (8008570 <AT_ParseInfo+0xe4>)
 8008558:	2000      	movs	r0, #0
 800855a:	f003 f837 	bl	800b5cc <strtok>
 800855e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1a1      	bne.n	80084aa <AT_ParseInfo+0x1e>
  }
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0800dcc4 	.word	0x0800dcc4
 8008574:	0800dcc8 	.word	0x0800dcc8

08008578 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3302      	adds	r3, #2
 800858a:	4952      	ldr	r1, [pc, #328]	@ (80086d4 <AT_ParseConnSettings+0x15c>)
 800858c:	4618      	mov	r0, r3
 800858e:	f003 f81d 	bl	800b5cc <strtok>
 8008592:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8008594:	e095      	b.n	80086c2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	73fa      	strb	r2, [r7, #15]
 800859c:	2b0b      	cmp	r3, #11
 800859e:	d87f      	bhi.n	80086a0 <AT_ParseConnSettings+0x128>
 80085a0:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <AT_ParseConnSettings+0x30>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085d9 	.word	0x080085d9
 80085ac:	080085e7 	.word	0x080085e7
 80085b0:	080085f7 	.word	0x080085f7
 80085b4:	0800860b 	.word	0x0800860b
 80085b8:	0800861f 	.word	0x0800861f
 80085bc:	08008633 	.word	0x08008633
 80085c0:	08008641 	.word	0x08008641
 80085c4:	0800864f 	.word	0x0800864f
 80085c8:	0800865d 	.word	0x0800865d
 80085cc:	0800866b 	.word	0x0800866b
 80085d0:	08008679 	.word	0x08008679
 80085d4:	0800868d 	.word	0x0800868d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2221      	movs	r2, #33	@ 0x21
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f002 ffe0 	bl	800b5a4 <strncpy>
      break;
 80085e4:	e05d      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	3321      	adds	r3, #33	@ 0x21
 80085ea:	2231      	movs	r2, #49	@ 0x31
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f002 ffd8 	bl	800b5a4 <strncpy>
      break;
 80085f4:	e055      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80085f6:	2100      	movs	r1, #0
 80085f8:	68b8      	ldr	r0, [r7, #8]
 80085fa:	f7ff feac 	bl	8008356 <ParseNumber>
 80085fe:	4603      	mov	r3, r0
 8008600:	b2da      	uxtb	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        break;
 8008608:	e04b      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800860a:	2100      	movs	r1, #0
 800860c:	68b8      	ldr	r0, [r7, #8]
 800860e:	f7ff fea2 	bl	8008356 <ParseNumber>
 8008612:	4603      	mov	r3, r0
 8008614:	b2da      	uxtb	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
      break;
 800861c:	e041      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800861e:	2100      	movs	r1, #0
 8008620:	68b8      	ldr	r0, [r7, #8]
 8008622:	f7ff fe98 	bl	8008356 <ParseNumber>
 8008626:	4603      	mov	r3, r0
 8008628:	b2da      	uxtb	r2, r3
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 8008630:	e037      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	3358      	adds	r3, #88	@ 0x58
 8008636:	4619      	mov	r1, r3
 8008638:	68b8      	ldr	r0, [r7, #8]
 800863a:	f7ff fefb 	bl	8008434 <ParseIP>
      break;
 800863e:	e030      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	335c      	adds	r3, #92	@ 0x5c
 8008644:	4619      	mov	r1, r3
 8008646:	68b8      	ldr	r0, [r7, #8]
 8008648:	f7ff fef4 	bl	8008434 <ParseIP>
      break;
 800864c:	e029      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	3360      	adds	r3, #96	@ 0x60
 8008652:	4619      	mov	r1, r3
 8008654:	68b8      	ldr	r0, [r7, #8]
 8008656:	f7ff feed 	bl	8008434 <ParseIP>
      break;
 800865a:	e022      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	3364      	adds	r3, #100	@ 0x64
 8008660:	4619      	mov	r1, r3
 8008662:	68b8      	ldr	r0, [r7, #8]
 8008664:	f7ff fee6 	bl	8008434 <ParseIP>
      break;
 8008668:	e01b      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	3368      	adds	r3, #104	@ 0x68
 800866e:	4619      	mov	r1, r3
 8008670:	68b8      	ldr	r0, [r7, #8]
 8008672:	f7ff fedf 	bl	8008434 <ParseIP>
      break;
 8008676:	e014      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8008678:	2100      	movs	r1, #0
 800867a:	68b8      	ldr	r0, [r7, #8]
 800867c:	f7ff fe6b 	bl	8008356 <ParseNumber>
 8008680:	4603      	mov	r3, r0
 8008682:	b2da      	uxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      break;
 800868a:	e00a      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800868c:	2100      	movs	r1, #0
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f7ff fe61 	bl	8008356 <ParseNumber>
 8008694:	4603      	mov	r3, r0
 8008696:	b2da      	uxtb	r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
      break;
 800869e:	e000      	b.n	80086a2 <AT_ParseConnSettings+0x12a>

    default:
      break;
 80086a0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80086a2:	490c      	ldr	r1, [pc, #48]	@ (80086d4 <AT_ParseConnSettings+0x15c>)
 80086a4:	2000      	movs	r0, #0
 80086a6:	f002 ff91 	bl	800b5cc <strtok>
 80086aa:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <AT_ParseConnSettings+0x14a>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80086ba:	d102      	bne.n	80086c2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	3301      	adds	r3, #1
 80086c0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f47f af66 	bne.w	8008596 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	0800dcc4 	.word	0x0800dcc4

080086d8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3302      	adds	r3, #2
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b31      	cmp	r3, #49	@ 0x31
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	701a      	strb	r2, [r3, #0]
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 4130 	ldr.w	r4, [r3, #304]	@ 0x130
 800871e:	68b8      	ldr	r0, [r7, #8]
 8008720:	f7f7 fda6 	bl	8000270 <strlen>
 8008724:	4603      	mov	r3, r0
 8008726:	b299      	uxth	r1, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800872e:	461a      	mov	r2, r3
 8008730:	68b8      	ldr	r0, [r7, #8]
 8008732:	47a0      	blx	r4
 8008734:	4603      	mov	r3, r0
 8008736:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dd3e      	ble.n	80087bc <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f8d2 2338 	ldr.w	r2, [r2, #824]	@ 0x338
 800874a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
 8008752:	4603      	mov	r3, r0
 8008754:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8008756:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800875a:	2b00      	cmp	r3, #0
 800875c:	dd27      	ble.n	80087ae <AT_ExecuteCommand+0xaa>
 800875e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008766:	dc22      	bgt.n	80087ae <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8008768:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800876c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008770:	d105      	bne.n	800877e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8008772:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29b      	uxth	r3, r3
 800877c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800877e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800878a:	490f      	ldr	r1, [pc, #60]	@ (80087c8 <AT_ExecuteCommand+0xc4>)
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f002 ff79 	bl	800b684 <strstr>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e010      	b.n	80087be <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800879c:	490b      	ldr	r1, [pc, #44]	@ (80087cc <AT_ExecuteCommand+0xc8>)
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f002 ff70 	bl	800b684 <strstr>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80087aa:	2305      	movs	r3, #5
 80087ac:	e007      	b.n	80087be <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80087ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80087b2:	f113 0f04 	cmn.w	r3, #4
 80087b6:	d101      	bne.n	80087bc <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80087b8:	2306      	movs	r3, #6
 80087ba:	e000      	b.n	80087be <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80087bc:	2304      	movs	r3, #4
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd90      	pop	{r4, r7, pc}
 80087c6:	bf00      	nop
 80087c8:	0800dcd8 	.word	0x0800dcd8
 80087cc:	0800dce4 	.word	0x0800dce4

080087d0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 80087ea:	68b8      	ldr	r0, [r7, #8]
 80087ec:	f7f7 fd40 	bl	8000270 <strlen>
 80087f0:	4603      	mov	r3, r0
 80087f2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80087f4:	8a7b      	ldrh	r3, [r7, #18]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <AT_RequestSendData+0x32>
 80087fe:	2302      	movs	r3, #2
 8008800:	e053      	b.n	80088aa <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	f8d2 2338 	ldr.w	r2, [r2, #824]	@ 0x338
 800880e:	8a79      	ldrh	r1, [r7, #18]
 8008810:	68b8      	ldr	r0, [r7, #8]
 8008812:	4798      	blx	r3
 8008814:	4603      	mov	r3, r0
 8008816:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8008818:	8a3a      	ldrh	r2, [r7, #16]
 800881a:	8a7b      	ldrh	r3, [r7, #18]
 800881c:	429a      	cmp	r2, r3
 800881e:	d143      	bne.n	80088a8 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	f8d2 2338 	ldr.w	r2, [r2, #824]	@ 0x338
 800882c:	8879      	ldrh	r1, [r7, #2]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8008836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800883a:	887b      	ldrh	r3, [r7, #2]
 800883c:	429a      	cmp	r2, r3
 800883e:	d131      	bne.n	80088a4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	f8d2 2338 	ldr.w	r2, [r2, #824]	@ 0x338
 800884c:	2100      	movs	r1, #0
 800884e:	6a38      	ldr	r0, [r7, #32]
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
 8008854:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8008856:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	dd19      	ble.n	8008892 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800885e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008862:	6a3a      	ldr	r2, [r7, #32]
 8008864:	4413      	add	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800886a:	4912      	ldr	r1, [pc, #72]	@ (80088b4 <AT_RequestSendData+0xe4>)
 800886c:	6a38      	ldr	r0, [r7, #32]
 800886e:	f002 ff09 	bl	800b684 <strstr>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	e016      	b.n	80088aa <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800887c:	490e      	ldr	r1, [pc, #56]	@ (80088b8 <AT_RequestSendData+0xe8>)
 800887e:	6a38      	ldr	r0, [r7, #32]
 8008880:	f002 ff00 	bl	800b684 <strstr>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800888a:	2305      	movs	r3, #5
 800888c:	e00d      	b.n	80088aa <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800888e:	2302      	movs	r3, #2
 8008890:	e00b      	b.n	80088aa <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8008892:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008896:	f113 0f04 	cmn.w	r3, #4
 800889a:	d101      	bne.n	80088a0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800889c:	2306      	movs	r3, #6
 800889e:	e004      	b.n	80088aa <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80088a0:	2302      	movs	r3, #2
 80088a2:	e002      	b.n	80088aa <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80088a4:	2302      	movs	r3, #2
 80088a6:	e000      	b.n	80088aa <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80088a8:	2304      	movs	r3, #4
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	0800dcd8 	.word	0x0800dcd8
 80088b8:	0800dce4 	.word	0x0800dce4

080088bc <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80088d0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 4130 	ldr.w	r4, [r3, #304]	@ 0x130
 80088d8:	68b8      	ldr	r0, [r7, #8]
 80088da:	f7f7 fcc9 	bl	8000270 <strlen>
 80088de:	4603      	mov	r3, r0
 80088e0:	b299      	uxth	r1, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80088e8:	461a      	mov	r2, r3
 80088ea:	68b8      	ldr	r0, [r7, #8]
 80088ec:	47a0      	blx	r4
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dd6f      	ble.n	80089d4 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	f8d2 2338 	ldr.w	r2, [r2, #824]	@ 0x338
 8008900:	2100      	movs	r1, #0
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	4798      	blx	r3
 8008906:	4603      	mov	r3, r0
 8008908:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b0d      	cmp	r3, #13
 8008910:	d104      	bne.n	800891c <AT_RequestReceiveData+0x60>
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	3301      	adds	r3, #1
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b0a      	cmp	r3, #10
 800891a:	d001      	beq.n	8008920 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800891c:	2304      	movs	r3, #4
 800891e:	e05a      	b.n	80089d6 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	3b02      	subs	r3, #2
 8008924:	617b      	str	r3, [r7, #20]
    p+=2;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3302      	adds	r3, #2
 800892a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2b07      	cmp	r3, #7
 8008930:	d94a      	bls.n	80089c8 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8008932:	e002      	b.n	800893a <AT_RequestReceiveData+0x7e>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	3b01      	subs	r3, #1
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <AT_RequestReceiveData+0x92>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3b01      	subs	r3, #1
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4413      	add	r3, r2
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b15      	cmp	r3, #21
 800894c:	d0f2      	beq.n	8008934 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4413      	add	r3, r2
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	3b08      	subs	r3, #8
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4413      	add	r3, r2
 8008960:	491f      	ldr	r1, [pc, #124]	@ (80089e0 <AT_RequestReceiveData+0x124>)
 8008962:	4618      	mov	r0, r3
 8008964:	f002 fe8e 	bl	800b684 <strstr>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d016      	beq.n	800899c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b08      	subs	r3, #8
 8008974:	b29a      	uxth	r2, r3
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	887a      	ldrh	r2, [r7, #2]
 8008980:	429a      	cmp	r2, r3
 8008982:	d202      	bcs.n	800898a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8008984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008986:	887a      	ldrh	r2, [r7, #2]
 8008988:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	6939      	ldr	r1, [r7, #16]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f002 fed5 	bl	800b742 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	e01c      	b.n	80089d6 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	3b04      	subs	r3, #4
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4413      	add	r3, r2
 80089a4:	2204      	movs	r2, #4
 80089a6:	490f      	ldr	r1, [pc, #60]	@ (80089e4 <AT_RequestReceiveData+0x128>)
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fe81 	bl	800b6b0 <memcmp>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	2200      	movs	r2, #0
 80089b8:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80089ba:	2305      	movs	r3, #5
 80089bc:	e00b      	b.n	80089d6 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	2200      	movs	r2, #0
 80089c2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80089c4:	2305      	movs	r3, #5
 80089c6:	e006      	b.n	80089d6 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f113 0f04 	cmn.w	r3, #4
 80089ce:	d101      	bne.n	80089d4 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80089d0:	2306      	movs	r3, #6
 80089d2:	e000      	b.n	80089d6 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80089d4:	2304      	movs	r3, #4
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd90      	pop	{r4, r7, pc}
 80089de:	bf00      	nop
 80089e0:	0800dcd8 	.word	0x0800dcd8
 80089e4:	0800dcec 	.word	0x0800dcec

080089e8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80089f0:	2302      	movs	r3, #2
 80089f2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80089fa:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8008a04:	2000      	movs	r0, #0
 8008a06:	4798      	blx	r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d113      	bne.n	8008a36 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008a14:	461a      	mov	r2, r3
 8008a16:	490a      	ldr	r1, [pc, #40]	@ (8008a40 <ES_WIFI_Init+0x58>)
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fe73 	bl	8008704 <AT_ExecuteCommand>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff fd2b 	bl	800848c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	0800dcf4 	.word	0x0800dcf4

08008a44 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <ES_WIFI_RegisterBusIO+0x2c>
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <ES_WIFI_RegisterBusIO+0x2c>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <ES_WIFI_RegisterBusIO+0x2c>
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <ES_WIFI_RegisterBusIO+0x2c>
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8008a70:	2302      	movs	r3, #2
 8008a72:	e014      	b.n	8008a9e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_DeInit = IO_DeInit;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
  Obj->fops.IO_Send = IO_Send;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
  Obj->fops.IO_Receive = IO_Receive;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  Obj->fops.IO_Delay = IO_Delay;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

  return ES_WIFI_STATUS_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	4932      	ldr	r1, [pc, #200]	@ (8008b8c <ES_WIFI_Connect+0xe0>)
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 fc1b 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff fe13 	bl	8008704 <AT_ExecuteCommand>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d14b      	bne.n	8008b80 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	4927      	ldr	r1, [pc, #156]	@ (8008b90 <ES_WIFI_Connect+0xe4>)
 8008af2:	4618      	mov	r0, r3
 8008af4:	f002 fc04 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008b04:	461a      	mov	r2, r3
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fdfc 	bl	8008704 <AT_ExecuteCommand>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d134      	bne.n	8008b80 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	491b      	ldr	r1, [pc, #108]	@ (8008b94 <ES_WIFI_Connect+0xe8>)
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 fbe9 	bl	800b300 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff fde1 	bl	8008704 <AT_ExecuteCommand>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d119      	bne.n	8008b80 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008b52:	4911      	ldr	r1, [pc, #68]	@ (8008b98 <ES_WIFI_Connect+0xec>)
 8008b54:	4618      	mov	r0, r3
 8008b56:	f002 fbd3 	bl	800b300 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008b66:	461a      	mov	r2, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff fdcb 	bl	8008704 <AT_ExecuteCommand>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	0800dd0c 	.word	0x0800dd0c
 8008b90:	0800dd14 	.word	0x0800dd14
 8008b94:	0800dd1c 	.word	0x0800dd1c
 8008b98:	0800dd24 	.word	0x0800dd24

08008b9c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008baa:	4911      	ldr	r1, [pc, #68]	@ (8008bf0 <ES_WIFI_IsConnected+0x54>)
 8008bac:	4618      	mov	r0, r3
 8008bae:	f002 fba7 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fd9f 	bl	8008704 <AT_ExecuteCommand>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d108      	bne.n	8008be2 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	33e2      	adds	r3, #226	@ 0xe2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7ff fd7b 	bl	80086d8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	0800dd28 	.word	0x0800dd28

08008bf4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008c02:	4910      	ldr	r1, [pc, #64]	@ (8008c44 <ES_WIFI_GetNetworkSettings+0x50>)
 8008c04:	4618      	mov	r0, r3
 8008c06:	f002 fb7b 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008c16:	461a      	mov	r2, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fd73 	bl	8008704 <AT_ExecuteCommand>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d108      	bne.n	8008c3a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	338d      	adds	r3, #141	@ 0x8d
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7ff fc9f 	bl	8008578 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	0800dd30 	.word	0x0800dd30

08008c48 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008c58:	4912      	ldr	r1, [pc, #72]	@ (8008ca4 <ES_WIFI_GetMACAddress+0x5c>)
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 fb50 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fd48 	bl	8008704 <AT_ExecuteCommand>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10c      	bne.n	8008c98 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008c84:	3302      	adds	r3, #2
 8008c86:	4908      	ldr	r1, [pc, #32]	@ (8008ca8 <ES_WIFI_GetMACAddress+0x60>)
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f002 fc9f 	bl	800b5cc <strtok>
 8008c8e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	68b8      	ldr	r0, [r7, #8]
 8008c94:	f7ff fba3 	bl	80083de <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800dd8c 	.word	0x0800dd8c
 8008ca8:	0800dd90 	.word	0x0800dd90

08008cac <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008cac:	b590      	push	{r4, r7, lr}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <ES_WIFI_StartClientConnection+0x1e>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d105      	bne.n	8008cd6 <ES_WIFI_StartClientConnection+0x2a>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	885b      	ldrh	r3, [r3, #2]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <ES_WIFI_StartClientConnection+0x2a>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e0c1      	b.n	8008e5a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4960      	ldr	r1, [pc, #384]	@ (8008e64 <ES_WIFI_StartClientConnection+0x1b8>)
 8008ce4:	f002 fb0c 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fd04 	bl	8008704 <AT_ExecuteCommand>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d114      	bne.n	8008d30 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	4955      	ldr	r1, [pc, #340]	@ (8008e68 <ES_WIFI_StartClientConnection+0x1bc>)
 8008d14:	f002 faf4 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008d24:	461a      	mov	r2, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fcec 	bl	8008704 <AT_ExecuteCommand>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d114      	bne.n	8008d60 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	889b      	ldrh	r3, [r3, #4]
 8008d40:	461a      	mov	r2, r3
 8008d42:	494a      	ldr	r1, [pc, #296]	@ (8008e6c <ES_WIFI_StartClientConnection+0x1c0>)
 8008d44:	f002 fadc 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008d54:	461a      	mov	r2, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff fcd4 	bl	8008704 <AT_ExecuteCommand>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d11c      	bne.n	8008da0 <ES_WIFI_StartClientConnection+0xf4>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <ES_WIFI_StartClientConnection+0xca>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d114      	bne.n	8008da0 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	461a      	mov	r2, r3
 8008d82:	493b      	ldr	r1, [pc, #236]	@ (8008e70 <ES_WIFI_StartClientConnection+0x1c4>)
 8008d84:	f002 fabc 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008d94:	461a      	mov	r2, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fcb4 	bl	8008704 <AT_ExecuteCommand>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d128      	bne.n	8008df8 <ES_WIFI_StartClientConnection+0x14c>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <ES_WIFI_StartClientConnection+0x10a>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d120      	bne.n	8008df8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	799b      	ldrb	r3, [r3, #6]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	79db      	ldrb	r3, [r3, #7]
 8008dc6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8008dcc:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	9200      	str	r2, [sp, #0]
 8008dd6:	4623      	mov	r3, r4
 8008dd8:	460a      	mov	r2, r1
 8008dda:	4926      	ldr	r1, [pc, #152]	@ (8008e74 <ES_WIFI_StartClientConnection+0x1c8>)
 8008ddc:	f002 fa90 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008dec:	461a      	mov	r2, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff fc88 	bl	8008704 <AT_ExecuteCommand>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d116      	bne.n	8008e2c <ES_WIFI_StartClientConnection+0x180>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d112      	bne.n	8008e2c <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008e0c:	491a      	ldr	r1, [pc, #104]	@ (8008e78 <ES_WIFI_StartClientConnection+0x1cc>)
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f002 fa76 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008e20:	461a      	mov	r2, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fc6e 	bl	8008704 <AT_ExecuteCommand>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d112      	bne.n	8008e58 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008e38:	4910      	ldr	r1, [pc, #64]	@ (8008e7c <ES_WIFI_StartClientConnection+0x1d0>)
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f002 fa60 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff fc58 	bl	8008704 <AT_ExecuteCommand>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd90      	pop	{r4, r7, pc}
 8008e62:	bf00      	nop
 8008e64:	0800ddf4 	.word	0x0800ddf4
 8008e68:	0800ddfc 	.word	0x0800ddfc
 8008e6c:	0800de04 	.word	0x0800de04
 8008e70:	0800de0c 	.word	0x0800de0c
 8008e74:	0800de14 	.word	0x0800de14
 8008e78:	0800de24 	.word	0x0800de24
 8008e7c:	0800de2c 	.word	0x0800de2c

08008e80 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f503 709c 	add.w	r0, r3, #312	@ 0x138
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	461a      	mov	r2, r3
 8008e96:	4915      	ldr	r1, [pc, #84]	@ (8008eec <ES_WIFI_StopClientConnection+0x6c>)
 8008e98:	f002 fa32 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fc2a 	bl	8008704 <AT_ExecuteCommand>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d112      	bne.n	8008ee0 <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008ec0:	490b      	ldr	r1, [pc, #44]	@ (8008ef0 <ES_WIFI_StopClientConnection+0x70>)
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f002 fa1c 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff fc14 	bl	8008704 <AT_ExecuteCommand>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
  }
  UNLOCK_WIFI();
  return ret;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	0800ddf4 	.word	0x0800ddf4
 8008ef0:	0800de34 	.word	0x0800de34

08008ef4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	461a      	mov	r2, r3
 8008f00:	460b      	mov	r3, r1
 8008f02:	72fb      	strb	r3, [r7, #11]
 8008f04:	4613      	mov	r3, r2
 8008f06:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008f12:	2301      	movs	r3, #1
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	e001      	b.n	8008f1c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8008f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8008f1c:	893b      	ldrh	r3, [r7, #8]
 8008f1e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8008f22:	d302      	bcc.n	8008f2a <ES_WIFI_SendData+0x36>
 8008f24:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8008f28:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	893a      	ldrh	r2, [r7, #8]
 8008f2e:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008f36:	7afa      	ldrb	r2, [r7, #11]
 8008f38:	492d      	ldr	r1, [pc, #180]	@ (8008ff0 <ES_WIFI_SendData+0xfc>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 f9e0 	bl	800b300 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fbd8 	bl	8008704 <AT_ExecuteCommand>
 8008f54:	4603      	mov	r3, r0
 8008f56:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8008f58:	7cfb      	ldrb	r3, [r7, #19]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d13c      	bne.n	8008fd8 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	4923      	ldr	r1, [pc, #140]	@ (8008ff4 <ES_WIFI_SendData+0x100>)
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 f9c9 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fbc1 	bl	8008704 <AT_ExecuteCommand>
 8008f82:	4603      	mov	r3, r0
 8008f84:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8008f86:	7cfb      	ldrb	r3, [r7, #19]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d125      	bne.n	8008fd8 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008f92:	893a      	ldrh	r2, [r7, #8]
 8008f94:	4918      	ldr	r1, [pc, #96]	@ (8008ff8 <ES_WIFI_SendData+0x104>)
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 f9b2 	bl	800b300 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008fa8:	893a      	ldrh	r2, [r7, #8]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff fc0d 	bl	80087d0 <AT_RequestSendData>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8008fba:	7cfb      	ldrb	r3, [r7, #19]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008fc6:	490d      	ldr	r1, [pc, #52]	@ (8008ffc <ES_WIFI_SendData+0x108>)
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f002 fb5b 	bl	800b684 <strstr>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <ES_WIFI_SendData+0xe4>
        {
          DEBUG(("Send Data detect error %s\n", (char *)Obj->CmdData));
          ret = ES_WIFI_STATUS_ERROR;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8008fd8:	7cfb      	ldrb	r3, [r7, #19]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d102      	bne.n	8008fe4 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8008fe4:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	0800ddf4 	.word	0x0800ddf4
 8008ff4:	0800ded0 	.word	0x0800ded0
 8008ff8:	0800ded8 	.word	0x0800ded8
 8008ffc:	0800dee4 	.word	0x0800dee4

08009000 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	461a      	mov	r2, r3
 800900c:	460b      	mov	r3, r1
 800900e:	72fb      	strb	r3, [r7, #11]
 8009010:	4613      	mov	r3, r2
 8009012:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8009014:	2302      	movs	r3, #2
 8009016:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800901e:	2301      	movs	r3, #1
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	e001      	b.n	8009028 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8009028:	893b      	ldrh	r3, [r7, #8]
 800902a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800902e:	d862      	bhi.n	80090f6 <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009036:	7afa      	ldrb	r2, [r7, #11]
 8009038:	4931      	ldr	r1, [pc, #196]	@ (8009100 <ES_WIFI_ReceiveData+0x100>)
 800903a:	4618      	mov	r0, r3
 800903c:	f002 f960 	bl	800b300 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800904c:	461a      	mov	r2, r3
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff fb58 	bl	8008704 <AT_ExecuteCommand>
 8009054:	4603      	mov	r3, r0
 8009056:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8009058:	7cfb      	ldrb	r3, [r7, #19]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d146      	bne.n	80090ec <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009064:	893a      	ldrh	r2, [r7, #8]
 8009066:	4927      	ldr	r1, [pc, #156]	@ (8009104 <ES_WIFI_ReceiveData+0x104>)
 8009068:	4618      	mov	r0, r3
 800906a:	f002 f949 	bl	800b300 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800907a:	461a      	mov	r2, r3
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff fb41 	bl	8008704 <AT_ExecuteCommand>
 8009082:	4603      	mov	r3, r0
 8009084:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8009086:	7cfb      	ldrb	r3, [r7, #19]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d12b      	bne.n	80090e4 <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	491c      	ldr	r1, [pc, #112]	@ (8009108 <ES_WIFI_ReceiveData+0x108>)
 8009096:	4618      	mov	r0, r3
 8009098:	f002 f932 	bl	800b300 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80090a8:	461a      	mov	r2, r3
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff fb2a 	bl	8008704 <AT_ExecuteCommand>
 80090b0:	4603      	mov	r3, r0
 80090b2:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80090b4:	7cfb      	ldrb	r3, [r7, #19]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d11d      	bne.n	80090f6 <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80090c0:	4912      	ldr	r1, [pc, #72]	@ (800910c <ES_WIFI_ReceiveData+0x10c>)
 80090c2:	4618      	mov	r0, r3
 80090c4:	f002 f91c 	bl	800b300 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80090ce:	893a      	ldrh	r2, [r7, #8]
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	4613      	mov	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff fbef 	bl	80088bc <AT_RequestReceiveData>
 80090de:	4603      	mov	r3, r0
 80090e0:	74fb      	strb	r3, [r7, #19]
 80090e2:	e008      	b.n	80090f6 <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
        *Receivedlen = 0;
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	2200      	movs	r2, #0
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e004      	b.n	80090f6 <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
      issue15++;
 80090ec:	4b08      	ldr	r3, [pc, #32]	@ (8009110 <ES_WIFI_ReceiveData+0x110>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	4a07      	ldr	r2, [pc, #28]	@ (8009110 <ES_WIFI_ReceiveData+0x110>)
 80090f4:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 80090f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	0800ddf4 	.word	0x0800ddf4
 8009104:	0800deec 	.word	0x0800deec
 8009108:	0800def4 	.word	0x0800def4
 800910c:	0800defc 	.word	0x0800defc
 8009110:	20000564 	.word	0x20000564

08009114 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	@ 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800911c:	4b57      	ldr	r3, [pc, #348]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 800911e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009120:	4a56      	ldr	r2, [pc, #344]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 8009122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009126:	6593      	str	r3, [r2, #88]	@ 0x58
 8009128:	4b54      	ldr	r3, [pc, #336]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 800912a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009134:	4b51      	ldr	r3, [pc, #324]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 8009136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009138:	4a50      	ldr	r2, [pc, #320]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 800913a:	f043 0302 	orr.w	r3, r3, #2
 800913e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009140:	4b4e      	ldr	r3, [pc, #312]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 8009142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800914c:	4b4b      	ldr	r3, [pc, #300]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 800914e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009150:	4a4a      	ldr	r2, [pc, #296]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 8009152:	f043 0304 	orr.w	r3, r3, #4
 8009156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009158:	4b48      	ldr	r3, [pc, #288]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 800915a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009164:	4b45      	ldr	r3, [pc, #276]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 8009166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009168:	4a44      	ldr	r2, [pc, #272]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 800916a:	f043 0310 	orr.w	r3, r3, #16
 800916e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009170:	4b42      	ldr	r3, [pc, #264]	@ (800927c <SPI_WIFI_MspInit+0x168>)
 8009172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800917c:	2200      	movs	r2, #0
 800917e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009182:	483f      	ldr	r0, [pc, #252]	@ (8009280 <SPI_WIFI_MspInit+0x16c>)
 8009184:	f7fa fdfa 	bl	8003d7c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8009188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800918c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800918e:	2301      	movs	r3, #1
 8009190:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009192:	2300      	movs	r3, #0
 8009194:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009196:	2300      	movs	r3, #0
 8009198:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800919a:	f107 031c 	add.w	r3, r7, #28
 800919e:	4619      	mov	r1, r3
 80091a0:	4837      	ldr	r0, [pc, #220]	@ (8009280 <SPI_WIFI_MspInit+0x16c>)
 80091a2:	f7fa fb35 	bl	8003810 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80091a6:	2302      	movs	r3, #2
 80091a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80091aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80091ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80091b4:	2300      	movs	r3, #0
 80091b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80091b8:	f107 031c 	add.w	r3, r7, #28
 80091bc:	4619      	mov	r1, r3
 80091be:	4831      	ldr	r0, [pc, #196]	@ (8009284 <SPI_WIFI_MspInit+0x170>)
 80091c0:	f7fa fb26 	bl	8003810 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80091c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091c8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80091ca:	2301      	movs	r3, #1
 80091cc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80091d2:	2300      	movs	r3, #0
 80091d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80091da:	f107 031c 	add.w	r3, r7, #28
 80091de:	4619      	mov	r1, r3
 80091e0:	4828      	ldr	r0, [pc, #160]	@ (8009284 <SPI_WIFI_MspInit+0x170>)
 80091e2:	f7fa fb15 	bl	8003810 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80091e6:	2201      	movs	r2, #1
 80091e8:	2101      	movs	r1, #1
 80091ea:	4826      	ldr	r0, [pc, #152]	@ (8009284 <SPI_WIFI_MspInit+0x170>)
 80091ec:	f7fa fdc6 	bl	8003d7c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80091f0:	2301      	movs	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80091f4:	2301      	movs	r3, #1
 80091f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80091fc:	2301      	movs	r3, #1
 80091fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8009200:	f107 031c 	add.w	r3, r7, #28
 8009204:	4619      	mov	r1, r3
 8009206:	481f      	ldr	r0, [pc, #124]	@ (8009284 <SPI_WIFI_MspInit+0x170>)
 8009208:	f7fa fb02 	bl	8003810 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800920c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009210:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8009212:	2302      	movs	r3, #2
 8009214:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009216:	2300      	movs	r3, #0
 8009218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800921a:	2301      	movs	r3, #1
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800921e:	2306      	movs	r3, #6
 8009220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8009222:	f107 031c 	add.w	r3, r7, #28
 8009226:	4619      	mov	r1, r3
 8009228:	4817      	ldr	r0, [pc, #92]	@ (8009288 <SPI_WIFI_MspInit+0x174>)
 800922a:	f7fa faf1 	bl	8003810 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800922e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009232:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8009234:	2302      	movs	r3, #2
 8009236:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009238:	2300      	movs	r3, #0
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800923c:	2301      	movs	r3, #1
 800923e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009240:	2306      	movs	r3, #6
 8009242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8009244:	f107 031c 	add.w	r3, r7, #28
 8009248:	4619      	mov	r1, r3
 800924a:	480f      	ldr	r0, [pc, #60]	@ (8009288 <SPI_WIFI_MspInit+0x174>)
 800924c:	f7fa fae0 	bl	8003810 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8009250:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009254:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8009256:	2302      	movs	r3, #2
 8009258:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800925a:	2301      	movs	r3, #1
 800925c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800925e:	2301      	movs	r3, #1
 8009260:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009262:	2306      	movs	r3, #6
 8009264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8009266:	f107 031c 	add.w	r3, r7, #28
 800926a:	4619      	mov	r1, r3
 800926c:	4806      	ldr	r0, [pc, #24]	@ (8009288 <SPI_WIFI_MspInit+0x174>)
 800926e:	f7fa facf 	bl	8003810 <HAL_GPIO_Init>
}
 8009272:	bf00      	nop
 8009274:	3730      	adds	r7, #48	@ 0x30
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	40021000 	.word	0x40021000
 8009280:	48000400 	.word	0x48000400
 8009284:	48001000 	.word	0x48001000
 8009288:	48000800 	.word	0x48000800

0800928c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d145      	bne.n	800932c <SPI_WIFI_Init+0xa0>
  {
    hspi3.Instance               = SPI3;
 80092a0:	4b27      	ldr	r3, [pc, #156]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092a2:	4a28      	ldr	r2, [pc, #160]	@ (8009344 <SPI_WIFI_Init+0xb8>)
 80092a4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi3);
 80092a6:	4826      	ldr	r0, [pc, #152]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092a8:	f7ff ff34 	bl	8009114 <SPI_WIFI_MspInit>
  
    hspi3.Init.Mode              = SPI_MODE_MASTER;
 80092ac:	4b24      	ldr	r3, [pc, #144]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80092b2:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction         = SPI_DIRECTION_2LINES;
 80092b4:	4b22      	ldr	r3, [pc, #136]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize          = SPI_DATASIZE_16BIT;
 80092ba:	4b21      	ldr	r3, [pc, #132]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092bc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80092c0:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80092c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80092c8:	4b1d      	ldr	r3, [pc, #116]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS               = SPI_NSS_SOFT;
 80092ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092d4:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80092d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092d8:	2210      	movs	r2, #16
 80092da:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80092dc:	4b18      	ldr	r3, [pc, #96]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092de:	2200      	movs	r2, #0
 80092e0:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode            = SPI_TIMODE_DISABLE;
 80092e2:	4b17      	ldr	r3, [pc, #92]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi3.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80092e8:	4b15      	ldr	r3, [pc, #84]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi3.Init.CRCPolynomial     = 0;
 80092ee:	4b14      	ldr	r3, [pc, #80]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
    if(HAL_SPI_Init( &hspi3 ) != HAL_OK)
 80092f4:	4812      	ldr	r0, [pc, #72]	@ (8009340 <SPI_WIFI_Init+0xb4>)
 80092f6:	f7fc fef3 	bl	80060e0 <HAL_SPI_Init>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8009300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009304:	e018      	b.n	8009338 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8009306:	2200      	movs	r2, #0
 8009308:	2100      	movs	r1, #0
 800930a:	2007      	movs	r0, #7
 800930c:	f7fa f9fb 	bl	8003706 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8009310:	2007      	movs	r0, #7
 8009312:	f7fa fa14 	bl	800373e <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8009316:	2200      	movs	r2, #0
 8009318:	2100      	movs	r1, #0
 800931a:	2033      	movs	r0, #51	@ 0x33
 800931c:	f7fa f9f3 	bl	8003706 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8009320:	2033      	movs	r0, #51	@ 0x33
 8009322:	f7fa fa0c 	bl	800373e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8009326:	200a      	movs	r0, #10
 8009328:	f000 f9fe 	bl	8009728 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800932c:	f000 f80c 	bl	8009348 <SPI_WIFI_ResetModule>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]

  return rc;
 8009334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000568 	.word	0x20000568
 8009344:	40003c00 	.word	0x40003c00

08009348 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800934e:	f7fa f8ab 	bl	80034a8 <HAL_GetTick>
 8009352:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8009358:	2200      	movs	r2, #0
 800935a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800935e:	4830      	ldr	r0, [pc, #192]	@ (8009420 <SPI_WIFI_ResetModule+0xd8>)
 8009360:	f7fa fd0c 	bl	8003d7c <HAL_GPIO_WritePin>
 8009364:	200a      	movs	r0, #10
 8009366:	f7fa f8ab 	bl	80034c0 <HAL_Delay>
 800936a:	2201      	movs	r2, #1
 800936c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009370:	482b      	ldr	r0, [pc, #172]	@ (8009420 <SPI_WIFI_ResetModule+0xd8>)
 8009372:	f7fa fd03 	bl	8003d7c <HAL_GPIO_WritePin>
 8009376:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800937a:	f7fa f8a1 	bl	80034c0 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800937e:	2200      	movs	r2, #0
 8009380:	2101      	movs	r1, #1
 8009382:	4827      	ldr	r0, [pc, #156]	@ (8009420 <SPI_WIFI_ResetModule+0xd8>)
 8009384:	f7fa fcfa 	bl	8003d7c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009388:	200f      	movs	r0, #15
 800938a:	f000 f9cd 	bl	8009728 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800938e:	e020      	b.n	80093d2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 0xFFFF);
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	463a      	mov	r2, r7
 8009394:	18d1      	adds	r1, r2, r3
 8009396:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800939a:	2201      	movs	r2, #1
 800939c:	4821      	ldr	r0, [pc, #132]	@ (8009424 <SPI_WIFI_ResetModule+0xdc>)
 800939e:	f7fc ff6a 	bl	8006276 <HAL_SPI_Receive>
 80093a2:	4603      	mov	r3, r0
 80093a4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	3302      	adds	r3, #2
 80093aa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80093ac:	f7fa f87c 	bl	80034a8 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093ba:	d202      	bcs.n	80093c2 <SPI_WIFI_ResetModule+0x7a>
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d007      	beq.n	80093d2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80093c2:	2201      	movs	r2, #1
 80093c4:	2101      	movs	r1, #1
 80093c6:	4816      	ldr	r0, [pc, #88]	@ (8009420 <SPI_WIFI_ResetModule+0xd8>)
 80093c8:	f7fa fcd8 	bl	8003d7c <HAL_GPIO_WritePin>
      return -1;
 80093cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093d0:	e021      	b.n	8009416 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80093d2:	2102      	movs	r1, #2
 80093d4:	4812      	ldr	r0, [pc, #72]	@ (8009420 <SPI_WIFI_ResetModule+0xd8>)
 80093d6:	f7fa fcb9 	bl	8003d4c <HAL_GPIO_ReadPin>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d0d7      	beq.n	8009390 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80093e0:	2201      	movs	r2, #1
 80093e2:	2101      	movs	r1, #1
 80093e4:	480e      	ldr	r0, [pc, #56]	@ (8009420 <SPI_WIFI_ResetModule+0xd8>)
 80093e6:	f7fa fcc9 	bl	8003d7c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80093ea:	783b      	ldrb	r3, [r7, #0]
 80093ec:	2b15      	cmp	r3, #21
 80093ee:	d10e      	bne.n	800940e <SPI_WIFI_ResetModule+0xc6>
 80093f0:	787b      	ldrb	r3, [r7, #1]
 80093f2:	2b15      	cmp	r3, #21
 80093f4:	d10b      	bne.n	800940e <SPI_WIFI_ResetModule+0xc6>
 80093f6:	78bb      	ldrb	r3, [r7, #2]
 80093f8:	2b0d      	cmp	r3, #13
 80093fa:	d108      	bne.n	800940e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80093fc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80093fe:	2b0a      	cmp	r3, #10
 8009400:	d105      	bne.n	800940e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8009402:	793b      	ldrb	r3, [r7, #4]
 8009404:	2b3e      	cmp	r3, #62	@ 0x3e
 8009406:	d102      	bne.n	800940e <SPI_WIFI_ResetModule+0xc6>
 8009408:	797b      	ldrb	r3, [r7, #5]
 800940a:	2b20      	cmp	r3, #32
 800940c:	d002      	beq.n	8009414 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800940e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009412:	e000      	b.n	8009416 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	48001000 	.word	0x48001000
 8009424:	20000568 	.word	0x20000568

08009428 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 800942c:	4802      	ldr	r0, [pc, #8]	@ (8009438 <SPI_WIFI_DeInit+0x10>)
 800942e:	f7fc fefa 	bl	8006226 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000568 	.word	0x20000568

0800943c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8009444:	f7fa f830 	bl	80034a8 <HAL_GetTick>
 8009448:	4603      	mov	r3, r0
 800944a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800944c:	e00a      	b.n	8009464 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800944e:	f7fa f82b 	bl	80034a8 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	429a      	cmp	r2, r3
 800945c:	d902      	bls.n	8009464 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800945e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009462:	e007      	b.n	8009474 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8009464:	2102      	movs	r1, #2
 8009466:	4805      	ldr	r0, [pc, #20]	@ (800947c <wait_cmddata_rdy_high+0x40>)
 8009468:	f7fa fc70 	bl	8003d4c <HAL_GPIO_ReadPin>
 800946c:	4603      	mov	r3, r0
 800946e:	2b01      	cmp	r3, #1
 8009470:	d1ed      	bne.n	800944e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	48001000 	.word	0x48001000

08009480 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009488:	f7fa f80e 	bl	80034a8 <HAL_GetTick>
 800948c:	4603      	mov	r3, r0
 800948e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8009490:	e00a      	b.n	80094a8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009492:	f7fa f809 	bl	80034a8 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d902      	bls.n	80094a8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094a6:	e004      	b.n	80094b2 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <wait_cmddata_rdy_rising_event+0x3c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d0f0      	beq.n	8009492 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80094b0:	2300      	movs	r3, #0
#endif
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	200005d4 	.word	0x200005d4

080094c0 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80094c8:	f7f9 ffee 	bl	80034a8 <HAL_GetTick>
 80094cc:	4603      	mov	r3, r0
 80094ce:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80094d0:	e00a      	b.n	80094e8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80094d2:	f7f9 ffe9 	bl	80034a8 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d902      	bls.n	80094e8 <wait_spi_rx_event+0x28>
    {
      return -1;
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094e6:	e004      	b.n	80094f2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80094e8:	4b04      	ldr	r3, [pc, #16]	@ (80094fc <wait_spi_rx_event+0x3c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d0f0      	beq.n	80094d2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80094f0:	2300      	movs	r3, #0
#endif
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	200005cc 	.word	0x200005cc

08009500 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009508:	f7f9 ffce 	bl	80034a8 <HAL_GetTick>
 800950c:	4603      	mov	r3, r0
 800950e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8009510:	e00a      	b.n	8009528 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009512:	f7f9 ffc9 	bl	80034a8 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	1ad2      	subs	r2, r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d902      	bls.n	8009528 <wait_spi_tx_event+0x28>
    {
      return -1;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009526:	e004      	b.n	8009532 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8009528:	4b04      	ldr	r3, [pc, #16]	@ (800953c <wait_spi_tx_event+0x3c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d0f0      	beq.n	8009512 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8009530:	2300      	movs	r3, #0
#endif
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	200005d0 	.word	0x200005d0

08009540 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	460b      	mov	r3, r1
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8009552:	2201      	movs	r2, #1
 8009554:	2101      	movs	r1, #1
 8009556:	4834      	ldr	r0, [pc, #208]	@ (8009628 <SPI_WIFI_ReceiveData+0xe8>)
 8009558:	f7fa fc10 	bl	8003d7c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800955c:	2003      	movs	r0, #3
 800955e:	f000 f8e3 	bl	8009728 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff ff8b 	bl	8009480 <wait_cmddata_rdy_rising_event>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	da02      	bge.n	8009576 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8009570:	f06f 0302 	mvn.w	r3, #2
 8009574:	e054      	b.n	8009620 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009576:	2200      	movs	r2, #0
 8009578:	2101      	movs	r1, #1
 800957a:	482b      	ldr	r0, [pc, #172]	@ (8009628 <SPI_WIFI_ReceiveData+0xe8>)
 800957c:	f7fa fbfe 	bl	8003d7c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009580:	200f      	movs	r0, #15
 8009582:	f000 f8d1 	bl	8009728 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8009586:	e03d      	b.n	8009604 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8009588:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800958c:	897b      	ldrh	r3, [r7, #10]
 800958e:	429a      	cmp	r2, r3
 8009590:	db02      	blt.n	8009598 <SPI_WIFI_ReceiveData+0x58>
 8009592:	897b      	ldrh	r3, [r7, #10]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d13c      	bne.n	8009612 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8009598:	4b24      	ldr	r3, [pc, #144]	@ (800962c <SPI_WIFI_ReceiveData+0xec>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi3, tmp, 1) != HAL_OK) {
 800959e:	f107 0314 	add.w	r3, r7, #20
 80095a2:	2201      	movs	r2, #1
 80095a4:	4619      	mov	r1, r3
 80095a6:	4822      	ldr	r0, [pc, #136]	@ (8009630 <SPI_WIFI_ReceiveData+0xf0>)
 80095a8:	f7fd fa44 	bl	8006a34 <HAL_SPI_Receive_IT>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80095b2:	2201      	movs	r2, #1
 80095b4:	2101      	movs	r1, #1
 80095b6:	481c      	ldr	r0, [pc, #112]	@ (8009628 <SPI_WIFI_ReceiveData+0xe8>)
 80095b8:	f7fa fbe0 	bl	8003d7c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80095bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095c0:	e02e      	b.n	8009620 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff ff7b 	bl	80094c0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80095ca:	7d3a      	ldrb	r2, [r7, #20]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	7d7a      	ldrb	r2, [r7, #21]
 80095d6:	701a      	strb	r2, [r3, #0]
      length += 2;
 80095d8:	8afb      	ldrh	r3, [r7, #22]
 80095da:	3302      	adds	r3, #2
 80095dc:	b29b      	uxth	r3, r3
 80095de:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3302      	adds	r3, #2
 80095e4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80095e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80095ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ee:	db09      	blt.n	8009604 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80095f0:	2201      	movs	r2, #1
 80095f2:	2101      	movs	r1, #1
 80095f4:	480c      	ldr	r0, [pc, #48]	@ (8009628 <SPI_WIFI_ReceiveData+0xe8>)
 80095f6:	f7fa fbc1 	bl	8003d7c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80095fa:	f7ff fea5 	bl	8009348 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80095fe:	f06f 0303 	mvn.w	r3, #3
 8009602:	e00d      	b.n	8009620 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8009604:	2102      	movs	r1, #2
 8009606:	4808      	ldr	r0, [pc, #32]	@ (8009628 <SPI_WIFI_ReceiveData+0xe8>)
 8009608:	f7fa fba0 	bl	8003d4c <HAL_GPIO_ReadPin>
 800960c:	4603      	mov	r3, r0
 800960e:	2b01      	cmp	r3, #1
 8009610:	d0ba      	beq.n	8009588 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8009612:	2201      	movs	r2, #1
 8009614:	2101      	movs	r1, #1
 8009616:	4804      	ldr	r0, [pc, #16]	@ (8009628 <SPI_WIFI_ReceiveData+0xe8>)
 8009618:	f7fa fbb0 	bl	8003d7c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800961c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	48001000 	.word	0x48001000
 800962c:	200005cc 	.word	0x200005cc
 8009630:	20000568 	.word	0x20000568

08009634 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	460b      	mov	r3, r1
 800963e:	607a      	str	r2, [r7, #4]
 8009640:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff fef9 	bl	800943c <wait_cmddata_rdy_high>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	da02      	bge.n	8009656 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8009650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009654:	e04f      	b.n	80096f6 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8009656:	4b2a      	ldr	r3, [pc, #168]	@ (8009700 <SPI_WIFI_SendData+0xcc>)
 8009658:	2201      	movs	r2, #1
 800965a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800965c:	2200      	movs	r2, #0
 800965e:	2101      	movs	r1, #1
 8009660:	4828      	ldr	r0, [pc, #160]	@ (8009704 <SPI_WIFI_SendData+0xd0>)
 8009662:	f7fa fb8b 	bl	8003d7c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009666:	200f      	movs	r0, #15
 8009668:	f000 f85e 	bl	8009728 <SPI_WIFI_DelayUs>
  if (len > 1)
 800966c:	897b      	ldrh	r3, [r7, #10]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d919      	bls.n	80096a6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8009672:	4b25      	ldr	r3, [pc, #148]	@ (8009708 <SPI_WIFI_SendData+0xd4>)
 8009674:	2201      	movs	r2, #1
 8009676:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, (uint8_t *)pdata , len/2) != HAL_OK)
 8009678:	897b      	ldrh	r3, [r7, #10]
 800967a:	085b      	lsrs	r3, r3, #1
 800967c:	b29b      	uxth	r3, r3
 800967e:	461a      	mov	r2, r3
 8009680:	68f9      	ldr	r1, [r7, #12]
 8009682:	4822      	ldr	r0, [pc, #136]	@ (800970c <SPI_WIFI_SendData+0xd8>)
 8009684:	f7fd f94e 	bl	8006924 <HAL_SPI_Transmit_IT>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800968e:	2201      	movs	r2, #1
 8009690:	2101      	movs	r1, #1
 8009692:	481c      	ldr	r0, [pc, #112]	@ (8009704 <SPI_WIFI_SendData+0xd0>)
 8009694:	f7fa fb72 	bl	8003d7c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800969c:	e02b      	b.n	80096f6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff ff2d 	bl	8009500 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80096a6:	897b      	ldrh	r3, [r7, #10]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d020      	beq.n	80096f2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80096b0:	897b      	ldrh	r3, [r7, #10]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80096bc:	230a      	movs	r3, #10
 80096be:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80096c0:	4b11      	ldr	r3, [pc, #68]	@ (8009708 <SPI_WIFI_SendData+0xd4>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, Padding, 1) != HAL_OK)
 80096c6:	f107 0314 	add.w	r3, r7, #20
 80096ca:	2201      	movs	r2, #1
 80096cc:	4619      	mov	r1, r3
 80096ce:	480f      	ldr	r0, [pc, #60]	@ (800970c <SPI_WIFI_SendData+0xd8>)
 80096d0:	f7fd f928 	bl	8006924 <HAL_SPI_Transmit_IT>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80096da:	2201      	movs	r2, #1
 80096dc:	2101      	movs	r1, #1
 80096de:	4809      	ldr	r0, [pc, #36]	@ (8009704 <SPI_WIFI_SendData+0xd0>)
 80096e0:	f7fa fb4c 	bl	8003d7c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096e8:	e005      	b.n	80096f6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff ff07 	bl	8009500 <wait_spi_tx_event>
    
  }
  return len;
 80096f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	200005d4 	.word	0x200005d4
 8009704:	48001000 	.word	0x48001000
 8009708:	200005d0 	.word	0x200005d0
 800970c:	20000568 	.word	0x20000568

08009710 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7f9 fed1 	bl	80034c0 <HAL_Delay>
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8009738:	4b20      	ldr	r3, [pc, #128]	@ (80097bc <SPI_WIFI_DelayUs+0x94>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d122      	bne.n	8009786 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8009740:	4b1f      	ldr	r3, [pc, #124]	@ (80097c0 <SPI_WIFI_DelayUs+0x98>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1f      	ldr	r2, [pc, #124]	@ (80097c4 <SPI_WIFI_DelayUs+0x9c>)
 8009746:	fba2 2303 	umull	r2, r3, r2, r3
 800974a:	099b      	lsrs	r3, r3, #6
 800974c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8009756:	f7f9 fea7 	bl	80034a8 <HAL_GetTick>
 800975a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800975c:	e002      	b.n	8009764 <SPI_WIFI_DelayUs+0x3c>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	3b01      	subs	r3, #1
 8009762:	60bb      	str	r3, [r7, #8]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1f9      	bne.n	800975e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800976a:	f7f9 fe9d 	bl	80034a8 <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	4a11      	ldr	r2, [pc, #68]	@ (80097bc <SPI_WIFI_DelayUs+0x94>)
 8009776:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8009778:	4b10      	ldr	r3, [pc, #64]	@ (80097bc <SPI_WIFI_DelayUs+0x94>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <SPI_WIFI_DelayUs+0x5e>
 8009780:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <SPI_WIFI_DelayUs+0x94>)
 8009782:	2201      	movs	r2, #1
 8009784:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8009786:	4b0e      	ldr	r3, [pc, #56]	@ (80097c0 <SPI_WIFI_DelayUs+0x98>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a0f      	ldr	r2, [pc, #60]	@ (80097c8 <SPI_WIFI_DelayUs+0xa0>)
 800978c:	fba2 2303 	umull	r2, r3, r2, r3
 8009790:	0c9a      	lsrs	r2, r3, #18
 8009792:	4b0a      	ldr	r3, [pc, #40]	@ (80097bc <SPI_WIFI_DelayUs+0x94>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	fbb2 f3f3 	udiv	r3, r2, r3
 800979a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	fb02 f303 	mul.w	r3, r2, r3
 80097a4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80097a6:	e002      	b.n	80097ae <SPI_WIFI_DelayUs+0x86>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	60bb      	str	r3, [r7, #8]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1f9      	bne.n	80097a8 <SPI_WIFI_DelayUs+0x80>
  return;
 80097b4:	bf00      	nop
}
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200005d8 	.word	0x200005d8
 80097c0:	20000018 	.word	0x20000018
 80097c4:	10624dd3 	.word	0x10624dd3
 80097c8:	431bde83 	.word	0x431bde83

080097cc <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80097d4:	4b06      	ldr	r3, [pc, #24]	@ (80097f0 <HAL_SPI_RxCpltCallback+0x24>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80097dc:	4b04      	ldr	r3, [pc, #16]	@ (80097f0 <HAL_SPI_RxCpltCallback+0x24>)
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
  }
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	200005cc 	.word	0x200005cc

080097f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80097fc:	4b06      	ldr	r3, [pc, #24]	@ (8009818 <HAL_SPI_TxCpltCallback+0x24>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8009804:	4b04      	ldr	r3, [pc, #16]	@ (8009818 <HAL_SPI_TxCpltCallback+0x24>)
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]
  }
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	200005d0 	.word	0x200005d0

0800981c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8009820:	4b05      	ldr	r3, [pc, #20]	@ (8009838 <SPI_WIFI_ISR+0x1c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d102      	bne.n	800982e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8009828:	4b03      	ldr	r3, [pc, #12]	@ (8009838 <SPI_WIFI_ISR+0x1c>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]
   }
}
 800982e:	bf00      	nop
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	200005d4 	.word	0x200005d4

0800983c <max_3010x_write>:
int32_t heartRate; //heart rate value
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid

static void 
max_3010x_write(uint8_t Reg, uint8_t Value)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af04      	add	r7, sp, #16
 8009842:	4603      	mov	r3, r0
 8009844:	460a      	mov	r2, r1
 8009846:	71fb      	strb	r3, [r7, #7]
 8009848:	4613      	mov	r3, r2
 800984a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c1, MAX3010X_ADDR_WRITE, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1, 10);
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	b29a      	uxth	r2, r3
 8009850:	230a      	movs	r3, #10
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	2301      	movs	r3, #1
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	1dbb      	adds	r3, r7, #6
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	2301      	movs	r3, #1
 800985e:	21ae      	movs	r1, #174	@ 0xae
 8009860:	4803      	ldr	r0, [pc, #12]	@ (8009870 <max_3010x_write+0x34>)
 8009862:	f7fa fb85 	bl	8003f70 <HAL_I2C_Mem_Write>
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000414 	.word	0x20000414

08009874 <max_3010x_read>:

static uint8_t 
max_3010x_read(uint8_t Reg)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af04      	add	r7, sp, #16
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
  uint8_t read_value = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Mem_Read(&hi2c1, MAX3010X_ADDR_READ, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 10);
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	b29a      	uxth	r2, r3
 8009886:	230a      	movs	r3, #10
 8009888:	9302      	str	r3, [sp, #8]
 800988a:	2301      	movs	r3, #1
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f107 030f 	add.w	r3, r7, #15
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	2301      	movs	r3, #1
 8009896:	21af      	movs	r1, #175	@ 0xaf
 8009898:	4803      	ldr	r0, [pc, #12]	@ (80098a8 <max_3010x_read+0x34>)
 800989a:	f7fa fc7d 	bl	8004198 <HAL_I2C_Mem_Read>

  return read_value;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20000414 	.word	0x20000414

080098ac <max_3010x_read_multiple>:

static void 
max_3010x_read_multiple(uint8_t Reg, size_t count, uint8_t *buffer)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af04      	add	r7, sp, #16
 80098b2:	4603      	mov	r3, r0
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(&hi2c1, MAX3010X_ADDR_READ, Reg, I2C_MEMADD_SIZE_8BIT, buffer, count, 30);
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	211e      	movs	r1, #30
 80098c4:	9102      	str	r1, [sp, #8]
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	2301      	movs	r3, #1
 80098ce:	21af      	movs	r1, #175	@ 0xaf
 80098d0:	4803      	ldr	r0, [pc, #12]	@ (80098e0 <max_3010x_read_multiple+0x34>)
 80098d2:	f7fa fc61 	bl	8004198 <HAL_I2C_Mem_Read>
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000414 	.word	0x20000414

080098e4 <max3010x_init>:

int
max3010x_init()
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
  uint8_t partId = max_3010x_read(RES_PART_ID);
 80098ea:	20ff      	movs	r0, #255	@ 0xff
 80098ec:	f7ff ffc2 	bl	8009874 <max_3010x_read>
 80098f0:	4603      	mov	r3, r0
 80098f2:	71fb      	strb	r3, [r7, #7]
  if (partId != 0x15 // MAX30105
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b15      	cmp	r3, #21
 80098f8:	d007      	beq.n	800990a <max3010x_init+0x26>
  )
  {
#ifdef MAX3010X_DEBUG
    printf("max3010x_init: invalid id %02x\n", partId);
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	4619      	mov	r1, r3
 80098fe:	4828      	ldr	r0, [pc, #160]	@ (80099a0 <max3010x_init+0xbc>)
 8009900:	f001 fde0 	bl	800b4c4 <iprintf>
    return -1;
 8009904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009908:	e045      	b.n	8009996 <max3010x_init+0xb2>
#endif // MAX3010X_DEBUG
  }
  max_3010x_write(RES_MODE_CONFIGURATION, 0x40); // reset
 800990a:	2140      	movs	r1, #64	@ 0x40
 800990c:	2009      	movs	r0, #9
 800990e:	f7ff ff95 	bl	800983c <max_3010x_write>
  while (max_3010x_read(RES_MODE_CONFIGURATION) & 0x40);
 8009912:	bf00      	nop
 8009914:	2009      	movs	r0, #9
 8009916:	f7ff ffad 	bl	8009874 <max_3010x_read>
 800991a:	4603      	mov	r3, r0
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1f7      	bne.n	8009914 <max3010x_init+0x30>

  max3010x_getStatus();
 8009924:	f000 f905 	bl	8009b32 <max3010x_getStatus>

  max_3010x_write(RES_INTERRUPT_ENABLE_1, 0x40);
 8009928:	2140      	movs	r1, #64	@ 0x40
 800992a:	2002      	movs	r0, #2
 800992c:	f7ff ff86 	bl	800983c <max_3010x_write>
  bufferTotal = 0;
 8009930:	4b1c      	ldr	r3, [pc, #112]	@ (80099a4 <max3010x_init+0xc0>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
  bufferCurrent = 0;
 8009936:	4b1c      	ldr	r3, [pc, #112]	@ (80099a8 <max3010x_init+0xc4>)
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]
  
  max_3010x_write(RES_SPO2_CONFIGURATION, 0x25);
 800993c:	2125      	movs	r1, #37	@ 0x25
 800993e:	200a      	movs	r0, #10
 8009940:	f7ff ff7c 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_LED_PULSE_AMPLITUDE_1, 0x0A); // red
 8009944:	210a      	movs	r1, #10
 8009946:	200c      	movs	r0, #12
 8009948:	f7ff ff78 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_LED_PULSE_AMPLITUDE_2, 0x1F); // IR
 800994c:	211f      	movs	r1, #31
 800994e:	200d      	movs	r0, #13
 8009950:	f7ff ff74 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_LED_PULSE_AMPLITUDE_3, 0x00); // green
 8009954:	2100      	movs	r1, #0
 8009956:	200e      	movs	r0, #14
 8009958:	f7ff ff70 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_PROXIMITY_MODE_LED_PULSE_AMPLITUDE, 0x00);
 800995c:	2100      	movs	r1, #0
 800995e:	2010      	movs	r0, #16
 8009960:	f7ff ff6c 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_FIFO_CONFIGURATION, (0x2 << 5) | 0x10);
 8009964:	2150      	movs	r1, #80	@ 0x50
 8009966:	2008      	movs	r0, #8
 8009968:	f7ff ff68 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_DIE_TEMPERATURE_CONFIG, 0x01);
 800996c:	2101      	movs	r1, #1
 800996e:	2021      	movs	r0, #33	@ 0x21
 8009970:	f7ff ff64 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_MODE_CONFIGURATION, 0x03);
 8009974:	2103      	movs	r1, #3
 8009976:	2009      	movs	r0, #9
 8009978:	f7ff ff60 	bl	800983c <max_3010x_write>
  
  max_3010x_write(RES_FIFO_WRITE_POINTER, 0x00);
 800997c:	2100      	movs	r1, #0
 800997e:	2004      	movs	r0, #4
 8009980:	f7ff ff5c 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_OVERFLOW_COUNTER, 0x00);
 8009984:	2100      	movs	r1, #0
 8009986:	2005      	movs	r0, #5
 8009988:	f7ff ff58 	bl	800983c <max_3010x_write>
  max_3010x_write(RES_FIFO_READ_POINTER, 0x00);
 800998c:	2100      	movs	r1, #0
 800998e:	2006      	movs	r0, #6
 8009990:	f7ff ff54 	bl	800983c <max_3010x_write>
  return 0;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	0800df3c 	.word	0x0800df3c
 80099a4:	20000a90 	.word	0x20000a90
 80099a8:	20000a8c 	.word	0x20000a8c

080099ac <max3010x_getUnreadSampleCount>:

uint8_t max3010x_getUnreadSampleCount()
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
    uint8_t wr = 0, rd = 0, ovf = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	71fb      	strb	r3, [r7, #7]
 80099b6:	2300      	movs	r3, #0
 80099b8:	71bb      	strb	r3, [r7, #6]
 80099ba:	2300      	movs	r3, #0
 80099bc:	717b      	strb	r3, [r7, #5]
    wr = max_3010x_read(RES_FIFO_WRITE_POINTER);
 80099be:	2004      	movs	r0, #4
 80099c0:	f7ff ff58 	bl	8009874 <max_3010x_read>
 80099c4:	4603      	mov	r3, r0
 80099c6:	71fb      	strb	r3, [r7, #7]
    rd = max_3010x_read(RES_FIFO_READ_POINTER);
 80099c8:	2006      	movs	r0, #6
 80099ca:	f7ff ff53 	bl	8009874 <max_3010x_read>
 80099ce:	4603      	mov	r3, r0
 80099d0:	71bb      	strb	r3, [r7, #6]
    ovf = max_3010x_read(RES_OVERFLOW_COUNTER);
 80099d2:	2005      	movs	r0, #5
 80099d4:	f7ff ff4e 	bl	8009874 <max_3010x_read>
 80099d8:	4603      	mov	r3, r0
 80099da:	717b      	strb	r3, [r7, #5]
  
    if (ovf > 0) {
 80099dc:	797b      	ldrb	r3, [r7, #5]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <max3010x_getUnreadSampleCount+0x4c>
      max3010x_getFIFO(NULL, 32);
 80099e2:	2120      	movs	r1, #32
 80099e4:	2000      	movs	r0, #0
 80099e6:	f000 f81d 	bl	8009a24 <max3010x_getFIFO>
      //max_3010x_write(RES_OVERFLOW_COUNTER, 0x00);
      printf("max3010x: overflow (%d)\n", ovf);
 80099ea:	797b      	ldrb	r3, [r7, #5]
 80099ec:	4619      	mov	r1, r3
 80099ee:	480c      	ldr	r0, [pc, #48]	@ (8009a20 <max3010x_getUnreadSampleCount+0x74>)
 80099f0:	f001 fd68 	bl	800b4c4 <iprintf>
      return 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	e00f      	b.n	8009a18 <max3010x_getUnreadSampleCount+0x6c>
    }
  
    if ((wr - rd) < 0)
 80099f8:	79fa      	ldrb	r2, [r7, #7]
 80099fa:	79bb      	ldrb	r3, [r7, #6]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da06      	bge.n	8009a10 <max3010x_getUnreadSampleCount+0x64>
        return wr - rd + 32;
 8009a02:	79fa      	ldrb	r2, [r7, #7]
 8009a04:	79bb      	ldrb	r3, [r7, #6]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	3320      	adds	r3, #32
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	e003      	b.n	8009a18 <max3010x_getUnreadSampleCount+0x6c>
    else
        return wr - rd;
 8009a10:	79fa      	ldrb	r2, [r7, #7]
 8009a12:	79bb      	ldrb	r3, [r7, #6]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	b2db      	uxtb	r3, r3
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	0800df5c 	.word	0x0800df5c

08009a24 <max3010x_getFIFO>:

void max3010x_getFIFO(SAMPLE *data, uint8_t sampleCount)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b0b2      	sub	sp, #200	@ 0xc8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
    uint8_t dataTemp[31 * 6];
    if (sampleCount > 31)
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	2b1f      	cmp	r3, #31
 8009a34:	d901      	bls.n	8009a3a <max3010x_getFIFO+0x16>
        sampleCount = 31;
 8009a36:	231f      	movs	r3, #31
 8009a38:	70fb      	strb	r3, [r7, #3]
    max_3010x_read_multiple(RES_FIFO_DATA_REGISTER, 6 * sampleCount,
 8009a3a:	78fa      	ldrb	r2, [r7, #3]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	4413      	add	r3, r2
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	4619      	mov	r1, r3
 8009a46:	f107 030c 	add.w	r3, r7, #12
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	2007      	movs	r0, #7
 8009a4e:	f7ff ff2d 	bl	80098ac <max_3010x_read_multiple>
      dataTemp);
    
    if (data) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d068      	beq.n	8009b2a <max3010x_getFIFO+0x106>
      for (uint8_t i = 0; i < sampleCount; i++)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8009a5e:	e05f      	b.n	8009b20 <max3010x_getFIFO+0xfc>
      {
          data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 8009a60:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009a64:	4613      	mov	r3, r2
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	4413      	add	r3, r2
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	33c8      	adds	r3, #200	@ 0xc8
 8009a6e:	443b      	add	r3, r7
 8009a70:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8009a74:	0419      	lsls	r1, r3, #16
 8009a76:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	3301      	adds	r3, #1
 8009a84:	33c8      	adds	r3, #200	@ 0xc8
 8009a86:	443b      	add	r3, r7
 8009a88:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	4319      	orrs	r1, r3
 8009a90:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	33c8      	adds	r3, #200	@ 0xc8
 8009aa0:	443b      	add	r3, r7
 8009aa2:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8009aa6:	ea41 0203 	orr.w	r2, r1, r3
 8009aaa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	440b      	add	r3, r1
 8009ab4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009ab8:	601a      	str	r2, [r3, #0]
          data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 8009aba:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009abe:	4613      	mov	r3, r2
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	4413      	add	r3, r2
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	3303      	adds	r3, #3
 8009ac8:	33c8      	adds	r3, #200	@ 0xc8
 8009aca:	443b      	add	r3, r7
 8009acc:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8009ad0:	0419      	lsls	r1, r3, #16
 8009ad2:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	3304      	adds	r3, #4
 8009ae0:	33c8      	adds	r3, #200	@ 0xc8
 8009ae2:	443b      	add	r3, r7
 8009ae4:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	4319      	orrs	r1, r3
 8009aec:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009af0:	4613      	mov	r3, r2
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	4413      	add	r3, r2
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	3305      	adds	r3, #5
 8009afa:	33c8      	adds	r3, #200	@ 0xc8
 8009afc:	443b      	add	r3, r7
 8009afe:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8009b02:	ea41 0203 	orr.w	r2, r1, r3
 8009b06:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	6879      	ldr	r1, [r7, #4]
 8009b0e:	440b      	add	r3, r1
 8009b10:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009b14:	605a      	str	r2, [r3, #4]
      for (uint8_t i = 0; i < sampleCount; i++)
 8009b16:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8009b20:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d39a      	bcc.n	8009a60 <max3010x_getFIFO+0x3c>
      }
    }
}
 8009b2a:	bf00      	nop
 8009b2c:	37c8      	adds	r7, #200	@ 0xc8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <max3010x_getStatus>:

uint8_t max3010x_getStatus()
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
    uint8_t data = 0, dataTemp = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	71fb      	strb	r3, [r7, #7]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	71bb      	strb	r3, [r7, #6]
    data = max_3010x_read(RES_INTERRUPT_STATUS_1);
 8009b40:	2000      	movs	r0, #0
 8009b42:	f7ff fe97 	bl	8009874 <max_3010x_read>
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
    dataTemp = max_3010x_read(RES_INTERRUPT_STATUS_2);
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	f7ff fe92 	bl	8009874 <max_3010x_read>
 8009b50:	4603      	mov	r3, r0
 8009b52:	71bb      	strb	r3, [r7, #6]
    return data | dataTemp;
 8009b54:	79fa      	ldrb	r2, [r7, #7]
 8009b56:	79bb      	ldrb	r3, [r7, #6]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	b2db      	uxtb	r3, r3
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b0b0      	sub	sp, #192	@ 0xc0
 8009b68:	af04      	add	r7, sp, #16
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;


  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b7e:	e010      	b.n	8009ba2 <maxim_heart_rate_and_oxygen_saturation+0x3e>
  {
	  un_ir_mean += pun_ir_buffer[k] ;
 8009b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b92:	4413      	add	r3, r2
 8009b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 8009b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	dbe9      	blt.n	8009b80 <maxim_heart_rate_and_oxygen_saturation+0x1c>
  }
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bc0:	e014      	b.n	8009bec <maxim_heart_rate_and_oxygen_saturation+0x88>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 8009bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4ab4      	ldr	r2, [pc, #720]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 8009be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009be6:	3301      	adds	r3, #1
 8009be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	dbe5      	blt.n	8009bc2 <maxim_heart_rate_and_oxygen_saturation+0x5e>
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bfc:	e028      	b.n	8009c50 <maxim_heart_rate_and_oxygen_saturation+0xec>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 8009bfe:	4aab      	ldr	r2, [pc, #684]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	49a7      	ldr	r1, [pc, #668]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c14:	441a      	add	r2, r3
 8009c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c1a:	3302      	adds	r3, #2
 8009c1c:	49a3      	ldr	r1, [pc, #652]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009c1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c22:	441a      	add	r2, r3
 8009c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c28:	3303      	adds	r3, #3
 8009c2a:	49a0      	ldr	r1, [pc, #640]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c30:	4413      	add	r3, r2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da00      	bge.n	8009c38 <maxim_heart_rate_and_oxygen_saturation+0xd4>
 8009c36:	3303      	adds	r3, #3
 8009c38:	109b      	asrs	r3, r3, #2
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4a9b      	ldr	r2, [pc, #620]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009c3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8009c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c54:	2b5f      	cmp	r3, #95	@ 0x5f
 8009c56:	ddd2      	ble.n	8009bfe <maxim_heart_rate_and_oxygen_saturation+0x9a>
  }
  // calculate threshold  
  n_th1=0; 
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c64:	e00e      	b.n	8009c84 <maxim_heart_rate_and_oxygen_saturation+0x120>
    n_th1 +=  an_x[k];
 8009c66:	4a91      	ldr	r2, [pc, #580]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c70:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8009c74:	4413      	add	r3, r2
 8009c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8009c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c88:	2b63      	cmp	r3, #99	@ 0x63
 8009c8a:	ddec      	ble.n	8009c66 <maxim_heart_rate_and_oxygen_saturation+0x102>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 8009c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c90:	4a87      	ldr	r2, [pc, #540]	@ (8009eb0 <maxim_heart_rate_and_oxygen_saturation+0x34c>)
 8009c92:	fb82 1203 	smull	r1, r2, r2, r3
 8009c96:	1152      	asrs	r2, r2, #5
 8009c98:	17db      	asrs	r3, r3, #31
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 8009ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ca4:	2b1d      	cmp	r3, #29
 8009ca6:	dc02      	bgt.n	8009cae <maxim_heart_rate_and_oxygen_saturation+0x14a>
 8009ca8:	231e      	movs	r3, #30
 8009caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 8009cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cb2:	2b3c      	cmp	r3, #60	@ 0x3c
 8009cb4:	dd02      	ble.n	8009cbc <maxim_heart_rate_and_oxygen_saturation+0x158>
 8009cb6:	233c      	movs	r3, #60	@ 0x3c
 8009cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009cc2:	e00c      	b.n	8009cde <maxim_heart_rate_and_oxygen_saturation+0x17a>
 8009cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	33b0      	adds	r3, #176	@ 0xb0
 8009ccc:	443b      	add	r3, r7
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f843 2c88 	str.w	r2, [r3, #-136]
 8009cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cd8:	3301      	adds	r3, #1
 8009cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ce2:	2b0e      	cmp	r3, #14
 8009ce4:	ddee      	ble.n	8009cc4 <maxim_heart_rate_and_oxygen_saturation+0x160>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 8009ce6:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8009cea:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8009cee:	230f      	movs	r3, #15
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	2304      	movs	r3, #4
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2364      	movs	r3, #100	@ 0x64
 8009cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009d00:	f000 fa36 	bl	800a170 <maxim_find_peaks>
  n_peak_interval_sum =0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 8009d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	dd38      	ble.n	8009d82 <maxim_heart_rate_and_oxygen_saturation+0x21e>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d16:	e019      	b.n	8009d4c <maxim_heart_rate_and_oxygen_saturation+0x1e8>
 8009d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	33b0      	adds	r3, #176	@ 0xb0
 8009d20:	443b      	add	r3, r7
 8009d22:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8009d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	33b0      	adds	r3, #176	@ 0xb0
 8009d30:	443b      	add	r3, r7
 8009d32:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d46:	3301      	adds	r3, #1
 8009d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d52:	429a      	cmp	r2, r3
 8009d54:	dbe0      	blt.n	8009d18 <maxim_heart_rate_and_oxygen_saturation+0x1b4>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 8009d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FS*60)/ n_peak_interval_sum );
 8009d66:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d6e:	fb92 f2f3 	sdiv	r2, r2, r3
 8009d72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d76:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8009d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e007      	b.n	8009d92 <maxim_heart_rate_and_oxygen_saturation+0x22e>
  }
  else  { 
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 8009d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d86:	4a4b      	ldr	r2, [pc, #300]	@ (8009eb4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8009d88:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8009d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8009d92:	2300      	movs	r3, #0
 8009d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d98:	e01c      	b.n	8009dd4 <maxim_heart_rate_and_oxygen_saturation+0x270>
      an_x[k] =  pun_ir_buffer[k] ; 
 8009d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	4a40      	ldr	r2, [pc, #256]	@ (8009eac <maxim_heart_rate_and_oxygen_saturation+0x348>)
 8009daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 8009db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4413      	add	r3, r2
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4a3d      	ldr	r2, [pc, #244]	@ (8009eb8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8009dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8009dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009dce:	3301      	adds	r3, #1
 8009dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009dd4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	dbdd      	blt.n	8009d9a <maxim_heart_rate_and_oxygen_saturation+0x236>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks; 
 8009dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  
  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
 8009de4:	2300      	movs	r3, #0
 8009de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0; 
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009df6:	e00c      	b.n	8009e12 <maxim_heart_rate_and_oxygen_saturation+0x2ae>
 8009df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	33b0      	adds	r3, #176	@ 0xb0
 8009e00:	443b      	add	r3, r7
 8009e02:	2200      	movs	r2, #0
 8009e04:	f843 2c9c 	str.w	r2, [r3, #-156]
 8009e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	ddee      	ble.n	8009df8 <maxim_heart_rate_and_oxygen_saturation+0x294>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e20:	e015      	b.n	8009e4e <maxim_heart_rate_and_oxygen_saturation+0x2ea>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 8009e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	33b0      	adds	r3, #176	@ 0xb0
 8009e2a:	443b      	add	r3, r7
 8009e2c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009e30:	2b64      	cmp	r3, #100	@ 0x64
 8009e32:	dd07      	ble.n	8009e44 <maxim_heart_rate_and_oxygen_saturation+0x2e0>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	4a1f      	ldr	r2, [pc, #124]	@ (8009eb4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8009e38:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0; 
 8009e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
 8009e42:	e189      	b.n	800a158 <maxim_heart_rate_and_oxygen_saturation+0x5f4>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8009e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e48:	3301      	adds	r3, #1
 8009e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e56:	429a      	cmp	r2, r3
 8009e58:	dbe3      	blt.n	8009e22 <maxim_heart_rate_and_oxygen_saturation+0x2be>
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e60:	e129      	b.n	800a0b6 <maxim_heart_rate_and_oxygen_saturation+0x552>
    n_y_dc_max= -16777216 ; 
 8009e62:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8009e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216; 
 8009e6a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8009e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 8009e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e76:	3301      	adds	r3, #1
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	33b0      	adds	r3, #176	@ 0xb0
 8009e7c:	443b      	add	r3, r7
 8009e7e:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8009e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	33b0      	adds	r3, #176	@ 0xb0
 8009e8a:	443b      	add	r3, r7
 8009e8c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	f340 810a 	ble.w	800a0ac <maxim_heart_rate_and_oxygen_saturation+0x548>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8009e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	33b0      	adds	r3, #176	@ 0xb0
 8009ea0:	443b      	add	r3, r7
 8009ea2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009eaa:	e034      	b.n	8009f16 <maxim_heart_rate_and_oxygen_saturation+0x3b2>
 8009eac:	200005dc 	.word	0x200005dc
 8009eb0:	51eb851f 	.word	0x51eb851f
 8009eb4:	fffffc19 	.word	0xfffffc19
 8009eb8:	2000076c 	.word	0x2000076c
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 8009ebc:	4aa8      	ldr	r2, [pc, #672]	@ (800a160 <maxim_heart_rate_and_oxygen_saturation+0x5fc>)
 8009ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ec6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	da0a      	bge.n	8009ee4 <maxim_heart_rate_and_oxygen_saturation+0x380>
 8009ece:	4aa4      	ldr	r2, [pc, #656]	@ (800a160 <maxim_heart_rate_and_oxygen_saturation+0x5fc>)
 8009ed0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ed8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8009ee4:	4a9f      	ldr	r2, [pc, #636]	@ (800a164 <maxim_heart_rate_and_oxygen_saturation+0x600>)
 8009ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	da0a      	bge.n	8009f0c <maxim_heart_rate_and_oxygen_saturation+0x3a8>
 8009ef6:	4a9b      	ldr	r2, [pc, #620]	@ (800a164 <maxim_heart_rate_and_oxygen_saturation+0x600>)
 8009ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8009f0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f10:	3301      	adds	r3, #1
 8009f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	33b0      	adds	r3, #176	@ 0xb0
 8009f20:	443b      	add	r3, r7
 8009f22:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009f26:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	dbc6      	blt.n	8009ebc <maxim_heart_rate_and_oxygen_saturation+0x358>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8009f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f32:	3301      	adds	r3, #1
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	33b0      	adds	r3, #176	@ 0xb0
 8009f38:	443b      	add	r3, r7
 8009f3a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009f3e:	4a89      	ldr	r2, [pc, #548]	@ (800a164 <maxim_heart_rate_and_oxygen_saturation+0x600>)
 8009f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	33b0      	adds	r3, #176	@ 0xb0
 8009f4c:	443b      	add	r3, r7
 8009f4e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009f52:	4984      	ldr	r1, [pc, #528]	@ (800a164 <maxim_heart_rate_and_oxygen_saturation+0x600>)
 8009f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f58:	1ad2      	subs	r2, r2, r3
 8009f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	33b0      	adds	r3, #176	@ 0xb0
 8009f62:	443b      	add	r3, r7
 8009f64:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009f68:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8009f6c:	1acb      	subs	r3, r1, r3
 8009f6e:	fb02 f303 	mul.w	r3, r2, r3
 8009f72:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 8009f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	33b0      	adds	r3, #176	@ 0xb0
 8009f7c:	443b      	add	r3, r7
 8009f7e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009f82:	4a78      	ldr	r2, [pc, #480]	@ (800a164 <maxim_heart_rate_and_oxygen_saturation+0x600>)
 8009f84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	33b0      	adds	r3, #176	@ 0xb0
 8009f92:	443b      	add	r3, r7
 8009f94:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8009f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	33b0      	adds	r3, #176	@ 0xb0
 8009fa0:	443b      	add	r3, r7
 8009fa2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009fa6:	1acb      	subs	r3, r1, r3
 8009fa8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009faa:	fb91 f3f3 	sdiv	r3, r1, r3
 8009fae:	4413      	add	r3, r2
 8009fb0:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8009fb2:	4a6c      	ldr	r2, [pc, #432]	@ (800a164 <maxim_heart_rate_and_oxygen_saturation+0x600>)
 8009fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8009fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	33b0      	adds	r3, #176	@ 0xb0
 8009fcc:	443b      	add	r3, r7
 8009fce:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009fd2:	4a63      	ldr	r2, [pc, #396]	@ (800a160 <maxim_heart_rate_and_oxygen_saturation+0x5fc>)
 8009fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	33b0      	adds	r3, #176	@ 0xb0
 8009fe0:	443b      	add	r3, r7
 8009fe2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009fe6:	495e      	ldr	r1, [pc, #376]	@ (800a160 <maxim_heart_rate_and_oxygen_saturation+0x5fc>)
 8009fe8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009fec:	1ad2      	subs	r2, r2, r3
 8009fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	33b0      	adds	r3, #176	@ 0xb0
 8009ff6:	443b      	add	r3, r7
 8009ff8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009ffc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800a000:	1acb      	subs	r3, r1, r3
 800a002:	fb02 f303 	mul.w	r3, r2, r3
 800a006:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 800a008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	33b0      	adds	r3, #176	@ 0xb0
 800a010:	443b      	add	r3, r7
 800a012:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800a016:	4a52      	ldr	r2, [pc, #328]	@ (800a160 <maxim_heart_rate_and_oxygen_saturation+0x5fc>)
 800a018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a01c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a020:	3301      	adds	r3, #1
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	33b0      	adds	r3, #176	@ 0xb0
 800a026:	443b      	add	r3, r7
 800a028:	f853 1c88 	ldr.w	r1, [r3, #-136]
 800a02c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	33b0      	adds	r3, #176	@ 0xb0
 800a034:	443b      	add	r3, r7
 800a036:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800a03a:	1acb      	subs	r3, r1, r3
 800a03c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a03e:	fb91 f3f3 	sdiv	r3, r1, r3
 800a042:	4413      	add	r3, r2
 800a044:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 800a046:	4a46      	ldr	r2, [pc, #280]	@ (800a160 <maxim_heart_rate_and_oxygen_saturation+0x5fc>)
 800a048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a04c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 800a056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a058:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
 800a060:	11db      	asrs	r3, r3, #7
 800a062:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 800a064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a066:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
 800a06e:	11db      	asrs	r3, r3, #7
 800a070:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800a072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd19      	ble.n	800a0ac <maxim_heart_rate_and_oxygen_saturation+0x548>
 800a078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	dc15      	bgt.n	800a0ac <maxim_heart_rate_and_oxygen_saturation+0x548>
 800a080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a082:	2b00      	cmp	r3, #0
 800a084:	d012      	beq.n	800a0ac <maxim_heart_rate_and_oxygen_saturation+0x548>
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 800a086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a088:	2264      	movs	r2, #100	@ 0x64
 800a08a:	fb03 f202 	mul.w	r2, r3, r2
 800a08e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a090:	fb92 f2f3 	sdiv	r2, r2, r3
 800a094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	33b0      	adds	r3, #176	@ 0xb0
 800a09c:	443b      	add	r3, r7
 800a09e:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 800a0a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800a0ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	f6ff aece 	blt.w	8009e62 <maxim_heart_rate_and_oxygen_saturation+0x2fe>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 800a0c6:	f107 0314 	add.w	r3, r7, #20
 800a0ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f943 	bl	800a35a <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 800a0d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0d8:	0fda      	lsrs	r2, r3, #31
 800a0da:	4413      	add	r3, r2
 800a0dc:	105b      	asrs	r3, r3, #1
 800a0de:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 800a0e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	dd13      	ble.n	800a10e <maxim_heart_rate_and_oxygen_saturation+0x5aa>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 800a0e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	33b0      	adds	r3, #176	@ 0xb0
 800a0ee:	443b      	add	r3, r7
 800a0f0:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 800a0f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	33b0      	adds	r3, #176	@ 0xb0
 800a0fa:	443b      	add	r3, r7
 800a0fc:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800a100:	4413      	add	r3, r2
 800a102:	0fda      	lsrs	r2, r3, #31
 800a104:	4413      	add	r3, r2
 800a106:	105b      	asrs	r3, r3, #1
 800a108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a10c:	e007      	b.n	800a11e <maxim_heart_rate_and_oxygen_saturation+0x5ba>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 800a10e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	33b0      	adds	r3, #176	@ 0xb0
 800a114:	443b      	add	r3, r7
 800a116:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800a11a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 800a11e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a122:	2b02      	cmp	r3, #2
 800a124:	dd11      	ble.n	800a14a <maxim_heart_rate_and_oxygen_saturation+0x5e6>
 800a126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a12a:	2bb7      	cmp	r3, #183	@ 0xb7
 800a12c:	dc0d      	bgt.n	800a14a <maxim_heart_rate_and_oxygen_saturation+0x5e6>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 800a12e:	4a0e      	ldr	r2, [pc, #56]	@ (800a168 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 800a130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a13e:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 800a140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a144:	2201      	movs	r2, #1
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	e006      	b.n	800a158 <maxim_heart_rate_and_oxygen_saturation+0x5f4>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	4a07      	ldr	r2, [pc, #28]	@ (800a16c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800a14e:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
 800a150:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
  }
}
 800a158:	37b0      	adds	r7, #176	@ 0xb0
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	200005dc 	.word	0x200005dc
 800a164:	2000076c 	.word	0x2000076c
 800a168:	0800dfc4 	.word	0x0800dfc4
 800a16c:	fffffc19 	.word	0xfffffc19

0800a170 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f812 	bl	800a1b2 <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f880 	bl	800a29a <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	bfa8      	it	ge
 800a1a4:	461a      	movge	r2, r3
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	601a      	str	r2, [r3, #0]
}
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b087      	sub	sp, #28
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
  
  while (i < n_size-1){
 800a1ca:	e05a      	b.n	800a282 <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6a3a      	ldr	r2, [r7, #32]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	da4f      	bge.n	800a27c <maxim_peaks_above_min_height+0xca>
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	440b      	add	r3, r1
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	dd40      	ble.n	800a27c <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 800a1fe:	e002      	b.n	800a206 <maxim_peaks_above_min_height+0x54>
        n_width++;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	3301      	adds	r3, #1
 800a204:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	dd0d      	ble.n	800a22e <maxim_peaks_above_min_height+0x7c>
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	4413      	add	r3, r2
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	6979      	ldr	r1, [r7, #20]
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	440b      	add	r3, r1
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	440b      	add	r3, r1
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d0e8      	beq.n	800a200 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	6979      	ldr	r1, [r7, #20]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	440b      	add	r3, r1
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	440b      	add	r3, r1
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	dd13      	ble.n	800a272 <maxim_peaks_above_min_height+0xc0>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b0e      	cmp	r3, #14
 800a250:	dc0f      	bgt.n	800a272 <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;    
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	1c59      	adds	r1, r3, #1
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	6011      	str	r1, [r2, #0]
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4413      	add	r3, r2
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	3301      	adds	r3, #1
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	4413      	add	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 800a270:	e007      	b.n	800a282 <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	4413      	add	r3, r2
 800a278:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 800a27a:	e002      	b.n	800a282 <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	3301      	adds	r3, #1
 800a280:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	3b01      	subs	r3, #1
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	429a      	cmp	r2, r3
 800a28a:	db9f      	blt.n	800a1cc <maxim_peaks_above_min_height+0x1a>
  }
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	371c      	adds	r7, #28
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b088      	sub	sp, #32
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	603b      	str	r3, [r7, #0]
    
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f895 	bl	800a3e0 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 800a2b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	e03e      	b.n	800a33c <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	e02c      	b.n	800a32e <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4413      	add	r3, r2
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2e4:	d005      	beq.n	800a2f2 <maxim_remove_close_peaks+0x58>
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	440b      	add	r3, r1
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	e001      	b.n	800a2f6 <maxim_remove_close_peaks+0x5c>
 800a2f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	dc04      	bgt.n	800a30c <maxim_remove_close_peaks+0x72>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	425b      	negs	r3, r3
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	429a      	cmp	r2, r3
 800a30a:	da0d      	bge.n	800a328 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	441a      	add	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	1c58      	adds	r0, r3, #1
 800a31a:	68b9      	ldr	r1, [r7, #8]
 800a31c:	6008      	str	r0, [r1, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	68f9      	ldr	r1, [r7, #12]
 800a322:	440b      	add	r3, r1
 800a324:	6812      	ldr	r2, [r2, #0]
 800a326:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	3301      	adds	r3, #1
 800a32c:	61bb      	str	r3, [r7, #24]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	429a      	cmp	r2, r3
 800a334:	dbce      	blt.n	800a2d4 <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	3301      	adds	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	429a      	cmp	r2, r3
 800a344:	dbbb      	blt.n	800a2be <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4619      	mov	r1, r3
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f804 	bl	800a35a <maxim_sort_ascend>
}
 800a352:	bf00      	nop
 800a354:	3720      	adds	r7, #32
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 800a35a:	b480      	push	{r7}
 800a35c:	b087      	sub	sp, #28
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e02f      	b.n	800a3ca <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	e00f      	b.n	800a39c <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a382:	3b01      	subs	r3, #1
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	441a      	add	r2, r3
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	440b      	add	r3, r1
 800a392:	6812      	ldr	r2, [r2, #0]
 800a394:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	3b01      	subs	r3, #1
 800a39a:	613b      	str	r3, [r7, #16]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	dd0a      	ble.n	800a3b8 <maxim_sort_ascend+0x5e>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	dbe1      	blt.n	800a37c <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	4413      	add	r3, r2
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	dbcb      	blt.n	800a36a <maxim_sort_ascend+0x10>
  }
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b089      	sub	sp, #36	@ 0x24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	e037      	b.n	800a462 <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	61bb      	str	r3, [r7, #24]
 800a402:	e00f      	b.n	800a424 <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a40a:	3b01      	subs	r3, #1
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	441a      	add	r2, r3
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	68b9      	ldr	r1, [r7, #8]
 800a418:	440b      	add	r3, r1
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	3b01      	subs	r3, #1
 800a422:	61bb      	str	r3, [r7, #24]
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	dd12      	ble.n	800a450 <maxim_sort_indices_descend+0x70>
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	4413      	add	r3, r2
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a43a:	3b01      	subs	r3, #1
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	440b      	add	r3, r1
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	68f9      	ldr	r1, [r7, #12]
 800a448:	440b      	add	r3, r1
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	dcd9      	bgt.n	800a404 <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	4413      	add	r3, r2
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	3301      	adds	r3, #1
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	dbc3      	blt.n	800a3f2 <maxim_sort_indices_descend+0x12>
  }
}
 800a46a:	bf00      	nop
 800a46c:	bf00      	nop
 800a46e:	3724      	adds	r7, #36	@ 0x24
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <max3010x_cal>:

void max3010x_cal()
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b0c4      	sub	sp, #272	@ 0x110
 800a47c:	af04      	add	r7, sp, #16
  uint8_t unreadSampleCount = max3010x_getUnreadSampleCount();
 800a47e:	f7ff fa95 	bl	80099ac <max3010x_getUnreadSampleCount>
 800a482:	4603      	mov	r3, r0
 800a484:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
  if (!unreadSampleCount)
 800a488:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80d8 	beq.w	800a642 <max3010x_cal+0x1ca>
    return;

  SAMPLE sampleBuffTemp[31];
  max3010x_getFIFO(sampleBuffTemp, unreadSampleCount);
 800a492:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 800a496:	463b      	mov	r3, r7
 800a498:	4611      	mov	r1, r2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fac2 	bl	8009a24 <max3010x_getFIFO>
  
  uint16_t i, ii;
  //printf("unread=%d\n", unreadSampleCount);
  for (i = 0; i < unreadSampleCount; i++)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 800a4a6:	e0c3      	b.n	800a630 <max3010x_cal+0x1b8>
  { 
    if (bufferTotal < BUFFER_SIZE)
 800a4a8:	4b68      	ldr	r3, [pc, #416]	@ (800a64c <max3010x_cal+0x1d4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b63      	cmp	r3, #99	@ 0x63
 800a4ae:	d860      	bhi.n	800a572 <max3010x_cal+0xfa>
    {
      redBuffer[bufferCurrent] = (sampleBuffTemp[i].red & 0x3FFFF) >> 2;
 800a4b0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 800a4b4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800a4b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800a4bc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a4c0:	089a      	lsrs	r2, r3, #2
 800a4c2:	4b63      	ldr	r3, [pc, #396]	@ (800a650 <max3010x_cal+0x1d8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	b291      	uxth	r1, r2
 800a4c8:	4a62      	ldr	r2, [pc, #392]	@ (800a654 <max3010x_cal+0x1dc>)
 800a4ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      irBuffer[bufferCurrent] = (sampleBuffTemp[i].iRed & 0x3FFFF) >> 2;
 800a4ce:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800a4d2:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 800a4d6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	4413      	add	r3, r2
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	089a      	lsrs	r2, r3, #2
 800a4e2:	4b5b      	ldr	r3, [pc, #364]	@ (800a650 <max3010x_cal+0x1d8>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	b291      	uxth	r1, r2
 800a4e8:	4a5b      	ldr	r2, [pc, #364]	@ (800a658 <max3010x_cal+0x1e0>)
 800a4ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      
      ++ bufferTotal;
 800a4ee:	4b57      	ldr	r3, [pc, #348]	@ (800a64c <max3010x_cal+0x1d4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	4a55      	ldr	r2, [pc, #340]	@ (800a64c <max3010x_cal+0x1d4>)
 800a4f6:	6013      	str	r3, [r2, #0]
      ++ bufferCurrent;
 800a4f8:	4b55      	ldr	r3, [pc, #340]	@ (800a650 <max3010x_cal+0x1d8>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	4a54      	ldr	r2, [pc, #336]	@ (800a650 <max3010x_cal+0x1d8>)
 800a500:	6013      	str	r3, [r2, #0]
      
      if (bufferCurrent >= BUFFER_SIZE)
 800a502:	4b53      	ldr	r3, [pc, #332]	@ (800a650 <max3010x_cal+0x1d8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b63      	cmp	r3, #99	@ 0x63
 800a508:	f240 808d 	bls.w	800a626 <max3010x_cal+0x1ae>
      {
        maxim_heart_rate_and_oxygen_saturation(irBuffer, BUFFER_SIZE, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 800a50c:	4b53      	ldr	r3, [pc, #332]	@ (800a65c <max3010x_cal+0x1e4>)
 800a50e:	9302      	str	r3, [sp, #8]
 800a510:	4b53      	ldr	r3, [pc, #332]	@ (800a660 <max3010x_cal+0x1e8>)
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	4b53      	ldr	r3, [pc, #332]	@ (800a664 <max3010x_cal+0x1ec>)
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	4b53      	ldr	r3, [pc, #332]	@ (800a668 <max3010x_cal+0x1f0>)
 800a51a:	4a4e      	ldr	r2, [pc, #312]	@ (800a654 <max3010x_cal+0x1dc>)
 800a51c:	2164      	movs	r1, #100	@ 0x64
 800a51e:	484e      	ldr	r0, [pc, #312]	@ (800a658 <max3010x_cal+0x1e0>)
 800a520:	f7ff fb20 	bl	8009b64 <maxim_heart_rate_and_oxygen_saturation>
        
        for (ii = FS; ii < BUFFER_SIZE; ii++)
 800a524:	2319      	movs	r3, #25
 800a526:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
 800a52a:	e01a      	b.n	800a562 <max3010x_cal+0xea>
        {
          redBuffer[ii - FS] = redBuffer[ii];
 800a52c:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800a530:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a534:	3b19      	subs	r3, #25
 800a536:	4947      	ldr	r1, [pc, #284]	@ (800a654 <max3010x_cal+0x1dc>)
 800a538:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a53c:	4a45      	ldr	r2, [pc, #276]	@ (800a654 <max3010x_cal+0x1dc>)
 800a53e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          irBuffer[ii - FS] = irBuffer[ii];
 800a542:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800a546:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a54a:	3b19      	subs	r3, #25
 800a54c:	4942      	ldr	r1, [pc, #264]	@ (800a658 <max3010x_cal+0x1e0>)
 800a54e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a552:	4a41      	ldr	r2, [pc, #260]	@ (800a658 <max3010x_cal+0x1e0>)
 800a554:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (ii = FS; ii < BUFFER_SIZE; ii++)
 800a558:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a55c:	3301      	adds	r3, #1
 800a55e:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
 800a562:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a566:	2b63      	cmp	r3, #99	@ 0x63
 800a568:	d9e0      	bls.n	800a52c <max3010x_cal+0xb4>
        }
        
        bufferCurrent = BUFFER_SIZE-FS;
 800a56a:	4b39      	ldr	r3, [pc, #228]	@ (800a650 <max3010x_cal+0x1d8>)
 800a56c:	224b      	movs	r2, #75	@ 0x4b
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e059      	b.n	800a626 <max3010x_cal+0x1ae>
      }
    }
    else
    {
      redBuffer[bufferCurrent] = (sampleBuffTemp[i].red & 0x3FFFF) >> 2;
 800a572:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 800a576:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800a57a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800a57e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a582:	089a      	lsrs	r2, r3, #2
 800a584:	4b32      	ldr	r3, [pc, #200]	@ (800a650 <max3010x_cal+0x1d8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	b291      	uxth	r1, r2
 800a58a:	4a32      	ldr	r2, [pc, #200]	@ (800a654 <max3010x_cal+0x1dc>)
 800a58c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      irBuffer[bufferCurrent] = (sampleBuffTemp[i].iRed & 0x3FFFF) >> 2;
 800a590:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800a594:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 800a598:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	4413      	add	r3, r2
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	089a      	lsrs	r2, r3, #2
 800a5a4:	4b2a      	ldr	r3, [pc, #168]	@ (800a650 <max3010x_cal+0x1d8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	b291      	uxth	r1, r2
 800a5aa:	4a2b      	ldr	r2, [pc, #172]	@ (800a658 <max3010x_cal+0x1e0>)
 800a5ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      ++ bufferCurrent;
 800a5b0:	4b27      	ldr	r3, [pc, #156]	@ (800a650 <max3010x_cal+0x1d8>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	4a26      	ldr	r2, [pc, #152]	@ (800a650 <max3010x_cal+0x1d8>)
 800a5b8:	6013      	str	r3, [r2, #0]
      
      if (bufferCurrent >= BUFFER_SIZE)
 800a5ba:	4b25      	ldr	r3, [pc, #148]	@ (800a650 <max3010x_cal+0x1d8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b63      	cmp	r3, #99	@ 0x63
 800a5c0:	d931      	bls.n	800a626 <max3010x_cal+0x1ae>
      {
        maxim_heart_rate_and_oxygen_saturation(irBuffer, BUFFER_SIZE, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 800a5c2:	4b26      	ldr	r3, [pc, #152]	@ (800a65c <max3010x_cal+0x1e4>)
 800a5c4:	9302      	str	r3, [sp, #8]
 800a5c6:	4b26      	ldr	r3, [pc, #152]	@ (800a660 <max3010x_cal+0x1e8>)
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	4b26      	ldr	r3, [pc, #152]	@ (800a664 <max3010x_cal+0x1ec>)
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	4b26      	ldr	r3, [pc, #152]	@ (800a668 <max3010x_cal+0x1f0>)
 800a5d0:	4a20      	ldr	r2, [pc, #128]	@ (800a654 <max3010x_cal+0x1dc>)
 800a5d2:	2164      	movs	r1, #100	@ 0x64
 800a5d4:	4820      	ldr	r0, [pc, #128]	@ (800a658 <max3010x_cal+0x1e0>)
 800a5d6:	f7ff fac5 	bl	8009b64 <maxim_heart_rate_and_oxygen_saturation>
        
        for (ii = FS; ii < BUFFER_SIZE; ii++)
 800a5da:	2319      	movs	r3, #25
 800a5dc:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
 800a5e0:	e01a      	b.n	800a618 <max3010x_cal+0x1a0>
        {
          redBuffer[ii - FS] = redBuffer[ii];
 800a5e2:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800a5e6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a5ea:	3b19      	subs	r3, #25
 800a5ec:	4919      	ldr	r1, [pc, #100]	@ (800a654 <max3010x_cal+0x1dc>)
 800a5ee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a5f2:	4a18      	ldr	r2, [pc, #96]	@ (800a654 <max3010x_cal+0x1dc>)
 800a5f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          irBuffer[ii - FS] = irBuffer[ii];
 800a5f8:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800a5fc:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a600:	3b19      	subs	r3, #25
 800a602:	4915      	ldr	r1, [pc, #84]	@ (800a658 <max3010x_cal+0x1e0>)
 800a604:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a608:	4a13      	ldr	r2, [pc, #76]	@ (800a658 <max3010x_cal+0x1e0>)
 800a60a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (ii = FS; ii < BUFFER_SIZE; ii++)
 800a60e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a612:	3301      	adds	r3, #1
 800a614:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
 800a618:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800a61c:	2b63      	cmp	r3, #99	@ 0x63
 800a61e:	d9e0      	bls.n	800a5e2 <max3010x_cal+0x16a>
        }
        
        bufferCurrent = BUFFER_SIZE-FS;
 800a620:	4b0b      	ldr	r3, [pc, #44]	@ (800a650 <max3010x_cal+0x1d8>)
 800a622:	224b      	movs	r2, #75	@ 0x4b
 800a624:	601a      	str	r2, [r3, #0]
  for (i = 0; i < unreadSampleCount; i++)
 800a626:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800a62a:	3301      	adds	r3, #1
 800a62c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 800a630:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800a634:	b29b      	uxth	r3, r3
 800a636:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 800a63a:	429a      	cmp	r2, r3
 800a63c:	f4ff af34 	bcc.w	800a4a8 <max3010x_cal+0x30>
 800a640:	e000      	b.n	800a644 <max3010x_cal+0x1cc>
    return;
 800a642:	bf00      	nop
      }
    }
  }
}
 800a644:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000a90 	.word	0x20000a90
 800a650:	20000a8c 	.word	0x20000a8c
 800a654:	200009c4 	.word	0x200009c4
 800a658:	200008fc 	.word	0x200008fc
 800a65c:	20000aa0 	.word	0x20000aa0
 800a660:	20000a9c 	.word	0x20000a9c
 800a664:	20000a98 	.word	0x20000a98
 800a668:	20000a94 	.word	0x20000a94

0800a66c <I2C_MAX30105_ISR>:

void 
I2C_MAX30105_ISR(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
  uint8_t intStatus = max3010x_getStatus();
 800a672:	f7ff fa5e 	bl	8009b32 <max3010x_getStatus>
 800a676:	4603      	mov	r3, r0
 800a678:	71fb      	strb	r3, [r7, #7]
  
  max3010x_INT_Callback(intStatus);
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f6 fd19 	bl	80010b4 <max3010x_INT_Callback>
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <max3010x_getHeartRate>:

__weak void max3010x_INT_Callback(uint8_t intStatus)
{
}

uint8_t max3010x_getHeartRate() { return heartRate; }
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
 800a690:	4b03      	ldr	r3, [pc, #12]	@ (800a6a0 <max3010x_getHeartRate+0x14>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	4618      	mov	r0, r3
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	20000a9c 	.word	0x20000a9c

0800a6a4 <max3010x_getSpO2>:
uint8_t max3010x_getSpO2() { return spo2; }
 800a6a4:	b480      	push	{r7}
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	4b03      	ldr	r3, [pc, #12]	@ (800a6b8 <max3010x_getSpO2+0x14>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	20000a94 	.word	0x20000a94

0800a6bc <max3010x_isHeartRateValid>:
int16_t max3010x_getDiff() { return 0; }
uint8_t max3010x_isHeartRateValid(void) { return validHeartRate; }
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <max3010x_isHeartRateValid+0x18>)
 800a6c2:	f993 3000 	ldrsb.w	r3, [r3]
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	20000aa0 	.word	0x20000aa0

0800a6d8 <max3010x_isSpO2Valid>:
uint8_t max3010x_isSpO2Valid(void) { return validSPO2; }
 800a6d8:	b480      	push	{r7}
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	4b04      	ldr	r3, [pc, #16]	@ (800a6f0 <max3010x_isSpO2Valid+0x18>)
 800a6de:	f993 3000 	ldrsb.w	r3, [r3]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	20000a98 	.word	0x20000a98

0800a6f4 <mlx90615_write>:
extern I2C_HandleTypeDef hi2c1;
static uint32_t mlx90615PartId = 0;

static void 
mlx90615_write(uint8_t Reg, uint16_t Value)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af04      	add	r7, sp, #16
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	460a      	mov	r2, r1
 800a6fe:	71fb      	strb	r3, [r7, #7]
 800a700:	4613      	mov	r3, r2
 800a702:	80bb      	strh	r3, [r7, #4]
  uint8_t write_data[2];
  write_data[0] = Value & 0xFF;
 800a704:	88bb      	ldrh	r3, [r7, #4]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	733b      	strb	r3, [r7, #12]
  write_data[1] = (Value & 0xFF00) >> 8;
 800a70a:	88bb      	ldrh	r3, [r7, #4]
 800a70c:	0a1b      	lsrs	r3, r3, #8
 800a70e:	b29b      	uxth	r3, r3
 800a710:	b2db      	uxtb	r3, r3
 800a712:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Write(&hi2c1, MLX90615_ADDR_WRITE, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, write_data, 1, 10);
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	b29a      	uxth	r2, r3
 800a718:	230a      	movs	r3, #10
 800a71a:	9302      	str	r3, [sp, #8]
 800a71c:	2301      	movs	r3, #1
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	f107 030c 	add.w	r3, r7, #12
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2301      	movs	r3, #1
 800a728:	21b5      	movs	r1, #181	@ 0xb5
 800a72a:	4803      	ldr	r0, [pc, #12]	@ (800a738 <mlx90615_write+0x44>)
 800a72c:	f7f9 fc20 	bl	8003f70 <HAL_I2C_Mem_Write>
}
 800a730:	bf00      	nop
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000414 	.word	0x20000414

0800a73c <mlx90615_read>:

static uint16_t 
mlx90615_read(uint8_t Reg)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af04      	add	r7, sp, #16
 800a742:	4603      	mov	r3, r0
 800a744:	71fb      	strb	r3, [r7, #7]
  uint8_t read_data[2];

  HAL_I2C_Mem_Read(&hi2c1, MLX90615_ADDR_READ, Reg, I2C_MEMADD_SIZE_8BIT, read_data, 2, 10);
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	b29a      	uxth	r2, r3
 800a74a:	230a      	movs	r3, #10
 800a74c:	9302      	str	r3, [sp, #8]
 800a74e:	2302      	movs	r3, #2
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	2301      	movs	r3, #1
 800a75a:	21b6      	movs	r1, #182	@ 0xb6
 800a75c:	4807      	ldr	r0, [pc, #28]	@ (800a77c <mlx90615_read+0x40>)
 800a75e:	f7f9 fd1b 	bl	8004198 <HAL_I2C_Mem_Read>

  return (read_data[1] << 8) | read_data[0];
 800a762:	7b7b      	ldrb	r3, [r7, #13]
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	b21a      	sxth	r2, r3
 800a768:	7b3b      	ldrb	r3, [r7, #12]
 800a76a:	b21b      	sxth	r3, r3
 800a76c:	4313      	orrs	r3, r2
 800a76e:	b21b      	sxth	r3, r3
 800a770:	b29b      	uxth	r3, r3
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000414 	.word	0x20000414

0800a780 <mlx90615_init>:
}


void
mlx90615_init(void)
{
 800a780:	b598      	push	{r3, r4, r7, lr}
 800a782:	af00      	add	r7, sp, #0
  mlx90615PartId = (mlx90615_read(READ_EEPROM(REG_ID0)) << 16) | mlx90615_read(READ_EEPROM(REG_ID1));
 800a784:	201e      	movs	r0, #30
 800a786:	f7ff ffd9 	bl	800a73c <mlx90615_read>
 800a78a:	4603      	mov	r3, r0
 800a78c:	041c      	lsls	r4, r3, #16
 800a78e:	201f      	movs	r0, #31
 800a790:	f7ff ffd4 	bl	800a73c <mlx90615_read>
 800a794:	4603      	mov	r3, r0
 800a796:	4323      	orrs	r3, r4
 800a798:	461a      	mov	r2, r3
 800a79a:	4b04      	ldr	r3, [pc, #16]	@ (800a7ac <mlx90615_init+0x2c>)
 800a79c:	601a      	str	r2, [r3, #0]
  mlx90615_write(READ_EEPROM(REG_EMISSIVITY), (uint16_t)(MLX90615_EMISSIVITY * 16384));
 800a79e:	f643 41cc 	movw	r1, #15564	@ 0x3ccc
 800a7a2:	2013      	movs	r0, #19
 800a7a4:	f7ff ffa6 	bl	800a6f4 <mlx90615_write>
}
 800a7a8:	bf00      	nop
 800a7aa:	bd98      	pop	{r3, r4, r7, pc}
 800a7ac:	20000aa4 	.word	0x20000aa4

0800a7b0 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f0 <WIFI_Init+0x40>)
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <WIFI_Init+0x44>)
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <WIFI_Init+0x48>)
 800a7c4:	4a0d      	ldr	r2, [pc, #52]	@ (800a7fc <WIFI_Init+0x4c>)
 800a7c6:	490e      	ldr	r1, [pc, #56]	@ (800a800 <WIFI_Init+0x50>)
 800a7c8:	480e      	ldr	r0, [pc, #56]	@ (800a804 <WIFI_Init+0x54>)
 800a7ca:	f7fe f93b 	bl	8008a44 <ES_WIFI_RegisterBusIO>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d107      	bne.n	800a7e4 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a7d4:	480b      	ldr	r0, [pc, #44]	@ (800a804 <WIFI_Init+0x54>)
 800a7d6:	f7fe f907 	bl	80089e8 <ES_WIFI_Init>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	08009541 	.word	0x08009541
 800a7f4:	08009635 	.word	0x08009635
 800a7f8:	08009711 	.word	0x08009711
 800a7fc:	08009429 	.word	0x08009429
 800a800:	0800928d 	.word	0x0800928d
 800a804:	20000aa8 	.word	0x20000aa8

0800a808 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	68f9      	ldr	r1, [r7, #12]
 800a820:	4809      	ldr	r0, [pc, #36]	@ (800a848 <WIFI_Connect+0x40>)
 800a822:	f7fe f943 	bl	8008aac <ES_WIFI_Connect>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d107      	bne.n	800a83c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a82c:	4806      	ldr	r0, [pc, #24]	@ (800a848 <WIFI_Connect+0x40>)
 800a82e:	f7fe f9e1 	bl	8008bf4 <ES_WIFI_GetNetworkSettings>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800a83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20000aa8 	.word	0x20000aa8

0800a84c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4806      	ldr	r0, [pc, #24]	@ (800a874 <WIFI_GetMAC_Address+0x28>)
 800a85c:	f7fe f9f4 	bl	8008c48 <ES_WIFI_GetMACAddress>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000aa8 	.word	0x20000aa8

0800a878 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800a884:	4809      	ldr	r0, [pc, #36]	@ (800a8ac <WIFI_GetIP_Address+0x34>)
 800a886:	f7fe f989 	bl	8008b9c <ES_WIFI_IsConnected>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d107      	bne.n	800a8a0 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800a890:	4b06      	ldr	r3, [pc, #24]	@ (800a8ac <WIFI_GetIP_Address+0x34>)
 800a892:	f8d3 30e5 	ldr.w	r3, [r3, #229]	@ 0xe5
 800a896:	461a      	mov	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20000aa8 	.word	0x20000aa8

0800a8b0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	@ 0x28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	607a      	str	r2, [r7, #4]
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800a8cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a8ce:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800a8d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a8d2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	3302      	adds	r3, #2
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	3303      	adds	r3, #3
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800a900:	f107 0310 	add.w	r3, r7, #16
 800a904:	4619      	mov	r1, r3
 800a906:	4807      	ldr	r0, [pc, #28]	@ (800a924 <WIFI_OpenClientConnection+0x74>)
 800a908:	f7fe f9d0 	bl	8008cac <ES_WIFI_StartClientConnection>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d102      	bne.n	800a918 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800a918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3728      	adds	r7, #40	@ 0x28
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000aa8 	.word	0x20000aa8

0800a928 <WIFI_CloseClientConnection>:
/**
  * @brief  Close client connection
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	727b      	strb	r3, [r7, #9]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800a93a:	f107 0308 	add.w	r3, r7, #8
 800a93e:	4619      	mov	r1, r3
 800a940:	4806      	ldr	r0, [pc, #24]	@ (800a95c <WIFI_CloseClientConnection+0x34>)
 800a942:	f7fe fa9d 	bl	8008e80 <ES_WIFI_StopClientConnection>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a950:	7ffb      	ldrb	r3, [r7, #31]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20000aa8 	.word	0x20000aa8

0800a960 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af02      	add	r7, sp, #8
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607b      	str	r3, [r7, #4]
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
 800a96e:	4613      	mov	r3, r2
 800a970:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800a976:	89ba      	ldrh	r2, [r7, #12]
 800a978:	7bf9      	ldrb	r1, [r7, #15]
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	4613      	mov	r3, r2
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	4806      	ldr	r0, [pc, #24]	@ (800a9a0 <WIFI_SendData+0x40>)
 800a988:	f7fe fab4 	bl	8008ef4 <ES_WIFI_SendData>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20000aa8 	.word	0x20000aa8

0800a9a4 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af02      	add	r7, sp, #8
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800a9ba:	89ba      	ldrh	r2, [r7, #12]
 800a9bc:	7bf9      	ldrb	r1, [r7, #15]
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	4806      	ldr	r0, [pc, #24]	@ (800a9e4 <WIFI_ReceiveData+0x40>)
 800a9cc:	f7fe fb18 	bl	8009000 <ES_WIFI_ReceiveData>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000aa8 	.word	0x20000aa8

0800a9e8 <__cvt>:
 800a9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ec:	ec57 6b10 	vmov	r6, r7, d0
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	bfbb      	ittet	lt
 800a9fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a9fe:	461f      	movlt	r7, r3
 800aa00:	2300      	movge	r3, #0
 800aa02:	232d      	movlt	r3, #45	@ 0x2d
 800aa04:	700b      	strb	r3, [r1, #0]
 800aa06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa0c:	4691      	mov	r9, r2
 800aa0e:	f023 0820 	bic.w	r8, r3, #32
 800aa12:	bfbc      	itt	lt
 800aa14:	4632      	movlt	r2, r6
 800aa16:	4616      	movlt	r6, r2
 800aa18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa1c:	d005      	beq.n	800aa2a <__cvt+0x42>
 800aa1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa22:	d100      	bne.n	800aa26 <__cvt+0x3e>
 800aa24:	3401      	adds	r4, #1
 800aa26:	2102      	movs	r1, #2
 800aa28:	e000      	b.n	800aa2c <__cvt+0x44>
 800aa2a:	2103      	movs	r1, #3
 800aa2c:	ab03      	add	r3, sp, #12
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	ab02      	add	r3, sp, #8
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	ec47 6b10 	vmov	d0, r6, r7
 800aa38:	4653      	mov	r3, sl
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	f000 ff38 	bl	800b8b0 <_dtoa_r>
 800aa40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa44:	4605      	mov	r5, r0
 800aa46:	d119      	bne.n	800aa7c <__cvt+0x94>
 800aa48:	f019 0f01 	tst.w	r9, #1
 800aa4c:	d00e      	beq.n	800aa6c <__cvt+0x84>
 800aa4e:	eb00 0904 	add.w	r9, r0, r4
 800aa52:	2200      	movs	r2, #0
 800aa54:	2300      	movs	r3, #0
 800aa56:	4630      	mov	r0, r6
 800aa58:	4639      	mov	r1, r7
 800aa5a:	f7f6 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa5e:	b108      	cbz	r0, 800aa64 <__cvt+0x7c>
 800aa60:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa64:	2230      	movs	r2, #48	@ 0x30
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	454b      	cmp	r3, r9
 800aa6a:	d31e      	bcc.n	800aaaa <__cvt+0xc2>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa70:	1b5b      	subs	r3, r3, r5
 800aa72:	4628      	mov	r0, r5
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	b004      	add	sp, #16
 800aa78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa80:	eb00 0904 	add.w	r9, r0, r4
 800aa84:	d1e5      	bne.n	800aa52 <__cvt+0x6a>
 800aa86:	7803      	ldrb	r3, [r0, #0]
 800aa88:	2b30      	cmp	r3, #48	@ 0x30
 800aa8a:	d10a      	bne.n	800aaa2 <__cvt+0xba>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4630      	mov	r0, r6
 800aa92:	4639      	mov	r1, r7
 800aa94:	f7f6 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa98:	b918      	cbnz	r0, 800aaa2 <__cvt+0xba>
 800aa9a:	f1c4 0401 	rsb	r4, r4, #1
 800aa9e:	f8ca 4000 	str.w	r4, [sl]
 800aaa2:	f8da 3000 	ldr.w	r3, [sl]
 800aaa6:	4499      	add	r9, r3
 800aaa8:	e7d3      	b.n	800aa52 <__cvt+0x6a>
 800aaaa:	1c59      	adds	r1, r3, #1
 800aaac:	9103      	str	r1, [sp, #12]
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e7d9      	b.n	800aa66 <__cvt+0x7e>

0800aab2 <__exponent>:
 800aab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aab4:	2900      	cmp	r1, #0
 800aab6:	bfba      	itte	lt
 800aab8:	4249      	neglt	r1, r1
 800aaba:	232d      	movlt	r3, #45	@ 0x2d
 800aabc:	232b      	movge	r3, #43	@ 0x2b
 800aabe:	2909      	cmp	r1, #9
 800aac0:	7002      	strb	r2, [r0, #0]
 800aac2:	7043      	strb	r3, [r0, #1]
 800aac4:	dd29      	ble.n	800ab1a <__exponent+0x68>
 800aac6:	f10d 0307 	add.w	r3, sp, #7
 800aaca:	461d      	mov	r5, r3
 800aacc:	270a      	movs	r7, #10
 800aace:	461a      	mov	r2, r3
 800aad0:	fbb1 f6f7 	udiv	r6, r1, r7
 800aad4:	fb07 1416 	mls	r4, r7, r6, r1
 800aad8:	3430      	adds	r4, #48	@ 0x30
 800aada:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aade:	460c      	mov	r4, r1
 800aae0:	2c63      	cmp	r4, #99	@ 0x63
 800aae2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800aae6:	4631      	mov	r1, r6
 800aae8:	dcf1      	bgt.n	800aace <__exponent+0x1c>
 800aaea:	3130      	adds	r1, #48	@ 0x30
 800aaec:	1e94      	subs	r4, r2, #2
 800aaee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aaf2:	1c41      	adds	r1, r0, #1
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	42ab      	cmp	r3, r5
 800aaf8:	d30a      	bcc.n	800ab10 <__exponent+0x5e>
 800aafa:	f10d 0309 	add.w	r3, sp, #9
 800aafe:	1a9b      	subs	r3, r3, r2
 800ab00:	42ac      	cmp	r4, r5
 800ab02:	bf88      	it	hi
 800ab04:	2300      	movhi	r3, #0
 800ab06:	3302      	adds	r3, #2
 800ab08:	4403      	add	r3, r0
 800ab0a:	1a18      	subs	r0, r3, r0
 800ab0c:	b003      	add	sp, #12
 800ab0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab10:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab14:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab18:	e7ed      	b.n	800aaf6 <__exponent+0x44>
 800ab1a:	2330      	movs	r3, #48	@ 0x30
 800ab1c:	3130      	adds	r1, #48	@ 0x30
 800ab1e:	7083      	strb	r3, [r0, #2]
 800ab20:	70c1      	strb	r1, [r0, #3]
 800ab22:	1d03      	adds	r3, r0, #4
 800ab24:	e7f1      	b.n	800ab0a <__exponent+0x58>
	...

0800ab28 <_printf_float>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	b08d      	sub	sp, #52	@ 0x34
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab34:	4616      	mov	r6, r2
 800ab36:	461f      	mov	r7, r3
 800ab38:	4605      	mov	r5, r0
 800ab3a:	f000 fdd1 	bl	800b6e0 <_localeconv_r>
 800ab3e:	6803      	ldr	r3, [r0, #0]
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7f5 fb94 	bl	8000270 <strlen>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab50:	9005      	str	r0, [sp, #20]
 800ab52:	3307      	adds	r3, #7
 800ab54:	f023 0307 	bic.w	r3, r3, #7
 800ab58:	f103 0208 	add.w	r2, r3, #8
 800ab5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab60:	f8d4 b000 	ldr.w	fp, [r4]
 800ab64:	f8c8 2000 	str.w	r2, [r8]
 800ab68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab70:	9307      	str	r3, [sp, #28]
 800ab72:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab7e:	4b9c      	ldr	r3, [pc, #624]	@ (800adf0 <_printf_float+0x2c8>)
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab84:	f7f5 ffd2 	bl	8000b2c <__aeabi_dcmpun>
 800ab88:	bb70      	cbnz	r0, 800abe8 <_printf_float+0xc0>
 800ab8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab8e:	4b98      	ldr	r3, [pc, #608]	@ (800adf0 <_printf_float+0x2c8>)
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab94:	f7f5 ffac 	bl	8000af0 <__aeabi_dcmple>
 800ab98:	bb30      	cbnz	r0, 800abe8 <_printf_float+0xc0>
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4640      	mov	r0, r8
 800aba0:	4649      	mov	r1, r9
 800aba2:	f7f5 ff9b 	bl	8000adc <__aeabi_dcmplt>
 800aba6:	b110      	cbz	r0, 800abae <_printf_float+0x86>
 800aba8:	232d      	movs	r3, #45	@ 0x2d
 800abaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abae:	4a91      	ldr	r2, [pc, #580]	@ (800adf4 <_printf_float+0x2cc>)
 800abb0:	4b91      	ldr	r3, [pc, #580]	@ (800adf8 <_printf_float+0x2d0>)
 800abb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abb6:	bf94      	ite	ls
 800abb8:	4690      	movls	r8, r2
 800abba:	4698      	movhi	r8, r3
 800abbc:	2303      	movs	r3, #3
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	f02b 0304 	bic.w	r3, fp, #4
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	9700      	str	r7, [sp, #0]
 800abcc:	4633      	mov	r3, r6
 800abce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800abd0:	4621      	mov	r1, r4
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f9d2 	bl	800af7c <_printf_common>
 800abd8:	3001      	adds	r0, #1
 800abda:	f040 808d 	bne.w	800acf8 <_printf_float+0x1d0>
 800abde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abe2:	b00d      	add	sp, #52	@ 0x34
 800abe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe8:	4642      	mov	r2, r8
 800abea:	464b      	mov	r3, r9
 800abec:	4640      	mov	r0, r8
 800abee:	4649      	mov	r1, r9
 800abf0:	f7f5 ff9c 	bl	8000b2c <__aeabi_dcmpun>
 800abf4:	b140      	cbz	r0, 800ac08 <_printf_float+0xe0>
 800abf6:	464b      	mov	r3, r9
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	bfbc      	itt	lt
 800abfc:	232d      	movlt	r3, #45	@ 0x2d
 800abfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac02:	4a7e      	ldr	r2, [pc, #504]	@ (800adfc <_printf_float+0x2d4>)
 800ac04:	4b7e      	ldr	r3, [pc, #504]	@ (800ae00 <_printf_float+0x2d8>)
 800ac06:	e7d4      	b.n	800abb2 <_printf_float+0x8a>
 800ac08:	6863      	ldr	r3, [r4, #4]
 800ac0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac0e:	9206      	str	r2, [sp, #24]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	d13b      	bne.n	800ac8c <_printf_float+0x164>
 800ac14:	2306      	movs	r3, #6
 800ac16:	6063      	str	r3, [r4, #4]
 800ac18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	6022      	str	r2, [r4, #0]
 800ac20:	9303      	str	r3, [sp, #12]
 800ac22:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac24:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac28:	ab09      	add	r3, sp, #36	@ 0x24
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	ec49 8b10 	vmov	d0, r8, r9
 800ac32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac36:	4628      	mov	r0, r5
 800ac38:	f7ff fed6 	bl	800a9e8 <__cvt>
 800ac3c:	9b06      	ldr	r3, [sp, #24]
 800ac3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac40:	2b47      	cmp	r3, #71	@ 0x47
 800ac42:	4680      	mov	r8, r0
 800ac44:	d129      	bne.n	800ac9a <_printf_float+0x172>
 800ac46:	1cc8      	adds	r0, r1, #3
 800ac48:	db02      	blt.n	800ac50 <_printf_float+0x128>
 800ac4a:	6863      	ldr	r3, [r4, #4]
 800ac4c:	4299      	cmp	r1, r3
 800ac4e:	dd41      	ble.n	800acd4 <_printf_float+0x1ac>
 800ac50:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac54:	fa5f fa8a 	uxtb.w	sl, sl
 800ac58:	3901      	subs	r1, #1
 800ac5a:	4652      	mov	r2, sl
 800ac5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac60:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac62:	f7ff ff26 	bl	800aab2 <__exponent>
 800ac66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac68:	1813      	adds	r3, r2, r0
 800ac6a:	2a01      	cmp	r2, #1
 800ac6c:	4681      	mov	r9, r0
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	dc02      	bgt.n	800ac78 <_printf_float+0x150>
 800ac72:	6822      	ldr	r2, [r4, #0]
 800ac74:	07d2      	lsls	r2, r2, #31
 800ac76:	d501      	bpl.n	800ac7c <_printf_float+0x154>
 800ac78:	3301      	adds	r3, #1
 800ac7a:	6123      	str	r3, [r4, #16]
 800ac7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0a2      	beq.n	800abca <_printf_float+0xa2>
 800ac84:	232d      	movs	r3, #45	@ 0x2d
 800ac86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac8a:	e79e      	b.n	800abca <_printf_float+0xa2>
 800ac8c:	9a06      	ldr	r2, [sp, #24]
 800ac8e:	2a47      	cmp	r2, #71	@ 0x47
 800ac90:	d1c2      	bne.n	800ac18 <_printf_float+0xf0>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1c0      	bne.n	800ac18 <_printf_float+0xf0>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e7bd      	b.n	800ac16 <_printf_float+0xee>
 800ac9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac9e:	d9db      	bls.n	800ac58 <_printf_float+0x130>
 800aca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aca4:	d118      	bne.n	800acd8 <_printf_float+0x1b0>
 800aca6:	2900      	cmp	r1, #0
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	dd0b      	ble.n	800acc4 <_printf_float+0x19c>
 800acac:	6121      	str	r1, [r4, #16]
 800acae:	b913      	cbnz	r3, 800acb6 <_printf_float+0x18e>
 800acb0:	6822      	ldr	r2, [r4, #0]
 800acb2:	07d0      	lsls	r0, r2, #31
 800acb4:	d502      	bpl.n	800acbc <_printf_float+0x194>
 800acb6:	3301      	adds	r3, #1
 800acb8:	440b      	add	r3, r1
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acbe:	f04f 0900 	mov.w	r9, #0
 800acc2:	e7db      	b.n	800ac7c <_printf_float+0x154>
 800acc4:	b913      	cbnz	r3, 800accc <_printf_float+0x1a4>
 800acc6:	6822      	ldr	r2, [r4, #0]
 800acc8:	07d2      	lsls	r2, r2, #31
 800acca:	d501      	bpl.n	800acd0 <_printf_float+0x1a8>
 800accc:	3302      	adds	r3, #2
 800acce:	e7f4      	b.n	800acba <_printf_float+0x192>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e7f2      	b.n	800acba <_printf_float+0x192>
 800acd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800acd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acda:	4299      	cmp	r1, r3
 800acdc:	db05      	blt.n	800acea <_printf_float+0x1c2>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	6121      	str	r1, [r4, #16]
 800ace2:	07d8      	lsls	r0, r3, #31
 800ace4:	d5ea      	bpl.n	800acbc <_printf_float+0x194>
 800ace6:	1c4b      	adds	r3, r1, #1
 800ace8:	e7e7      	b.n	800acba <_printf_float+0x192>
 800acea:	2900      	cmp	r1, #0
 800acec:	bfd4      	ite	le
 800acee:	f1c1 0202 	rsble	r2, r1, #2
 800acf2:	2201      	movgt	r2, #1
 800acf4:	4413      	add	r3, r2
 800acf6:	e7e0      	b.n	800acba <_printf_float+0x192>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	055a      	lsls	r2, r3, #21
 800acfc:	d407      	bmi.n	800ad0e <_printf_float+0x1e6>
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	4642      	mov	r2, r8
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b8      	blx	r7
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d12b      	bne.n	800ad64 <_printf_float+0x23c>
 800ad0c:	e767      	b.n	800abde <_printf_float+0xb6>
 800ad0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad12:	f240 80dd 	bls.w	800aed0 <_printf_float+0x3a8>
 800ad16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f7f5 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d033      	beq.n	800ad8e <_printf_float+0x266>
 800ad26:	4a37      	ldr	r2, [pc, #220]	@ (800ae04 <_printf_float+0x2dc>)
 800ad28:	2301      	movs	r3, #1
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b8      	blx	r7
 800ad30:	3001      	adds	r0, #1
 800ad32:	f43f af54 	beq.w	800abde <_printf_float+0xb6>
 800ad36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad3a:	4543      	cmp	r3, r8
 800ad3c:	db02      	blt.n	800ad44 <_printf_float+0x21c>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	07d8      	lsls	r0, r3, #31
 800ad42:	d50f      	bpl.n	800ad64 <_printf_float+0x23c>
 800ad44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f43f af45 	beq.w	800abde <_printf_float+0xb6>
 800ad54:	f04f 0900 	mov.w	r9, #0
 800ad58:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ad5c:	f104 0a1a 	add.w	sl, r4, #26
 800ad60:	45c8      	cmp	r8, r9
 800ad62:	dc09      	bgt.n	800ad78 <_printf_float+0x250>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	079b      	lsls	r3, r3, #30
 800ad68:	f100 8103 	bmi.w	800af72 <_printf_float+0x44a>
 800ad6c:	68e0      	ldr	r0, [r4, #12]
 800ad6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad70:	4298      	cmp	r0, r3
 800ad72:	bfb8      	it	lt
 800ad74:	4618      	movlt	r0, r3
 800ad76:	e734      	b.n	800abe2 <_printf_float+0xba>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	f43f af2b 	beq.w	800abde <_printf_float+0xb6>
 800ad88:	f109 0901 	add.w	r9, r9, #1
 800ad8c:	e7e8      	b.n	800ad60 <_printf_float+0x238>
 800ad8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dc39      	bgt.n	800ae08 <_printf_float+0x2e0>
 800ad94:	4a1b      	ldr	r2, [pc, #108]	@ (800ae04 <_printf_float+0x2dc>)
 800ad96:	2301      	movs	r3, #1
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	47b8      	blx	r7
 800ad9e:	3001      	adds	r0, #1
 800ada0:	f43f af1d 	beq.w	800abde <_printf_float+0xb6>
 800ada4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ada8:	ea59 0303 	orrs.w	r3, r9, r3
 800adac:	d102      	bne.n	800adb4 <_printf_float+0x28c>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	07d9      	lsls	r1, r3, #31
 800adb2:	d5d7      	bpl.n	800ad64 <_printf_float+0x23c>
 800adb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adb8:	4631      	mov	r1, r6
 800adba:	4628      	mov	r0, r5
 800adbc:	47b8      	blx	r7
 800adbe:	3001      	adds	r0, #1
 800adc0:	f43f af0d 	beq.w	800abde <_printf_float+0xb6>
 800adc4:	f04f 0a00 	mov.w	sl, #0
 800adc8:	f104 0b1a 	add.w	fp, r4, #26
 800adcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adce:	425b      	negs	r3, r3
 800add0:	4553      	cmp	r3, sl
 800add2:	dc01      	bgt.n	800add8 <_printf_float+0x2b0>
 800add4:	464b      	mov	r3, r9
 800add6:	e793      	b.n	800ad00 <_printf_float+0x1d8>
 800add8:	2301      	movs	r3, #1
 800adda:	465a      	mov	r2, fp
 800addc:	4631      	mov	r1, r6
 800adde:	4628      	mov	r0, r5
 800ade0:	47b8      	blx	r7
 800ade2:	3001      	adds	r0, #1
 800ade4:	f43f aefb 	beq.w	800abde <_printf_float+0xb6>
 800ade8:	f10a 0a01 	add.w	sl, sl, #1
 800adec:	e7ee      	b.n	800adcc <_printf_float+0x2a4>
 800adee:	bf00      	nop
 800adf0:	7fefffff 	.word	0x7fefffff
 800adf4:	0800e07c 	.word	0x0800e07c
 800adf8:	0800e080 	.word	0x0800e080
 800adfc:	0800e084 	.word	0x0800e084
 800ae00:	0800e088 	.word	0x0800e088
 800ae04:	0800e08c 	.word	0x0800e08c
 800ae08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae0e:	4553      	cmp	r3, sl
 800ae10:	bfa8      	it	ge
 800ae12:	4653      	movge	r3, sl
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	4699      	mov	r9, r3
 800ae18:	dc36      	bgt.n	800ae88 <_printf_float+0x360>
 800ae1a:	f04f 0b00 	mov.w	fp, #0
 800ae1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae22:	f104 021a 	add.w	r2, r4, #26
 800ae26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae28:	9306      	str	r3, [sp, #24]
 800ae2a:	eba3 0309 	sub.w	r3, r3, r9
 800ae2e:	455b      	cmp	r3, fp
 800ae30:	dc31      	bgt.n	800ae96 <_printf_float+0x36e>
 800ae32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae34:	459a      	cmp	sl, r3
 800ae36:	dc3a      	bgt.n	800aeae <_printf_float+0x386>
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	07da      	lsls	r2, r3, #31
 800ae3c:	d437      	bmi.n	800aeae <_printf_float+0x386>
 800ae3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae40:	ebaa 0903 	sub.w	r9, sl, r3
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	ebaa 0303 	sub.w	r3, sl, r3
 800ae4a:	4599      	cmp	r9, r3
 800ae4c:	bfa8      	it	ge
 800ae4e:	4699      	movge	r9, r3
 800ae50:	f1b9 0f00 	cmp.w	r9, #0
 800ae54:	dc33      	bgt.n	800aebe <_printf_float+0x396>
 800ae56:	f04f 0800 	mov.w	r8, #0
 800ae5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae5e:	f104 0b1a 	add.w	fp, r4, #26
 800ae62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae64:	ebaa 0303 	sub.w	r3, sl, r3
 800ae68:	eba3 0309 	sub.w	r3, r3, r9
 800ae6c:	4543      	cmp	r3, r8
 800ae6e:	f77f af79 	ble.w	800ad64 <_printf_float+0x23c>
 800ae72:	2301      	movs	r3, #1
 800ae74:	465a      	mov	r2, fp
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b8      	blx	r7
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	f43f aeae 	beq.w	800abde <_printf_float+0xb6>
 800ae82:	f108 0801 	add.w	r8, r8, #1
 800ae86:	e7ec      	b.n	800ae62 <_printf_float+0x33a>
 800ae88:	4642      	mov	r2, r8
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	d1c2      	bne.n	800ae1a <_printf_float+0x2f2>
 800ae94:	e6a3      	b.n	800abde <_printf_float+0xb6>
 800ae96:	2301      	movs	r3, #1
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	9206      	str	r2, [sp, #24]
 800ae9e:	47b8      	blx	r7
 800aea0:	3001      	adds	r0, #1
 800aea2:	f43f ae9c 	beq.w	800abde <_printf_float+0xb6>
 800aea6:	9a06      	ldr	r2, [sp, #24]
 800aea8:	f10b 0b01 	add.w	fp, fp, #1
 800aeac:	e7bb      	b.n	800ae26 <_printf_float+0x2fe>
 800aeae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d1c0      	bne.n	800ae3e <_printf_float+0x316>
 800aebc:	e68f      	b.n	800abde <_printf_float+0xb6>
 800aebe:	9a06      	ldr	r2, [sp, #24]
 800aec0:	464b      	mov	r3, r9
 800aec2:	4442      	add	r2, r8
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b8      	blx	r7
 800aeca:	3001      	adds	r0, #1
 800aecc:	d1c3      	bne.n	800ae56 <_printf_float+0x32e>
 800aece:	e686      	b.n	800abde <_printf_float+0xb6>
 800aed0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aed4:	f1ba 0f01 	cmp.w	sl, #1
 800aed8:	dc01      	bgt.n	800aede <_printf_float+0x3b6>
 800aeda:	07db      	lsls	r3, r3, #31
 800aedc:	d536      	bpl.n	800af4c <_printf_float+0x424>
 800aede:	2301      	movs	r3, #1
 800aee0:	4642      	mov	r2, r8
 800aee2:	4631      	mov	r1, r6
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b8      	blx	r7
 800aee8:	3001      	adds	r0, #1
 800aeea:	f43f ae78 	beq.w	800abde <_printf_float+0xb6>
 800aeee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	f43f ae70 	beq.w	800abde <_printf_float+0xb6>
 800aefe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af02:	2200      	movs	r2, #0
 800af04:	2300      	movs	r3, #0
 800af06:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800af0a:	f7f5 fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 800af0e:	b9c0      	cbnz	r0, 800af42 <_printf_float+0x41a>
 800af10:	4653      	mov	r3, sl
 800af12:	f108 0201 	add.w	r2, r8, #1
 800af16:	4631      	mov	r1, r6
 800af18:	4628      	mov	r0, r5
 800af1a:	47b8      	blx	r7
 800af1c:	3001      	adds	r0, #1
 800af1e:	d10c      	bne.n	800af3a <_printf_float+0x412>
 800af20:	e65d      	b.n	800abde <_printf_float+0xb6>
 800af22:	2301      	movs	r3, #1
 800af24:	465a      	mov	r2, fp
 800af26:	4631      	mov	r1, r6
 800af28:	4628      	mov	r0, r5
 800af2a:	47b8      	blx	r7
 800af2c:	3001      	adds	r0, #1
 800af2e:	f43f ae56 	beq.w	800abde <_printf_float+0xb6>
 800af32:	f108 0801 	add.w	r8, r8, #1
 800af36:	45d0      	cmp	r8, sl
 800af38:	dbf3      	blt.n	800af22 <_printf_float+0x3fa>
 800af3a:	464b      	mov	r3, r9
 800af3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af40:	e6df      	b.n	800ad02 <_printf_float+0x1da>
 800af42:	f04f 0800 	mov.w	r8, #0
 800af46:	f104 0b1a 	add.w	fp, r4, #26
 800af4a:	e7f4      	b.n	800af36 <_printf_float+0x40e>
 800af4c:	2301      	movs	r3, #1
 800af4e:	4642      	mov	r2, r8
 800af50:	e7e1      	b.n	800af16 <_printf_float+0x3ee>
 800af52:	2301      	movs	r3, #1
 800af54:	464a      	mov	r2, r9
 800af56:	4631      	mov	r1, r6
 800af58:	4628      	mov	r0, r5
 800af5a:	47b8      	blx	r7
 800af5c:	3001      	adds	r0, #1
 800af5e:	f43f ae3e 	beq.w	800abde <_printf_float+0xb6>
 800af62:	f108 0801 	add.w	r8, r8, #1
 800af66:	68e3      	ldr	r3, [r4, #12]
 800af68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af6a:	1a5b      	subs	r3, r3, r1
 800af6c:	4543      	cmp	r3, r8
 800af6e:	dcf0      	bgt.n	800af52 <_printf_float+0x42a>
 800af70:	e6fc      	b.n	800ad6c <_printf_float+0x244>
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	f104 0919 	add.w	r9, r4, #25
 800af7a:	e7f4      	b.n	800af66 <_printf_float+0x43e>

0800af7c <_printf_common>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	4616      	mov	r6, r2
 800af82:	4698      	mov	r8, r3
 800af84:	688a      	ldr	r2, [r1, #8]
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bfb8      	it	lt
 800af90:	4613      	movlt	r3, r2
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af98:	4607      	mov	r7, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b10a      	cbz	r2, 800afa2 <_printf_common+0x26>
 800af9e:	3301      	adds	r3, #1
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	0699      	lsls	r1, r3, #26
 800afa6:	bf42      	ittt	mi
 800afa8:	6833      	ldrmi	r3, [r6, #0]
 800afaa:	3302      	addmi	r3, #2
 800afac:	6033      	strmi	r3, [r6, #0]
 800afae:	6825      	ldr	r5, [r4, #0]
 800afb0:	f015 0506 	ands.w	r5, r5, #6
 800afb4:	d106      	bne.n	800afc4 <_printf_common+0x48>
 800afb6:	f104 0a19 	add.w	sl, r4, #25
 800afba:	68e3      	ldr	r3, [r4, #12]
 800afbc:	6832      	ldr	r2, [r6, #0]
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dc26      	bgt.n	800b012 <_printf_common+0x96>
 800afc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afc8:	6822      	ldr	r2, [r4, #0]
 800afca:	3b00      	subs	r3, #0
 800afcc:	bf18      	it	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	0692      	lsls	r2, r2, #26
 800afd2:	d42b      	bmi.n	800b02c <_printf_common+0xb0>
 800afd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afd8:	4641      	mov	r1, r8
 800afda:	4638      	mov	r0, r7
 800afdc:	47c8      	blx	r9
 800afde:	3001      	adds	r0, #1
 800afe0:	d01e      	beq.n	800b020 <_printf_common+0xa4>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	6922      	ldr	r2, [r4, #16]
 800afe6:	f003 0306 	and.w	r3, r3, #6
 800afea:	2b04      	cmp	r3, #4
 800afec:	bf02      	ittt	eq
 800afee:	68e5      	ldreq	r5, [r4, #12]
 800aff0:	6833      	ldreq	r3, [r6, #0]
 800aff2:	1aed      	subeq	r5, r5, r3
 800aff4:	68a3      	ldr	r3, [r4, #8]
 800aff6:	bf0c      	ite	eq
 800aff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800affc:	2500      	movne	r5, #0
 800affe:	4293      	cmp	r3, r2
 800b000:	bfc4      	itt	gt
 800b002:	1a9b      	subgt	r3, r3, r2
 800b004:	18ed      	addgt	r5, r5, r3
 800b006:	2600      	movs	r6, #0
 800b008:	341a      	adds	r4, #26
 800b00a:	42b5      	cmp	r5, r6
 800b00c:	d11a      	bne.n	800b044 <_printf_common+0xc8>
 800b00e:	2000      	movs	r0, #0
 800b010:	e008      	b.n	800b024 <_printf_common+0xa8>
 800b012:	2301      	movs	r3, #1
 800b014:	4652      	mov	r2, sl
 800b016:	4641      	mov	r1, r8
 800b018:	4638      	mov	r0, r7
 800b01a:	47c8      	blx	r9
 800b01c:	3001      	adds	r0, #1
 800b01e:	d103      	bne.n	800b028 <_printf_common+0xac>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	3501      	adds	r5, #1
 800b02a:	e7c6      	b.n	800afba <_printf_common+0x3e>
 800b02c:	18e1      	adds	r1, r4, r3
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	2030      	movs	r0, #48	@ 0x30
 800b032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b036:	4422      	add	r2, r4
 800b038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b03c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b040:	3302      	adds	r3, #2
 800b042:	e7c7      	b.n	800afd4 <_printf_common+0x58>
 800b044:	2301      	movs	r3, #1
 800b046:	4622      	mov	r2, r4
 800b048:	4641      	mov	r1, r8
 800b04a:	4638      	mov	r0, r7
 800b04c:	47c8      	blx	r9
 800b04e:	3001      	adds	r0, #1
 800b050:	d0e6      	beq.n	800b020 <_printf_common+0xa4>
 800b052:	3601      	adds	r6, #1
 800b054:	e7d9      	b.n	800b00a <_printf_common+0x8e>
	...

0800b058 <_printf_i>:
 800b058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	7e0f      	ldrb	r7, [r1, #24]
 800b05e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b060:	2f78      	cmp	r7, #120	@ 0x78
 800b062:	4691      	mov	r9, r2
 800b064:	4680      	mov	r8, r0
 800b066:	460c      	mov	r4, r1
 800b068:	469a      	mov	sl, r3
 800b06a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b06e:	d807      	bhi.n	800b080 <_printf_i+0x28>
 800b070:	2f62      	cmp	r7, #98	@ 0x62
 800b072:	d80a      	bhi.n	800b08a <_printf_i+0x32>
 800b074:	2f00      	cmp	r7, #0
 800b076:	f000 80d2 	beq.w	800b21e <_printf_i+0x1c6>
 800b07a:	2f58      	cmp	r7, #88	@ 0x58
 800b07c:	f000 80b9 	beq.w	800b1f2 <_printf_i+0x19a>
 800b080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b088:	e03a      	b.n	800b100 <_printf_i+0xa8>
 800b08a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b08e:	2b15      	cmp	r3, #21
 800b090:	d8f6      	bhi.n	800b080 <_printf_i+0x28>
 800b092:	a101      	add	r1, pc, #4	@ (adr r1, 800b098 <_printf_i+0x40>)
 800b094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b105 	.word	0x0800b105
 800b0a0:	0800b081 	.word	0x0800b081
 800b0a4:	0800b081 	.word	0x0800b081
 800b0a8:	0800b081 	.word	0x0800b081
 800b0ac:	0800b081 	.word	0x0800b081
 800b0b0:	0800b105 	.word	0x0800b105
 800b0b4:	0800b081 	.word	0x0800b081
 800b0b8:	0800b081 	.word	0x0800b081
 800b0bc:	0800b081 	.word	0x0800b081
 800b0c0:	0800b081 	.word	0x0800b081
 800b0c4:	0800b205 	.word	0x0800b205
 800b0c8:	0800b12f 	.word	0x0800b12f
 800b0cc:	0800b1bf 	.word	0x0800b1bf
 800b0d0:	0800b081 	.word	0x0800b081
 800b0d4:	0800b081 	.word	0x0800b081
 800b0d8:	0800b227 	.word	0x0800b227
 800b0dc:	0800b081 	.word	0x0800b081
 800b0e0:	0800b12f 	.word	0x0800b12f
 800b0e4:	0800b081 	.word	0x0800b081
 800b0e8:	0800b081 	.word	0x0800b081
 800b0ec:	0800b1c7 	.word	0x0800b1c7
 800b0f0:	6833      	ldr	r3, [r6, #0]
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6032      	str	r2, [r6, #0]
 800b0f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b100:	2301      	movs	r3, #1
 800b102:	e09d      	b.n	800b240 <_printf_i+0x1e8>
 800b104:	6833      	ldr	r3, [r6, #0]
 800b106:	6820      	ldr	r0, [r4, #0]
 800b108:	1d19      	adds	r1, r3, #4
 800b10a:	6031      	str	r1, [r6, #0]
 800b10c:	0606      	lsls	r6, r0, #24
 800b10e:	d501      	bpl.n	800b114 <_printf_i+0xbc>
 800b110:	681d      	ldr	r5, [r3, #0]
 800b112:	e003      	b.n	800b11c <_printf_i+0xc4>
 800b114:	0645      	lsls	r5, r0, #25
 800b116:	d5fb      	bpl.n	800b110 <_printf_i+0xb8>
 800b118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b11c:	2d00      	cmp	r5, #0
 800b11e:	da03      	bge.n	800b128 <_printf_i+0xd0>
 800b120:	232d      	movs	r3, #45	@ 0x2d
 800b122:	426d      	negs	r5, r5
 800b124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b128:	4859      	ldr	r0, [pc, #356]	@ (800b290 <_printf_i+0x238>)
 800b12a:	230a      	movs	r3, #10
 800b12c:	e011      	b.n	800b152 <_printf_i+0xfa>
 800b12e:	6821      	ldr	r1, [r4, #0]
 800b130:	6833      	ldr	r3, [r6, #0]
 800b132:	0608      	lsls	r0, r1, #24
 800b134:	f853 5b04 	ldr.w	r5, [r3], #4
 800b138:	d402      	bmi.n	800b140 <_printf_i+0xe8>
 800b13a:	0649      	lsls	r1, r1, #25
 800b13c:	bf48      	it	mi
 800b13e:	b2ad      	uxthmi	r5, r5
 800b140:	2f6f      	cmp	r7, #111	@ 0x6f
 800b142:	4853      	ldr	r0, [pc, #332]	@ (800b290 <_printf_i+0x238>)
 800b144:	6033      	str	r3, [r6, #0]
 800b146:	bf14      	ite	ne
 800b148:	230a      	movne	r3, #10
 800b14a:	2308      	moveq	r3, #8
 800b14c:	2100      	movs	r1, #0
 800b14e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b152:	6866      	ldr	r6, [r4, #4]
 800b154:	60a6      	str	r6, [r4, #8]
 800b156:	2e00      	cmp	r6, #0
 800b158:	bfa2      	ittt	ge
 800b15a:	6821      	ldrge	r1, [r4, #0]
 800b15c:	f021 0104 	bicge.w	r1, r1, #4
 800b160:	6021      	strge	r1, [r4, #0]
 800b162:	b90d      	cbnz	r5, 800b168 <_printf_i+0x110>
 800b164:	2e00      	cmp	r6, #0
 800b166:	d04b      	beq.n	800b200 <_printf_i+0x1a8>
 800b168:	4616      	mov	r6, r2
 800b16a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b16e:	fb03 5711 	mls	r7, r3, r1, r5
 800b172:	5dc7      	ldrb	r7, [r0, r7]
 800b174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b178:	462f      	mov	r7, r5
 800b17a:	42bb      	cmp	r3, r7
 800b17c:	460d      	mov	r5, r1
 800b17e:	d9f4      	bls.n	800b16a <_printf_i+0x112>
 800b180:	2b08      	cmp	r3, #8
 800b182:	d10b      	bne.n	800b19c <_printf_i+0x144>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	07df      	lsls	r7, r3, #31
 800b188:	d508      	bpl.n	800b19c <_printf_i+0x144>
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	6861      	ldr	r1, [r4, #4]
 800b18e:	4299      	cmp	r1, r3
 800b190:	bfde      	ittt	le
 800b192:	2330      	movle	r3, #48	@ 0x30
 800b194:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b198:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b19c:	1b92      	subs	r2, r2, r6
 800b19e:	6122      	str	r2, [r4, #16]
 800b1a0:	f8cd a000 	str.w	sl, [sp]
 800b1a4:	464b      	mov	r3, r9
 800b1a6:	aa03      	add	r2, sp, #12
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	f7ff fee6 	bl	800af7c <_printf_common>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d14a      	bne.n	800b24a <_printf_i+0x1f2>
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1b8:	b004      	add	sp, #16
 800b1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	f043 0320 	orr.w	r3, r3, #32
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	4833      	ldr	r0, [pc, #204]	@ (800b294 <_printf_i+0x23c>)
 800b1c8:	2778      	movs	r7, #120	@ 0x78
 800b1ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	6831      	ldr	r1, [r6, #0]
 800b1d2:	061f      	lsls	r7, r3, #24
 800b1d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1d8:	d402      	bmi.n	800b1e0 <_printf_i+0x188>
 800b1da:	065f      	lsls	r7, r3, #25
 800b1dc:	bf48      	it	mi
 800b1de:	b2ad      	uxthmi	r5, r5
 800b1e0:	6031      	str	r1, [r6, #0]
 800b1e2:	07d9      	lsls	r1, r3, #31
 800b1e4:	bf44      	itt	mi
 800b1e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ea:	6023      	strmi	r3, [r4, #0]
 800b1ec:	b11d      	cbz	r5, 800b1f6 <_printf_i+0x19e>
 800b1ee:	2310      	movs	r3, #16
 800b1f0:	e7ac      	b.n	800b14c <_printf_i+0xf4>
 800b1f2:	4827      	ldr	r0, [pc, #156]	@ (800b290 <_printf_i+0x238>)
 800b1f4:	e7e9      	b.n	800b1ca <_printf_i+0x172>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	f023 0320 	bic.w	r3, r3, #32
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	e7f6      	b.n	800b1ee <_printf_i+0x196>
 800b200:	4616      	mov	r6, r2
 800b202:	e7bd      	b.n	800b180 <_printf_i+0x128>
 800b204:	6833      	ldr	r3, [r6, #0]
 800b206:	6825      	ldr	r5, [r4, #0]
 800b208:	6961      	ldr	r1, [r4, #20]
 800b20a:	1d18      	adds	r0, r3, #4
 800b20c:	6030      	str	r0, [r6, #0]
 800b20e:	062e      	lsls	r6, r5, #24
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	d501      	bpl.n	800b218 <_printf_i+0x1c0>
 800b214:	6019      	str	r1, [r3, #0]
 800b216:	e002      	b.n	800b21e <_printf_i+0x1c6>
 800b218:	0668      	lsls	r0, r5, #25
 800b21a:	d5fb      	bpl.n	800b214 <_printf_i+0x1bc>
 800b21c:	8019      	strh	r1, [r3, #0]
 800b21e:	2300      	movs	r3, #0
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	4616      	mov	r6, r2
 800b224:	e7bc      	b.n	800b1a0 <_printf_i+0x148>
 800b226:	6833      	ldr	r3, [r6, #0]
 800b228:	1d1a      	adds	r2, r3, #4
 800b22a:	6032      	str	r2, [r6, #0]
 800b22c:	681e      	ldr	r6, [r3, #0]
 800b22e:	6862      	ldr	r2, [r4, #4]
 800b230:	2100      	movs	r1, #0
 800b232:	4630      	mov	r0, r6
 800b234:	f7f4 ffcc 	bl	80001d0 <memchr>
 800b238:	b108      	cbz	r0, 800b23e <_printf_i+0x1e6>
 800b23a:	1b80      	subs	r0, r0, r6
 800b23c:	6060      	str	r0, [r4, #4]
 800b23e:	6863      	ldr	r3, [r4, #4]
 800b240:	6123      	str	r3, [r4, #16]
 800b242:	2300      	movs	r3, #0
 800b244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b248:	e7aa      	b.n	800b1a0 <_printf_i+0x148>
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	4632      	mov	r2, r6
 800b24e:	4649      	mov	r1, r9
 800b250:	4640      	mov	r0, r8
 800b252:	47d0      	blx	sl
 800b254:	3001      	adds	r0, #1
 800b256:	d0ad      	beq.n	800b1b4 <_printf_i+0x15c>
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	079b      	lsls	r3, r3, #30
 800b25c:	d413      	bmi.n	800b286 <_printf_i+0x22e>
 800b25e:	68e0      	ldr	r0, [r4, #12]
 800b260:	9b03      	ldr	r3, [sp, #12]
 800b262:	4298      	cmp	r0, r3
 800b264:	bfb8      	it	lt
 800b266:	4618      	movlt	r0, r3
 800b268:	e7a6      	b.n	800b1b8 <_printf_i+0x160>
 800b26a:	2301      	movs	r3, #1
 800b26c:	4632      	mov	r2, r6
 800b26e:	4649      	mov	r1, r9
 800b270:	4640      	mov	r0, r8
 800b272:	47d0      	blx	sl
 800b274:	3001      	adds	r0, #1
 800b276:	d09d      	beq.n	800b1b4 <_printf_i+0x15c>
 800b278:	3501      	adds	r5, #1
 800b27a:	68e3      	ldr	r3, [r4, #12]
 800b27c:	9903      	ldr	r1, [sp, #12]
 800b27e:	1a5b      	subs	r3, r3, r1
 800b280:	42ab      	cmp	r3, r5
 800b282:	dcf2      	bgt.n	800b26a <_printf_i+0x212>
 800b284:	e7eb      	b.n	800b25e <_printf_i+0x206>
 800b286:	2500      	movs	r5, #0
 800b288:	f104 0619 	add.w	r6, r4, #25
 800b28c:	e7f5      	b.n	800b27a <_printf_i+0x222>
 800b28e:	bf00      	nop
 800b290:	0800e08e 	.word	0x0800e08e
 800b294:	0800e09f 	.word	0x0800e09f

0800b298 <sniprintf>:
 800b298:	b40c      	push	{r2, r3}
 800b29a:	b530      	push	{r4, r5, lr}
 800b29c:	4b17      	ldr	r3, [pc, #92]	@ (800b2fc <sniprintf+0x64>)
 800b29e:	1e0c      	subs	r4, r1, #0
 800b2a0:	681d      	ldr	r5, [r3, #0]
 800b2a2:	b09d      	sub	sp, #116	@ 0x74
 800b2a4:	da08      	bge.n	800b2b8 <sniprintf+0x20>
 800b2a6:	238b      	movs	r3, #139	@ 0x8b
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2ae:	b01d      	add	sp, #116	@ 0x74
 800b2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2b4:	b002      	add	sp, #8
 800b2b6:	4770      	bx	lr
 800b2b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2c0:	bf14      	ite	ne
 800b2c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b2c6:	4623      	moveq	r3, r4
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	9307      	str	r3, [sp, #28]
 800b2cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2d0:	9002      	str	r0, [sp, #8]
 800b2d2:	9006      	str	r0, [sp, #24]
 800b2d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b2da:	ab21      	add	r3, sp, #132	@ 0x84
 800b2dc:	a902      	add	r1, sp, #8
 800b2de:	4628      	mov	r0, r5
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	f001 f905 	bl	800c4f0 <_svfiprintf_r>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	bfbc      	itt	lt
 800b2ea:	238b      	movlt	r3, #139	@ 0x8b
 800b2ec:	602b      	strlt	r3, [r5, #0]
 800b2ee:	2c00      	cmp	r4, #0
 800b2f0:	d0dd      	beq.n	800b2ae <sniprintf+0x16>
 800b2f2:	9b02      	ldr	r3, [sp, #8]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	e7d9      	b.n	800b2ae <sniprintf+0x16>
 800b2fa:	bf00      	nop
 800b2fc:	20000104 	.word	0x20000104

0800b300 <siprintf>:
 800b300:	b40e      	push	{r1, r2, r3}
 800b302:	b500      	push	{lr}
 800b304:	b09c      	sub	sp, #112	@ 0x70
 800b306:	ab1d      	add	r3, sp, #116	@ 0x74
 800b308:	9002      	str	r0, [sp, #8]
 800b30a:	9006      	str	r0, [sp, #24]
 800b30c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b310:	4809      	ldr	r0, [pc, #36]	@ (800b338 <siprintf+0x38>)
 800b312:	9107      	str	r1, [sp, #28]
 800b314:	9104      	str	r1, [sp, #16]
 800b316:	4909      	ldr	r1, [pc, #36]	@ (800b33c <siprintf+0x3c>)
 800b318:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	6800      	ldr	r0, [r0, #0]
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	a902      	add	r1, sp, #8
 800b324:	f001 f8e4 	bl	800c4f0 <_svfiprintf_r>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	2200      	movs	r2, #0
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	b01c      	add	sp, #112	@ 0x70
 800b330:	f85d eb04 	ldr.w	lr, [sp], #4
 800b334:	b003      	add	sp, #12
 800b336:	4770      	bx	lr
 800b338:	20000104 	.word	0x20000104
 800b33c:	ffff0208 	.word	0xffff0208

0800b340 <std>:
 800b340:	2300      	movs	r3, #0
 800b342:	b510      	push	{r4, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	e9c0 3300 	strd	r3, r3, [r0]
 800b34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b34e:	6083      	str	r3, [r0, #8]
 800b350:	8181      	strh	r1, [r0, #12]
 800b352:	6643      	str	r3, [r0, #100]	@ 0x64
 800b354:	81c2      	strh	r2, [r0, #14]
 800b356:	6183      	str	r3, [r0, #24]
 800b358:	4619      	mov	r1, r3
 800b35a:	2208      	movs	r2, #8
 800b35c:	305c      	adds	r0, #92	@ 0x5c
 800b35e:	f000 f9b7 	bl	800b6d0 <memset>
 800b362:	4b0d      	ldr	r3, [pc, #52]	@ (800b398 <std+0x58>)
 800b364:	6263      	str	r3, [r4, #36]	@ 0x24
 800b366:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <std+0x5c>)
 800b368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b36a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <std+0x60>)
 800b36c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <std+0x64>)
 800b370:	6323      	str	r3, [r4, #48]	@ 0x30
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <std+0x68>)
 800b374:	6224      	str	r4, [r4, #32]
 800b376:	429c      	cmp	r4, r3
 800b378:	d006      	beq.n	800b388 <std+0x48>
 800b37a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b37e:	4294      	cmp	r4, r2
 800b380:	d002      	beq.n	800b388 <std+0x48>
 800b382:	33d0      	adds	r3, #208	@ 0xd0
 800b384:	429c      	cmp	r4, r3
 800b386:	d105      	bne.n	800b394 <std+0x54>
 800b388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b390:	f000 b9d4 	b.w	800b73c <__retarget_lock_init_recursive>
 800b394:	bd10      	pop	{r4, pc}
 800b396:	bf00      	nop
 800b398:	0800d335 	.word	0x0800d335
 800b39c:	0800d357 	.word	0x0800d357
 800b3a0:	0800d38f 	.word	0x0800d38f
 800b3a4:	0800d3b3 	.word	0x0800d3b3
 800b3a8:	20000de8 	.word	0x20000de8

0800b3ac <stdio_exit_handler>:
 800b3ac:	4a02      	ldr	r2, [pc, #8]	@ (800b3b8 <stdio_exit_handler+0xc>)
 800b3ae:	4903      	ldr	r1, [pc, #12]	@ (800b3bc <stdio_exit_handler+0x10>)
 800b3b0:	4803      	ldr	r0, [pc, #12]	@ (800b3c0 <stdio_exit_handler+0x14>)
 800b3b2:	f000 b869 	b.w	800b488 <_fwalk_sglue>
 800b3b6:	bf00      	nop
 800b3b8:	200000f8 	.word	0x200000f8
 800b3bc:	0800cbc9 	.word	0x0800cbc9
 800b3c0:	20000108 	.word	0x20000108

0800b3c4 <cleanup_stdio>:
 800b3c4:	6841      	ldr	r1, [r0, #4]
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f8 <cleanup_stdio+0x34>)
 800b3c8:	4299      	cmp	r1, r3
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	d001      	beq.n	800b3d4 <cleanup_stdio+0x10>
 800b3d0:	f001 fbfa 	bl	800cbc8 <_fflush_r>
 800b3d4:	68a1      	ldr	r1, [r4, #8]
 800b3d6:	4b09      	ldr	r3, [pc, #36]	@ (800b3fc <cleanup_stdio+0x38>)
 800b3d8:	4299      	cmp	r1, r3
 800b3da:	d002      	beq.n	800b3e2 <cleanup_stdio+0x1e>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f001 fbf3 	bl	800cbc8 <_fflush_r>
 800b3e2:	68e1      	ldr	r1, [r4, #12]
 800b3e4:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <cleanup_stdio+0x3c>)
 800b3e6:	4299      	cmp	r1, r3
 800b3e8:	d004      	beq.n	800b3f4 <cleanup_stdio+0x30>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f0:	f001 bbea 	b.w	800cbc8 <_fflush_r>
 800b3f4:	bd10      	pop	{r4, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000de8 	.word	0x20000de8
 800b3fc:	20000e50 	.word	0x20000e50
 800b400:	20000eb8 	.word	0x20000eb8

0800b404 <global_stdio_init.part.0>:
 800b404:	b510      	push	{r4, lr}
 800b406:	4b0b      	ldr	r3, [pc, #44]	@ (800b434 <global_stdio_init.part.0+0x30>)
 800b408:	4c0b      	ldr	r4, [pc, #44]	@ (800b438 <global_stdio_init.part.0+0x34>)
 800b40a:	4a0c      	ldr	r2, [pc, #48]	@ (800b43c <global_stdio_init.part.0+0x38>)
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	4620      	mov	r0, r4
 800b410:	2200      	movs	r2, #0
 800b412:	2104      	movs	r1, #4
 800b414:	f7ff ff94 	bl	800b340 <std>
 800b418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b41c:	2201      	movs	r2, #1
 800b41e:	2109      	movs	r1, #9
 800b420:	f7ff ff8e 	bl	800b340 <std>
 800b424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b428:	2202      	movs	r2, #2
 800b42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42e:	2112      	movs	r1, #18
 800b430:	f7ff bf86 	b.w	800b340 <std>
 800b434:	20000f20 	.word	0x20000f20
 800b438:	20000de8 	.word	0x20000de8
 800b43c:	0800b3ad 	.word	0x0800b3ad

0800b440 <__sfp_lock_acquire>:
 800b440:	4801      	ldr	r0, [pc, #4]	@ (800b448 <__sfp_lock_acquire+0x8>)
 800b442:	f000 b97c 	b.w	800b73e <__retarget_lock_acquire_recursive>
 800b446:	bf00      	nop
 800b448:	20000f25 	.word	0x20000f25

0800b44c <__sfp_lock_release>:
 800b44c:	4801      	ldr	r0, [pc, #4]	@ (800b454 <__sfp_lock_release+0x8>)
 800b44e:	f000 b977 	b.w	800b740 <__retarget_lock_release_recursive>
 800b452:	bf00      	nop
 800b454:	20000f25 	.word	0x20000f25

0800b458 <__sinit>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	4604      	mov	r4, r0
 800b45c:	f7ff fff0 	bl	800b440 <__sfp_lock_acquire>
 800b460:	6a23      	ldr	r3, [r4, #32]
 800b462:	b11b      	cbz	r3, 800b46c <__sinit+0x14>
 800b464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b468:	f7ff bff0 	b.w	800b44c <__sfp_lock_release>
 800b46c:	4b04      	ldr	r3, [pc, #16]	@ (800b480 <__sinit+0x28>)
 800b46e:	6223      	str	r3, [r4, #32]
 800b470:	4b04      	ldr	r3, [pc, #16]	@ (800b484 <__sinit+0x2c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f5      	bne.n	800b464 <__sinit+0xc>
 800b478:	f7ff ffc4 	bl	800b404 <global_stdio_init.part.0>
 800b47c:	e7f2      	b.n	800b464 <__sinit+0xc>
 800b47e:	bf00      	nop
 800b480:	0800b3c5 	.word	0x0800b3c5
 800b484:	20000f20 	.word	0x20000f20

0800b488 <_fwalk_sglue>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4607      	mov	r7, r0
 800b48e:	4688      	mov	r8, r1
 800b490:	4614      	mov	r4, r2
 800b492:	2600      	movs	r6, #0
 800b494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b498:	f1b9 0901 	subs.w	r9, r9, #1
 800b49c:	d505      	bpl.n	800b4aa <_fwalk_sglue+0x22>
 800b49e:	6824      	ldr	r4, [r4, #0]
 800b4a0:	2c00      	cmp	r4, #0
 800b4a2:	d1f7      	bne.n	800b494 <_fwalk_sglue+0xc>
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d907      	bls.n	800b4c0 <_fwalk_sglue+0x38>
 800b4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	d003      	beq.n	800b4c0 <_fwalk_sglue+0x38>
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	4306      	orrs	r6, r0
 800b4c0:	3568      	adds	r5, #104	@ 0x68
 800b4c2:	e7e9      	b.n	800b498 <_fwalk_sglue+0x10>

0800b4c4 <iprintf>:
 800b4c4:	b40f      	push	{r0, r1, r2, r3}
 800b4c6:	b507      	push	{r0, r1, r2, lr}
 800b4c8:	4906      	ldr	r1, [pc, #24]	@ (800b4e4 <iprintf+0x20>)
 800b4ca:	ab04      	add	r3, sp, #16
 800b4cc:	6808      	ldr	r0, [r1, #0]
 800b4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d2:	6881      	ldr	r1, [r0, #8]
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f001 f931 	bl	800c73c <_vfiprintf_r>
 800b4da:	b003      	add	sp, #12
 800b4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4e0:	b004      	add	sp, #16
 800b4e2:	4770      	bx	lr
 800b4e4:	20000104 	.word	0x20000104

0800b4e8 <_puts_r>:
 800b4e8:	6a03      	ldr	r3, [r0, #32]
 800b4ea:	b570      	push	{r4, r5, r6, lr}
 800b4ec:	6884      	ldr	r4, [r0, #8]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	b90b      	cbnz	r3, 800b4f8 <_puts_r+0x10>
 800b4f4:	f7ff ffb0 	bl	800b458 <__sinit>
 800b4f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4fa:	07db      	lsls	r3, r3, #31
 800b4fc:	d405      	bmi.n	800b50a <_puts_r+0x22>
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	0598      	lsls	r0, r3, #22
 800b502:	d402      	bmi.n	800b50a <_puts_r+0x22>
 800b504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b506:	f000 f91a 	bl	800b73e <__retarget_lock_acquire_recursive>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	0719      	lsls	r1, r3, #28
 800b50e:	d502      	bpl.n	800b516 <_puts_r+0x2e>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d135      	bne.n	800b582 <_puts_r+0x9a>
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f001 ffcd 	bl	800d4b8 <__swsetup_r>
 800b51e:	b380      	cbz	r0, 800b582 <_puts_r+0x9a>
 800b520:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b526:	07da      	lsls	r2, r3, #31
 800b528:	d405      	bmi.n	800b536 <_puts_r+0x4e>
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	059b      	lsls	r3, r3, #22
 800b52e:	d402      	bmi.n	800b536 <_puts_r+0x4e>
 800b530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b532:	f000 f905 	bl	800b740 <__retarget_lock_release_recursive>
 800b536:	4628      	mov	r0, r5
 800b538:	bd70      	pop	{r4, r5, r6, pc}
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da04      	bge.n	800b548 <_puts_r+0x60>
 800b53e:	69a2      	ldr	r2, [r4, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	dc17      	bgt.n	800b574 <_puts_r+0x8c>
 800b544:	290a      	cmp	r1, #10
 800b546:	d015      	beq.n	800b574 <_puts_r+0x8c>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	6022      	str	r2, [r4, #0]
 800b54e:	7019      	strb	r1, [r3, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b556:	3b01      	subs	r3, #1
 800b558:	60a3      	str	r3, [r4, #8]
 800b55a:	2900      	cmp	r1, #0
 800b55c:	d1ed      	bne.n	800b53a <_puts_r+0x52>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	da11      	bge.n	800b586 <_puts_r+0x9e>
 800b562:	4622      	mov	r2, r4
 800b564:	210a      	movs	r1, #10
 800b566:	4628      	mov	r0, r5
 800b568:	f001 ff68 	bl	800d43c <__swbuf_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	d0d7      	beq.n	800b520 <_puts_r+0x38>
 800b570:	250a      	movs	r5, #10
 800b572:	e7d7      	b.n	800b524 <_puts_r+0x3c>
 800b574:	4622      	mov	r2, r4
 800b576:	4628      	mov	r0, r5
 800b578:	f001 ff60 	bl	800d43c <__swbuf_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1e7      	bne.n	800b550 <_puts_r+0x68>
 800b580:	e7ce      	b.n	800b520 <_puts_r+0x38>
 800b582:	3e01      	subs	r6, #1
 800b584:	e7e4      	b.n	800b550 <_puts_r+0x68>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	6022      	str	r2, [r4, #0]
 800b58c:	220a      	movs	r2, #10
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	e7ee      	b.n	800b570 <_puts_r+0x88>
	...

0800b594 <puts>:
 800b594:	4b02      	ldr	r3, [pc, #8]	@ (800b5a0 <puts+0xc>)
 800b596:	4601      	mov	r1, r0
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	f7ff bfa5 	b.w	800b4e8 <_puts_r>
 800b59e:	bf00      	nop
 800b5a0:	20000104 	.word	0x20000104

0800b5a4 <strncpy>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	3901      	subs	r1, #1
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	b132      	cbz	r2, 800b5ba <strncpy+0x16>
 800b5ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b5b0:	f803 4b01 	strb.w	r4, [r3], #1
 800b5b4:	3a01      	subs	r2, #1
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	d1f7      	bne.n	800b5aa <strncpy+0x6>
 800b5ba:	441a      	add	r2, r3
 800b5bc:	2100      	movs	r1, #0
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d100      	bne.n	800b5c4 <strncpy+0x20>
 800b5c2:	bd10      	pop	{r4, pc}
 800b5c4:	f803 1b01 	strb.w	r1, [r3], #1
 800b5c8:	e7f9      	b.n	800b5be <strncpy+0x1a>
	...

0800b5cc <strtok>:
 800b5cc:	4b16      	ldr	r3, [pc, #88]	@ (800b628 <strtok+0x5c>)
 800b5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	681f      	ldr	r7, [r3, #0]
 800b5d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	460e      	mov	r6, r1
 800b5da:	b9ec      	cbnz	r4, 800b618 <strtok+0x4c>
 800b5dc:	2050      	movs	r0, #80	@ 0x50
 800b5de:	f001 f9c5 	bl	800c96c <malloc>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b5e6:	b920      	cbnz	r0, 800b5f2 <strtok+0x26>
 800b5e8:	4b10      	ldr	r3, [pc, #64]	@ (800b62c <strtok+0x60>)
 800b5ea:	4811      	ldr	r0, [pc, #68]	@ (800b630 <strtok+0x64>)
 800b5ec:	215b      	movs	r1, #91	@ 0x5b
 800b5ee:	f000 f8b7 	bl	800b760 <__assert_func>
 800b5f2:	e9c0 4400 	strd	r4, r4, [r0]
 800b5f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b5fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b5fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b602:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b606:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b60a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b60e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b612:	6184      	str	r4, [r0, #24]
 800b614:	7704      	strb	r4, [r0, #28]
 800b616:	6244      	str	r4, [r0, #36]	@ 0x24
 800b618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b61a:	4631      	mov	r1, r6
 800b61c:	4628      	mov	r0, r5
 800b61e:	2301      	movs	r3, #1
 800b620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	f000 b806 	b.w	800b634 <__strtok_r>
 800b628:	20000104 	.word	0x20000104
 800b62c:	0800e0b0 	.word	0x0800e0b0
 800b630:	0800e0c7 	.word	0x0800e0c7

0800b634 <__strtok_r>:
 800b634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b636:	4604      	mov	r4, r0
 800b638:	b908      	cbnz	r0, 800b63e <__strtok_r+0xa>
 800b63a:	6814      	ldr	r4, [r2, #0]
 800b63c:	b144      	cbz	r4, 800b650 <__strtok_r+0x1c>
 800b63e:	4620      	mov	r0, r4
 800b640:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b644:	460f      	mov	r7, r1
 800b646:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b64a:	b91e      	cbnz	r6, 800b654 <__strtok_r+0x20>
 800b64c:	b965      	cbnz	r5, 800b668 <__strtok_r+0x34>
 800b64e:	6015      	str	r5, [r2, #0]
 800b650:	2000      	movs	r0, #0
 800b652:	e005      	b.n	800b660 <__strtok_r+0x2c>
 800b654:	42b5      	cmp	r5, r6
 800b656:	d1f6      	bne.n	800b646 <__strtok_r+0x12>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1f0      	bne.n	800b63e <__strtok_r+0xa>
 800b65c:	6014      	str	r4, [r2, #0]
 800b65e:	7003      	strb	r3, [r0, #0]
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b662:	461c      	mov	r4, r3
 800b664:	e00c      	b.n	800b680 <__strtok_r+0x4c>
 800b666:	b915      	cbnz	r5, 800b66e <__strtok_r+0x3a>
 800b668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b66c:	460e      	mov	r6, r1
 800b66e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b672:	42ab      	cmp	r3, r5
 800b674:	d1f7      	bne.n	800b666 <__strtok_r+0x32>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0f3      	beq.n	800b662 <__strtok_r+0x2e>
 800b67a:	2300      	movs	r3, #0
 800b67c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b680:	6014      	str	r4, [r2, #0]
 800b682:	e7ed      	b.n	800b660 <__strtok_r+0x2c>

0800b684 <strstr>:
 800b684:	780a      	ldrb	r2, [r1, #0]
 800b686:	b570      	push	{r4, r5, r6, lr}
 800b688:	b96a      	cbnz	r2, 800b6a6 <strstr+0x22>
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d109      	bne.n	800b6a4 <strstr+0x20>
 800b690:	460c      	mov	r4, r1
 800b692:	4605      	mov	r5, r0
 800b694:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0f6      	beq.n	800b68a <strstr+0x6>
 800b69c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b6a0:	429e      	cmp	r6, r3
 800b6a2:	d0f7      	beq.n	800b694 <strstr+0x10>
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	7803      	ldrb	r3, [r0, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1ef      	bne.n	800b68c <strstr+0x8>
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	e7ec      	b.n	800b68a <strstr+0x6>

0800b6b0 <memcmp>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	3901      	subs	r1, #1
 800b6b4:	4402      	add	r2, r0
 800b6b6:	4290      	cmp	r0, r2
 800b6b8:	d101      	bne.n	800b6be <memcmp+0xe>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	e005      	b.n	800b6ca <memcmp+0x1a>
 800b6be:	7803      	ldrb	r3, [r0, #0]
 800b6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d001      	beq.n	800b6cc <memcmp+0x1c>
 800b6c8:	1b18      	subs	r0, r3, r4
 800b6ca:	bd10      	pop	{r4, pc}
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	e7f2      	b.n	800b6b6 <memcmp+0x6>

0800b6d0 <memset>:
 800b6d0:	4402      	add	r2, r0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d100      	bne.n	800b6da <memset+0xa>
 800b6d8:	4770      	bx	lr
 800b6da:	f803 1b01 	strb.w	r1, [r3], #1
 800b6de:	e7f9      	b.n	800b6d4 <memset+0x4>

0800b6e0 <_localeconv_r>:
 800b6e0:	4800      	ldr	r0, [pc, #0]	@ (800b6e4 <_localeconv_r+0x4>)
 800b6e2:	4770      	bx	lr
 800b6e4:	20000244 	.word	0x20000244

0800b6e8 <__errno>:
 800b6e8:	4b01      	ldr	r3, [pc, #4]	@ (800b6f0 <__errno+0x8>)
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20000104 	.word	0x20000104

0800b6f4 <__libc_init_array>:
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b72c <__libc_init_array+0x38>)
 800b6f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b730 <__libc_init_array+0x3c>)
 800b6fa:	1b64      	subs	r4, r4, r5
 800b6fc:	10a4      	asrs	r4, r4, #2
 800b6fe:	2600      	movs	r6, #0
 800b700:	42a6      	cmp	r6, r4
 800b702:	d109      	bne.n	800b718 <__libc_init_array+0x24>
 800b704:	4d0b      	ldr	r5, [pc, #44]	@ (800b734 <__libc_init_array+0x40>)
 800b706:	4c0c      	ldr	r4, [pc, #48]	@ (800b738 <__libc_init_array+0x44>)
 800b708:	f002 f8f2 	bl	800d8f0 <_init>
 800b70c:	1b64      	subs	r4, r4, r5
 800b70e:	10a4      	asrs	r4, r4, #2
 800b710:	2600      	movs	r6, #0
 800b712:	42a6      	cmp	r6, r4
 800b714:	d105      	bne.n	800b722 <__libc_init_array+0x2e>
 800b716:	bd70      	pop	{r4, r5, r6, pc}
 800b718:	f855 3b04 	ldr.w	r3, [r5], #4
 800b71c:	4798      	blx	r3
 800b71e:	3601      	adds	r6, #1
 800b720:	e7ee      	b.n	800b700 <__libc_init_array+0xc>
 800b722:	f855 3b04 	ldr.w	r3, [r5], #4
 800b726:	4798      	blx	r3
 800b728:	3601      	adds	r6, #1
 800b72a:	e7f2      	b.n	800b712 <__libc_init_array+0x1e>
 800b72c:	0800e454 	.word	0x0800e454
 800b730:	0800e454 	.word	0x0800e454
 800b734:	0800e454 	.word	0x0800e454
 800b738:	0800e458 	.word	0x0800e458

0800b73c <__retarget_lock_init_recursive>:
 800b73c:	4770      	bx	lr

0800b73e <__retarget_lock_acquire_recursive>:
 800b73e:	4770      	bx	lr

0800b740 <__retarget_lock_release_recursive>:
 800b740:	4770      	bx	lr

0800b742 <memcpy>:
 800b742:	440a      	add	r2, r1
 800b744:	4291      	cmp	r1, r2
 800b746:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b74a:	d100      	bne.n	800b74e <memcpy+0xc>
 800b74c:	4770      	bx	lr
 800b74e:	b510      	push	{r4, lr}
 800b750:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b754:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b758:	4291      	cmp	r1, r2
 800b75a:	d1f9      	bne.n	800b750 <memcpy+0xe>
 800b75c:	bd10      	pop	{r4, pc}
	...

0800b760 <__assert_func>:
 800b760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b762:	4614      	mov	r4, r2
 800b764:	461a      	mov	r2, r3
 800b766:	4b09      	ldr	r3, [pc, #36]	@ (800b78c <__assert_func+0x2c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4605      	mov	r5, r0
 800b76c:	68d8      	ldr	r0, [r3, #12]
 800b76e:	b954      	cbnz	r4, 800b786 <__assert_func+0x26>
 800b770:	4b07      	ldr	r3, [pc, #28]	@ (800b790 <__assert_func+0x30>)
 800b772:	461c      	mov	r4, r3
 800b774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b778:	9100      	str	r1, [sp, #0]
 800b77a:	462b      	mov	r3, r5
 800b77c:	4905      	ldr	r1, [pc, #20]	@ (800b794 <__assert_func+0x34>)
 800b77e:	f001 fe1d 	bl	800d3bc <fiprintf>
 800b782:	f001 ffe3 	bl	800d74c <abort>
 800b786:	4b04      	ldr	r3, [pc, #16]	@ (800b798 <__assert_func+0x38>)
 800b788:	e7f4      	b.n	800b774 <__assert_func+0x14>
 800b78a:	bf00      	nop
 800b78c:	20000104 	.word	0x20000104
 800b790:	0800e15c 	.word	0x0800e15c
 800b794:	0800e12e 	.word	0x0800e12e
 800b798:	0800e121 	.word	0x0800e121

0800b79c <quorem>:
 800b79c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	6903      	ldr	r3, [r0, #16]
 800b7a2:	690c      	ldr	r4, [r1, #16]
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	db7e      	blt.n	800b8a8 <quorem+0x10c>
 800b7aa:	3c01      	subs	r4, #1
 800b7ac:	f101 0814 	add.w	r8, r1, #20
 800b7b0:	00a3      	lsls	r3, r4, #2
 800b7b2:	f100 0514 	add.w	r5, r0, #20
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7d2:	d32e      	bcc.n	800b832 <quorem+0x96>
 800b7d4:	f04f 0a00 	mov.w	sl, #0
 800b7d8:	46c4      	mov	ip, r8
 800b7da:	46ae      	mov	lr, r5
 800b7dc:	46d3      	mov	fp, sl
 800b7de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7e2:	b298      	uxth	r0, r3
 800b7e4:	fb06 a000 	mla	r0, r6, r0, sl
 800b7e8:	0c02      	lsrs	r2, r0, #16
 800b7ea:	0c1b      	lsrs	r3, r3, #16
 800b7ec:	fb06 2303 	mla	r3, r6, r3, r2
 800b7f0:	f8de 2000 	ldr.w	r2, [lr]
 800b7f4:	b280      	uxth	r0, r0
 800b7f6:	b292      	uxth	r2, r2
 800b7f8:	1a12      	subs	r2, r2, r0
 800b7fa:	445a      	add	r2, fp
 800b7fc:	f8de 0000 	ldr.w	r0, [lr]
 800b800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b804:	b29b      	uxth	r3, r3
 800b806:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b80a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b80e:	b292      	uxth	r2, r2
 800b810:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b814:	45e1      	cmp	r9, ip
 800b816:	f84e 2b04 	str.w	r2, [lr], #4
 800b81a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b81e:	d2de      	bcs.n	800b7de <quorem+0x42>
 800b820:	9b00      	ldr	r3, [sp, #0]
 800b822:	58eb      	ldr	r3, [r5, r3]
 800b824:	b92b      	cbnz	r3, 800b832 <quorem+0x96>
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	3b04      	subs	r3, #4
 800b82a:	429d      	cmp	r5, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	d32f      	bcc.n	800b890 <quorem+0xf4>
 800b830:	613c      	str	r4, [r7, #16]
 800b832:	4638      	mov	r0, r7
 800b834:	f001 fc76 	bl	800d124 <__mcmp>
 800b838:	2800      	cmp	r0, #0
 800b83a:	db25      	blt.n	800b888 <quorem+0xec>
 800b83c:	4629      	mov	r1, r5
 800b83e:	2000      	movs	r0, #0
 800b840:	f858 2b04 	ldr.w	r2, [r8], #4
 800b844:	f8d1 c000 	ldr.w	ip, [r1]
 800b848:	fa1f fe82 	uxth.w	lr, r2
 800b84c:	fa1f f38c 	uxth.w	r3, ip
 800b850:	eba3 030e 	sub.w	r3, r3, lr
 800b854:	4403      	add	r3, r0
 800b856:	0c12      	lsrs	r2, r2, #16
 800b858:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b85c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b860:	b29b      	uxth	r3, r3
 800b862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b866:	45c1      	cmp	r9, r8
 800b868:	f841 3b04 	str.w	r3, [r1], #4
 800b86c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b870:	d2e6      	bcs.n	800b840 <quorem+0xa4>
 800b872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b87a:	b922      	cbnz	r2, 800b886 <quorem+0xea>
 800b87c:	3b04      	subs	r3, #4
 800b87e:	429d      	cmp	r5, r3
 800b880:	461a      	mov	r2, r3
 800b882:	d30b      	bcc.n	800b89c <quorem+0x100>
 800b884:	613c      	str	r4, [r7, #16]
 800b886:	3601      	adds	r6, #1
 800b888:	4630      	mov	r0, r6
 800b88a:	b003      	add	sp, #12
 800b88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b890:	6812      	ldr	r2, [r2, #0]
 800b892:	3b04      	subs	r3, #4
 800b894:	2a00      	cmp	r2, #0
 800b896:	d1cb      	bne.n	800b830 <quorem+0x94>
 800b898:	3c01      	subs	r4, #1
 800b89a:	e7c6      	b.n	800b82a <quorem+0x8e>
 800b89c:	6812      	ldr	r2, [r2, #0]
 800b89e:	3b04      	subs	r3, #4
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	d1ef      	bne.n	800b884 <quorem+0xe8>
 800b8a4:	3c01      	subs	r4, #1
 800b8a6:	e7ea      	b.n	800b87e <quorem+0xe2>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e7ee      	b.n	800b88a <quorem+0xee>
 800b8ac:	0000      	movs	r0, r0
	...

0800b8b0 <_dtoa_r>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	69c7      	ldr	r7, [r0, #28]
 800b8b6:	b099      	sub	sp, #100	@ 0x64
 800b8b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8bc:	ec55 4b10 	vmov	r4, r5, d0
 800b8c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b8c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8c4:	4683      	mov	fp, r0
 800b8c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8ca:	b97f      	cbnz	r7, 800b8ec <_dtoa_r+0x3c>
 800b8cc:	2010      	movs	r0, #16
 800b8ce:	f001 f84d 	bl	800c96c <malloc>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b8d8:	b920      	cbnz	r0, 800b8e4 <_dtoa_r+0x34>
 800b8da:	4ba7      	ldr	r3, [pc, #668]	@ (800bb78 <_dtoa_r+0x2c8>)
 800b8dc:	21ef      	movs	r1, #239	@ 0xef
 800b8de:	48a7      	ldr	r0, [pc, #668]	@ (800bb7c <_dtoa_r+0x2cc>)
 800b8e0:	f7ff ff3e 	bl	800b760 <__assert_func>
 800b8e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8e8:	6007      	str	r7, [r0, #0]
 800b8ea:	60c7      	str	r7, [r0, #12]
 800b8ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	b159      	cbz	r1, 800b90c <_dtoa_r+0x5c>
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	604a      	str	r2, [r1, #4]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4093      	lsls	r3, r2
 800b8fc:	608b      	str	r3, [r1, #8]
 800b8fe:	4658      	mov	r0, fp
 800b900:	f001 f9d6 	bl	800ccb0 <_Bfree>
 800b904:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	1e2b      	subs	r3, r5, #0
 800b90e:	bfb9      	ittee	lt
 800b910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b914:	9303      	strlt	r3, [sp, #12]
 800b916:	2300      	movge	r3, #0
 800b918:	6033      	strge	r3, [r6, #0]
 800b91a:	9f03      	ldr	r7, [sp, #12]
 800b91c:	4b98      	ldr	r3, [pc, #608]	@ (800bb80 <_dtoa_r+0x2d0>)
 800b91e:	bfbc      	itt	lt
 800b920:	2201      	movlt	r2, #1
 800b922:	6032      	strlt	r2, [r6, #0]
 800b924:	43bb      	bics	r3, r7
 800b926:	d112      	bne.n	800b94e <_dtoa_r+0x9e>
 800b928:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b92a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b934:	4323      	orrs	r3, r4
 800b936:	f000 854d 	beq.w	800c3d4 <_dtoa_r+0xb24>
 800b93a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b93c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb94 <_dtoa_r+0x2e4>
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 854f 	beq.w	800c3e4 <_dtoa_r+0xb34>
 800b946:	f10a 0303 	add.w	r3, sl, #3
 800b94a:	f000 bd49 	b.w	800c3e0 <_dtoa_r+0xb30>
 800b94e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b952:	2200      	movs	r2, #0
 800b954:	ec51 0b17 	vmov	r0, r1, d7
 800b958:	2300      	movs	r3, #0
 800b95a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b95e:	f7f5 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b962:	4680      	mov	r8, r0
 800b964:	b158      	cbz	r0, 800b97e <_dtoa_r+0xce>
 800b966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b968:	2301      	movs	r3, #1
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b96e:	b113      	cbz	r3, 800b976 <_dtoa_r+0xc6>
 800b970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b972:	4b84      	ldr	r3, [pc, #528]	@ (800bb84 <_dtoa_r+0x2d4>)
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb98 <_dtoa_r+0x2e8>
 800b97a:	f000 bd33 	b.w	800c3e4 <_dtoa_r+0xb34>
 800b97e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b982:	aa16      	add	r2, sp, #88	@ 0x58
 800b984:	a917      	add	r1, sp, #92	@ 0x5c
 800b986:	4658      	mov	r0, fp
 800b988:	f001 fc7c 	bl	800d284 <__d2b>
 800b98c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b990:	4681      	mov	r9, r0
 800b992:	2e00      	cmp	r6, #0
 800b994:	d077      	beq.n	800ba86 <_dtoa_r+0x1d6>
 800b996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b998:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b99c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b9ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4b74      	ldr	r3, [pc, #464]	@ (800bb88 <_dtoa_r+0x2d8>)
 800b9b6:	f7f4 fc67 	bl	8000288 <__aeabi_dsub>
 800b9ba:	a369      	add	r3, pc, #420	@ (adr r3, 800bb60 <_dtoa_r+0x2b0>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fe1a 	bl	80005f8 <__aeabi_dmul>
 800b9c4:	a368      	add	r3, pc, #416	@ (adr r3, 800bb68 <_dtoa_r+0x2b8>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f4 fc5f 	bl	800028c <__adddf3>
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	460d      	mov	r5, r1
 800b9d4:	f7f4 fda6 	bl	8000524 <__aeabi_i2d>
 800b9d8:	a365      	add	r3, pc, #404	@ (adr r3, 800bb70 <_dtoa_r+0x2c0>)
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f7f4 fe0b 	bl	80005f8 <__aeabi_dmul>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f4 fc4f 	bl	800028c <__adddf3>
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	460d      	mov	r5, r1
 800b9f2:	f7f5 f8b1 	bl	8000b58 <__aeabi_d2iz>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4629      	mov	r1, r5
 800ba00:	f7f5 f86c 	bl	8000adc <__aeabi_dcmplt>
 800ba04:	b140      	cbz	r0, 800ba18 <_dtoa_r+0x168>
 800ba06:	4638      	mov	r0, r7
 800ba08:	f7f4 fd8c 	bl	8000524 <__aeabi_i2d>
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	462b      	mov	r3, r5
 800ba10:	f7f5 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba14:	b900      	cbnz	r0, 800ba18 <_dtoa_r+0x168>
 800ba16:	3f01      	subs	r7, #1
 800ba18:	2f16      	cmp	r7, #22
 800ba1a:	d851      	bhi.n	800bac0 <_dtoa_r+0x210>
 800ba1c:	4b5b      	ldr	r3, [pc, #364]	@ (800bb8c <_dtoa_r+0x2dc>)
 800ba1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba2a:	f7f5 f857 	bl	8000adc <__aeabi_dcmplt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d048      	beq.n	800bac4 <_dtoa_r+0x214>
 800ba32:	3f01      	subs	r7, #1
 800ba34:	2300      	movs	r3, #0
 800ba36:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba3a:	1b9b      	subs	r3, r3, r6
 800ba3c:	1e5a      	subs	r2, r3, #1
 800ba3e:	bf44      	itt	mi
 800ba40:	f1c3 0801 	rsbmi	r8, r3, #1
 800ba44:	2300      	movmi	r3, #0
 800ba46:	9208      	str	r2, [sp, #32]
 800ba48:	bf54      	ite	pl
 800ba4a:	f04f 0800 	movpl.w	r8, #0
 800ba4e:	9308      	strmi	r3, [sp, #32]
 800ba50:	2f00      	cmp	r7, #0
 800ba52:	db39      	blt.n	800bac8 <_dtoa_r+0x218>
 800ba54:	9b08      	ldr	r3, [sp, #32]
 800ba56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba58:	443b      	add	r3, r7
 800ba5a:	9308      	str	r3, [sp, #32]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba62:	2b09      	cmp	r3, #9
 800ba64:	d864      	bhi.n	800bb30 <_dtoa_r+0x280>
 800ba66:	2b05      	cmp	r3, #5
 800ba68:	bfc4      	itt	gt
 800ba6a:	3b04      	subgt	r3, #4
 800ba6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba70:	f1a3 0302 	sub.w	r3, r3, #2
 800ba74:	bfcc      	ite	gt
 800ba76:	2400      	movgt	r4, #0
 800ba78:	2401      	movle	r4, #1
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d863      	bhi.n	800bb46 <_dtoa_r+0x296>
 800ba7e:	e8df f003 	tbb	[pc, r3]
 800ba82:	372a      	.short	0x372a
 800ba84:	5535      	.short	0x5535
 800ba86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba8a:	441e      	add	r6, r3
 800ba8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba90:	2b20      	cmp	r3, #32
 800ba92:	bfc1      	itttt	gt
 800ba94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba98:	409f      	lslgt	r7, r3
 800ba9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800baa2:	bfd6      	itet	le
 800baa4:	f1c3 0320 	rsble	r3, r3, #32
 800baa8:	ea47 0003 	orrgt.w	r0, r7, r3
 800baac:	fa04 f003 	lslle.w	r0, r4, r3
 800bab0:	f7f4 fd28 	bl	8000504 <__aeabi_ui2d>
 800bab4:	2201      	movs	r2, #1
 800bab6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800baba:	3e01      	subs	r6, #1
 800babc:	9214      	str	r2, [sp, #80]	@ 0x50
 800babe:	e777      	b.n	800b9b0 <_dtoa_r+0x100>
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7b8      	b.n	800ba36 <_dtoa_r+0x186>
 800bac4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bac6:	e7b7      	b.n	800ba38 <_dtoa_r+0x188>
 800bac8:	427b      	negs	r3, r7
 800baca:	930a      	str	r3, [sp, #40]	@ 0x28
 800bacc:	2300      	movs	r3, #0
 800bace:	eba8 0807 	sub.w	r8, r8, r7
 800bad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bad4:	e7c4      	b.n	800ba60 <_dtoa_r+0x1b0>
 800bad6:	2300      	movs	r3, #0
 800bad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800badc:	2b00      	cmp	r3, #0
 800bade:	dc35      	bgt.n	800bb4c <_dtoa_r+0x29c>
 800bae0:	2301      	movs	r3, #1
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	9307      	str	r3, [sp, #28]
 800bae6:	461a      	mov	r2, r3
 800bae8:	920e      	str	r2, [sp, #56]	@ 0x38
 800baea:	e00b      	b.n	800bb04 <_dtoa_r+0x254>
 800baec:	2301      	movs	r3, #1
 800baee:	e7f3      	b.n	800bad8 <_dtoa_r+0x228>
 800baf0:	2300      	movs	r3, #0
 800baf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf6:	18fb      	adds	r3, r7, r3
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	3301      	adds	r3, #1
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	9307      	str	r3, [sp, #28]
 800bb00:	bfb8      	it	lt
 800bb02:	2301      	movlt	r3, #1
 800bb04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	f102 0514 	add.w	r5, r2, #20
 800bb10:	429d      	cmp	r5, r3
 800bb12:	d91f      	bls.n	800bb54 <_dtoa_r+0x2a4>
 800bb14:	6041      	str	r1, [r0, #4]
 800bb16:	4658      	mov	r0, fp
 800bb18:	f001 f88a 	bl	800cc30 <_Balloc>
 800bb1c:	4682      	mov	sl, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d13c      	bne.n	800bb9c <_dtoa_r+0x2ec>
 800bb22:	4b1b      	ldr	r3, [pc, #108]	@ (800bb90 <_dtoa_r+0x2e0>)
 800bb24:	4602      	mov	r2, r0
 800bb26:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb2a:	e6d8      	b.n	800b8de <_dtoa_r+0x2e>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e7e0      	b.n	800baf2 <_dtoa_r+0x242>
 800bb30:	2401      	movs	r4, #1
 800bb32:	2300      	movs	r3, #0
 800bb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	2200      	movs	r2, #0
 800bb42:	2312      	movs	r3, #18
 800bb44:	e7d0      	b.n	800bae8 <_dtoa_r+0x238>
 800bb46:	2301      	movs	r3, #1
 800bb48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb4a:	e7f5      	b.n	800bb38 <_dtoa_r+0x288>
 800bb4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	9307      	str	r3, [sp, #28]
 800bb52:	e7d7      	b.n	800bb04 <_dtoa_r+0x254>
 800bb54:	3101      	adds	r1, #1
 800bb56:	0052      	lsls	r2, r2, #1
 800bb58:	e7d8      	b.n	800bb0c <_dtoa_r+0x25c>
 800bb5a:	bf00      	nop
 800bb5c:	f3af 8000 	nop.w
 800bb60:	636f4361 	.word	0x636f4361
 800bb64:	3fd287a7 	.word	0x3fd287a7
 800bb68:	8b60c8b3 	.word	0x8b60c8b3
 800bb6c:	3fc68a28 	.word	0x3fc68a28
 800bb70:	509f79fb 	.word	0x509f79fb
 800bb74:	3fd34413 	.word	0x3fd34413
 800bb78:	0800e0b0 	.word	0x0800e0b0
 800bb7c:	0800e16a 	.word	0x0800e16a
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	0800e08d 	.word	0x0800e08d
 800bb88:	3ff80000 	.word	0x3ff80000
 800bb8c:	0800e278 	.word	0x0800e278
 800bb90:	0800e1c2 	.word	0x0800e1c2
 800bb94:	0800e166 	.word	0x0800e166
 800bb98:	0800e08c 	.word	0x0800e08c
 800bb9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bba0:	6018      	str	r0, [r3, #0]
 800bba2:	9b07      	ldr	r3, [sp, #28]
 800bba4:	2b0e      	cmp	r3, #14
 800bba6:	f200 80a4 	bhi.w	800bcf2 <_dtoa_r+0x442>
 800bbaa:	2c00      	cmp	r4, #0
 800bbac:	f000 80a1 	beq.w	800bcf2 <_dtoa_r+0x442>
 800bbb0:	2f00      	cmp	r7, #0
 800bbb2:	dd33      	ble.n	800bc1c <_dtoa_r+0x36c>
 800bbb4:	4bad      	ldr	r3, [pc, #692]	@ (800be6c <_dtoa_r+0x5bc>)
 800bbb6:	f007 020f 	and.w	r2, r7, #15
 800bbba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbbe:	ed93 7b00 	vldr	d7, [r3]
 800bbc2:	05f8      	lsls	r0, r7, #23
 800bbc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bbc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bbcc:	d516      	bpl.n	800bbfc <_dtoa_r+0x34c>
 800bbce:	4ba8      	ldr	r3, [pc, #672]	@ (800be70 <_dtoa_r+0x5c0>)
 800bbd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbd8:	f7f4 fe38 	bl	800084c <__aeabi_ddiv>
 800bbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbe0:	f004 040f 	and.w	r4, r4, #15
 800bbe4:	2603      	movs	r6, #3
 800bbe6:	4da2      	ldr	r5, [pc, #648]	@ (800be70 <_dtoa_r+0x5c0>)
 800bbe8:	b954      	cbnz	r4, 800bc00 <_dtoa_r+0x350>
 800bbea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf2:	f7f4 fe2b 	bl	800084c <__aeabi_ddiv>
 800bbf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfa:	e028      	b.n	800bc4e <_dtoa_r+0x39e>
 800bbfc:	2602      	movs	r6, #2
 800bbfe:	e7f2      	b.n	800bbe6 <_dtoa_r+0x336>
 800bc00:	07e1      	lsls	r1, r4, #31
 800bc02:	d508      	bpl.n	800bc16 <_dtoa_r+0x366>
 800bc04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc14:	3601      	adds	r6, #1
 800bc16:	1064      	asrs	r4, r4, #1
 800bc18:	3508      	adds	r5, #8
 800bc1a:	e7e5      	b.n	800bbe8 <_dtoa_r+0x338>
 800bc1c:	f000 80d2 	beq.w	800bdc4 <_dtoa_r+0x514>
 800bc20:	427c      	negs	r4, r7
 800bc22:	4b92      	ldr	r3, [pc, #584]	@ (800be6c <_dtoa_r+0x5bc>)
 800bc24:	4d92      	ldr	r5, [pc, #584]	@ (800be70 <_dtoa_r+0x5c0>)
 800bc26:	f004 020f 	and.w	r2, r4, #15
 800bc2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc36:	f7f4 fcdf 	bl	80005f8 <__aeabi_dmul>
 800bc3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc3e:	1124      	asrs	r4, r4, #4
 800bc40:	2300      	movs	r3, #0
 800bc42:	2602      	movs	r6, #2
 800bc44:	2c00      	cmp	r4, #0
 800bc46:	f040 80b2 	bne.w	800bdae <_dtoa_r+0x4fe>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1d3      	bne.n	800bbf6 <_dtoa_r+0x346>
 800bc4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 80b7 	beq.w	800bdc8 <_dtoa_r+0x518>
 800bc5a:	4b86      	ldr	r3, [pc, #536]	@ (800be74 <_dtoa_r+0x5c4>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f4 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f000 80ae 	beq.w	800bdc8 <_dtoa_r+0x518>
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 80aa 	beq.w	800bdc8 <_dtoa_r+0x518>
 800bc74:	9b00      	ldr	r3, [sp, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dd37      	ble.n	800bcea <_dtoa_r+0x43a>
 800bc7a:	1e7b      	subs	r3, r7, #1
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4b7d      	ldr	r3, [pc, #500]	@ (800be78 <_dtoa_r+0x5c8>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 fcb7 	bl	80005f8 <__aeabi_dmul>
 800bc8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc8e:	9c00      	ldr	r4, [sp, #0]
 800bc90:	3601      	adds	r6, #1
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7f4 fc46 	bl	8000524 <__aeabi_i2d>
 800bc98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc9c:	f7f4 fcac 	bl	80005f8 <__aeabi_dmul>
 800bca0:	4b76      	ldr	r3, [pc, #472]	@ (800be7c <_dtoa_r+0x5cc>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	f7f4 faf2 	bl	800028c <__adddf3>
 800bca8:	4605      	mov	r5, r0
 800bcaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bcae:	2c00      	cmp	r4, #0
 800bcb0:	f040 808d 	bne.w	800bdce <_dtoa_r+0x51e>
 800bcb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb8:	4b71      	ldr	r3, [pc, #452]	@ (800be80 <_dtoa_r+0x5d0>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f7f4 fae4 	bl	8000288 <__aeabi_dsub>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcc8:	462a      	mov	r2, r5
 800bcca:	4633      	mov	r3, r6
 800bccc:	f7f4 ff24 	bl	8000b18 <__aeabi_dcmpgt>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f040 828b 	bne.w	800c1ec <_dtoa_r+0x93c>
 800bcd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcda:	462a      	mov	r2, r5
 800bcdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bce0:	f7f4 fefc 	bl	8000adc <__aeabi_dcmplt>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f040 8128 	bne.w	800bf3a <_dtoa_r+0x68a>
 800bcea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bcee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bcf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f2c0 815a 	blt.w	800bfae <_dtoa_r+0x6fe>
 800bcfa:	2f0e      	cmp	r7, #14
 800bcfc:	f300 8157 	bgt.w	800bfae <_dtoa_r+0x6fe>
 800bd00:	4b5a      	ldr	r3, [pc, #360]	@ (800be6c <_dtoa_r+0x5bc>)
 800bd02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd06:	ed93 7b00 	vldr	d7, [r3]
 800bd0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	ed8d 7b00 	vstr	d7, [sp]
 800bd12:	da03      	bge.n	800bd1c <_dtoa_r+0x46c>
 800bd14:	9b07      	ldr	r3, [sp, #28]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f340 8101 	ble.w	800bf1e <_dtoa_r+0x66e>
 800bd1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd20:	4656      	mov	r6, sl
 800bd22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 fd8f 	bl	800084c <__aeabi_ddiv>
 800bd2e:	f7f4 ff13 	bl	8000b58 <__aeabi_d2iz>
 800bd32:	4680      	mov	r8, r0
 800bd34:	f7f4 fbf6 	bl	8000524 <__aeabi_i2d>
 800bd38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd3c:	f7f4 fc5c 	bl	80005f8 <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd4c:	f7f4 fa9c 	bl	8000288 <__aeabi_dsub>
 800bd50:	f806 4b01 	strb.w	r4, [r6], #1
 800bd54:	9d07      	ldr	r5, [sp, #28]
 800bd56:	eba6 040a 	sub.w	r4, r6, sl
 800bd5a:	42a5      	cmp	r5, r4
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	f040 8117 	bne.w	800bf92 <_dtoa_r+0x6e2>
 800bd64:	f7f4 fa92 	bl	800028c <__adddf3>
 800bd68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	f7f4 fed2 	bl	8000b18 <__aeabi_dcmpgt>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	f040 80f9 	bne.w	800bf6c <_dtoa_r+0x6bc>
 800bd7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd86:	b118      	cbz	r0, 800bd90 <_dtoa_r+0x4e0>
 800bd88:	f018 0f01 	tst.w	r8, #1
 800bd8c:	f040 80ee 	bne.w	800bf6c <_dtoa_r+0x6bc>
 800bd90:	4649      	mov	r1, r9
 800bd92:	4658      	mov	r0, fp
 800bd94:	f000 ff8c 	bl	800ccb0 <_Bfree>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	7033      	strb	r3, [r6, #0]
 800bd9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd9e:	3701      	adds	r7, #1
 800bda0:	601f      	str	r7, [r3, #0]
 800bda2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 831d 	beq.w	800c3e4 <_dtoa_r+0xb34>
 800bdaa:	601e      	str	r6, [r3, #0]
 800bdac:	e31a      	b.n	800c3e4 <_dtoa_r+0xb34>
 800bdae:	07e2      	lsls	r2, r4, #31
 800bdb0:	d505      	bpl.n	800bdbe <_dtoa_r+0x50e>
 800bdb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdb6:	f7f4 fc1f 	bl	80005f8 <__aeabi_dmul>
 800bdba:	3601      	adds	r6, #1
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	1064      	asrs	r4, r4, #1
 800bdc0:	3508      	adds	r5, #8
 800bdc2:	e73f      	b.n	800bc44 <_dtoa_r+0x394>
 800bdc4:	2602      	movs	r6, #2
 800bdc6:	e742      	b.n	800bc4e <_dtoa_r+0x39e>
 800bdc8:	9c07      	ldr	r4, [sp, #28]
 800bdca:	9704      	str	r7, [sp, #16]
 800bdcc:	e761      	b.n	800bc92 <_dtoa_r+0x3e2>
 800bdce:	4b27      	ldr	r3, [pc, #156]	@ (800be6c <_dtoa_r+0x5bc>)
 800bdd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdda:	4454      	add	r4, sl
 800bddc:	2900      	cmp	r1, #0
 800bdde:	d053      	beq.n	800be88 <_dtoa_r+0x5d8>
 800bde0:	4928      	ldr	r1, [pc, #160]	@ (800be84 <_dtoa_r+0x5d4>)
 800bde2:	2000      	movs	r0, #0
 800bde4:	f7f4 fd32 	bl	800084c <__aeabi_ddiv>
 800bde8:	4633      	mov	r3, r6
 800bdea:	462a      	mov	r2, r5
 800bdec:	f7f4 fa4c 	bl	8000288 <__aeabi_dsub>
 800bdf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdf4:	4656      	mov	r6, sl
 800bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfa:	f7f4 fead 	bl	8000b58 <__aeabi_d2iz>
 800bdfe:	4605      	mov	r5, r0
 800be00:	f7f4 fb90 	bl	8000524 <__aeabi_i2d>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0c:	f7f4 fa3c 	bl	8000288 <__aeabi_dsub>
 800be10:	3530      	adds	r5, #48	@ 0x30
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be1a:	f806 5b01 	strb.w	r5, [r6], #1
 800be1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be22:	f7f4 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800be26:	2800      	cmp	r0, #0
 800be28:	d171      	bne.n	800bf0e <_dtoa_r+0x65e>
 800be2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be2e:	4911      	ldr	r1, [pc, #68]	@ (800be74 <_dtoa_r+0x5c4>)
 800be30:	2000      	movs	r0, #0
 800be32:	f7f4 fa29 	bl	8000288 <__aeabi_dsub>
 800be36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be3a:	f7f4 fe4f 	bl	8000adc <__aeabi_dcmplt>
 800be3e:	2800      	cmp	r0, #0
 800be40:	f040 8095 	bne.w	800bf6e <_dtoa_r+0x6be>
 800be44:	42a6      	cmp	r6, r4
 800be46:	f43f af50 	beq.w	800bcea <_dtoa_r+0x43a>
 800be4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be4e:	4b0a      	ldr	r3, [pc, #40]	@ (800be78 <_dtoa_r+0x5c8>)
 800be50:	2200      	movs	r2, #0
 800be52:	f7f4 fbd1 	bl	80005f8 <__aeabi_dmul>
 800be56:	4b08      	ldr	r3, [pc, #32]	@ (800be78 <_dtoa_r+0x5c8>)
 800be58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be5c:	2200      	movs	r2, #0
 800be5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be62:	f7f4 fbc9 	bl	80005f8 <__aeabi_dmul>
 800be66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be6a:	e7c4      	b.n	800bdf6 <_dtoa_r+0x546>
 800be6c:	0800e278 	.word	0x0800e278
 800be70:	0800e250 	.word	0x0800e250
 800be74:	3ff00000 	.word	0x3ff00000
 800be78:	40240000 	.word	0x40240000
 800be7c:	401c0000 	.word	0x401c0000
 800be80:	40140000 	.word	0x40140000
 800be84:	3fe00000 	.word	0x3fe00000
 800be88:	4631      	mov	r1, r6
 800be8a:	4628      	mov	r0, r5
 800be8c:	f7f4 fbb4 	bl	80005f8 <__aeabi_dmul>
 800be90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be94:	9415      	str	r4, [sp, #84]	@ 0x54
 800be96:	4656      	mov	r6, sl
 800be98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9c:	f7f4 fe5c 	bl	8000b58 <__aeabi_d2iz>
 800bea0:	4605      	mov	r5, r0
 800bea2:	f7f4 fb3f 	bl	8000524 <__aeabi_i2d>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beae:	f7f4 f9eb 	bl	8000288 <__aeabi_dsub>
 800beb2:	3530      	adds	r5, #48	@ 0x30
 800beb4:	f806 5b01 	strb.w	r5, [r6], #1
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	42a6      	cmp	r6, r4
 800bebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bec2:	f04f 0200 	mov.w	r2, #0
 800bec6:	d124      	bne.n	800bf12 <_dtoa_r+0x662>
 800bec8:	4bac      	ldr	r3, [pc, #688]	@ (800c17c <_dtoa_r+0x8cc>)
 800beca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bece:	f7f4 f9dd 	bl	800028c <__adddf3>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beda:	f7f4 fe1d 	bl	8000b18 <__aeabi_dcmpgt>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d145      	bne.n	800bf6e <_dtoa_r+0x6be>
 800bee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bee6:	49a5      	ldr	r1, [pc, #660]	@ (800c17c <_dtoa_r+0x8cc>)
 800bee8:	2000      	movs	r0, #0
 800beea:	f7f4 f9cd 	bl	8000288 <__aeabi_dsub>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef6:	f7f4 fdf1 	bl	8000adc <__aeabi_dcmplt>
 800befa:	2800      	cmp	r0, #0
 800befc:	f43f aef5 	beq.w	800bcea <_dtoa_r+0x43a>
 800bf00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bf02:	1e73      	subs	r3, r6, #1
 800bf04:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf0a:	2b30      	cmp	r3, #48	@ 0x30
 800bf0c:	d0f8      	beq.n	800bf00 <_dtoa_r+0x650>
 800bf0e:	9f04      	ldr	r7, [sp, #16]
 800bf10:	e73e      	b.n	800bd90 <_dtoa_r+0x4e0>
 800bf12:	4b9b      	ldr	r3, [pc, #620]	@ (800c180 <_dtoa_r+0x8d0>)
 800bf14:	f7f4 fb70 	bl	80005f8 <__aeabi_dmul>
 800bf18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf1c:	e7bc      	b.n	800be98 <_dtoa_r+0x5e8>
 800bf1e:	d10c      	bne.n	800bf3a <_dtoa_r+0x68a>
 800bf20:	4b98      	ldr	r3, [pc, #608]	@ (800c184 <_dtoa_r+0x8d4>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf30:	f7f4 fde8 	bl	8000b04 <__aeabi_dcmpge>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	f000 8157 	beq.w	800c1e8 <_dtoa_r+0x938>
 800bf3a:	2400      	movs	r4, #0
 800bf3c:	4625      	mov	r5, r4
 800bf3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf40:	43db      	mvns	r3, r3
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	4656      	mov	r6, sl
 800bf46:	2700      	movs	r7, #0
 800bf48:	4621      	mov	r1, r4
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f000 feb0 	bl	800ccb0 <_Bfree>
 800bf50:	2d00      	cmp	r5, #0
 800bf52:	d0dc      	beq.n	800bf0e <_dtoa_r+0x65e>
 800bf54:	b12f      	cbz	r7, 800bf62 <_dtoa_r+0x6b2>
 800bf56:	42af      	cmp	r7, r5
 800bf58:	d003      	beq.n	800bf62 <_dtoa_r+0x6b2>
 800bf5a:	4639      	mov	r1, r7
 800bf5c:	4658      	mov	r0, fp
 800bf5e:	f000 fea7 	bl	800ccb0 <_Bfree>
 800bf62:	4629      	mov	r1, r5
 800bf64:	4658      	mov	r0, fp
 800bf66:	f000 fea3 	bl	800ccb0 <_Bfree>
 800bf6a:	e7d0      	b.n	800bf0e <_dtoa_r+0x65e>
 800bf6c:	9704      	str	r7, [sp, #16]
 800bf6e:	4633      	mov	r3, r6
 800bf70:	461e      	mov	r6, r3
 800bf72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf76:	2a39      	cmp	r2, #57	@ 0x39
 800bf78:	d107      	bne.n	800bf8a <_dtoa_r+0x6da>
 800bf7a:	459a      	cmp	sl, r3
 800bf7c:	d1f8      	bne.n	800bf70 <_dtoa_r+0x6c0>
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	3201      	adds	r2, #1
 800bf82:	9204      	str	r2, [sp, #16]
 800bf84:	2230      	movs	r2, #48	@ 0x30
 800bf86:	f88a 2000 	strb.w	r2, [sl]
 800bf8a:	781a      	ldrb	r2, [r3, #0]
 800bf8c:	3201      	adds	r2, #1
 800bf8e:	701a      	strb	r2, [r3, #0]
 800bf90:	e7bd      	b.n	800bf0e <_dtoa_r+0x65e>
 800bf92:	4b7b      	ldr	r3, [pc, #492]	@ (800c180 <_dtoa_r+0x8d0>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	f7f4 fb2f 	bl	80005f8 <__aeabi_dmul>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	460d      	mov	r5, r1
 800bfa2:	f7f4 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f43f aebb 	beq.w	800bd22 <_dtoa_r+0x472>
 800bfac:	e6f0      	b.n	800bd90 <_dtoa_r+0x4e0>
 800bfae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bfb0:	2a00      	cmp	r2, #0
 800bfb2:	f000 80db 	beq.w	800c16c <_dtoa_r+0x8bc>
 800bfb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfb8:	2a01      	cmp	r2, #1
 800bfba:	f300 80bf 	bgt.w	800c13c <_dtoa_r+0x88c>
 800bfbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	f000 80b7 	beq.w	800c134 <_dtoa_r+0x884>
 800bfc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bfca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bfcc:	4646      	mov	r6, r8
 800bfce:	9a08      	ldr	r2, [sp, #32]
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	441a      	add	r2, r3
 800bfd4:	4658      	mov	r0, fp
 800bfd6:	4498      	add	r8, r3
 800bfd8:	9208      	str	r2, [sp, #32]
 800bfda:	f000 ff1d 	bl	800ce18 <__i2b>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	b15e      	cbz	r6, 800bffa <_dtoa_r+0x74a>
 800bfe2:	9b08      	ldr	r3, [sp, #32]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	dd08      	ble.n	800bffa <_dtoa_r+0x74a>
 800bfe8:	42b3      	cmp	r3, r6
 800bfea:	9a08      	ldr	r2, [sp, #32]
 800bfec:	bfa8      	it	ge
 800bfee:	4633      	movge	r3, r6
 800bff0:	eba8 0803 	sub.w	r8, r8, r3
 800bff4:	1af6      	subs	r6, r6, r3
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	9308      	str	r3, [sp, #32]
 800bffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bffc:	b1f3      	cbz	r3, 800c03c <_dtoa_r+0x78c>
 800bffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 80b7 	beq.w	800c174 <_dtoa_r+0x8c4>
 800c006:	b18c      	cbz	r4, 800c02c <_dtoa_r+0x77c>
 800c008:	4629      	mov	r1, r5
 800c00a:	4622      	mov	r2, r4
 800c00c:	4658      	mov	r0, fp
 800c00e:	f000 ffc3 	bl	800cf98 <__pow5mult>
 800c012:	464a      	mov	r2, r9
 800c014:	4601      	mov	r1, r0
 800c016:	4605      	mov	r5, r0
 800c018:	4658      	mov	r0, fp
 800c01a:	f000 ff13 	bl	800ce44 <__multiply>
 800c01e:	4649      	mov	r1, r9
 800c020:	9004      	str	r0, [sp, #16]
 800c022:	4658      	mov	r0, fp
 800c024:	f000 fe44 	bl	800ccb0 <_Bfree>
 800c028:	9b04      	ldr	r3, [sp, #16]
 800c02a:	4699      	mov	r9, r3
 800c02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c02e:	1b1a      	subs	r2, r3, r4
 800c030:	d004      	beq.n	800c03c <_dtoa_r+0x78c>
 800c032:	4649      	mov	r1, r9
 800c034:	4658      	mov	r0, fp
 800c036:	f000 ffaf 	bl	800cf98 <__pow5mult>
 800c03a:	4681      	mov	r9, r0
 800c03c:	2101      	movs	r1, #1
 800c03e:	4658      	mov	r0, fp
 800c040:	f000 feea 	bl	800ce18 <__i2b>
 800c044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c046:	4604      	mov	r4, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 81cf 	beq.w	800c3ec <_dtoa_r+0xb3c>
 800c04e:	461a      	mov	r2, r3
 800c050:	4601      	mov	r1, r0
 800c052:	4658      	mov	r0, fp
 800c054:	f000 ffa0 	bl	800cf98 <__pow5mult>
 800c058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	4604      	mov	r4, r0
 800c05e:	f300 8095 	bgt.w	800c18c <_dtoa_r+0x8dc>
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	f040 8087 	bne.w	800c178 <_dtoa_r+0x8c8>
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c070:	2b00      	cmp	r3, #0
 800c072:	f040 8089 	bne.w	800c188 <_dtoa_r+0x8d8>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c07c:	0d1b      	lsrs	r3, r3, #20
 800c07e:	051b      	lsls	r3, r3, #20
 800c080:	b12b      	cbz	r3, 800c08e <_dtoa_r+0x7de>
 800c082:	9b08      	ldr	r3, [sp, #32]
 800c084:	3301      	adds	r3, #1
 800c086:	9308      	str	r3, [sp, #32]
 800c088:	f108 0801 	add.w	r8, r8, #1
 800c08c:	2301      	movs	r3, #1
 800c08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 81b0 	beq.w	800c3f8 <_dtoa_r+0xb48>
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c09e:	6918      	ldr	r0, [r3, #16]
 800c0a0:	f000 fe6e 	bl	800cd80 <__hi0bits>
 800c0a4:	f1c0 0020 	rsb	r0, r0, #32
 800c0a8:	9b08      	ldr	r3, [sp, #32]
 800c0aa:	4418      	add	r0, r3
 800c0ac:	f010 001f 	ands.w	r0, r0, #31
 800c0b0:	d077      	beq.n	800c1a2 <_dtoa_r+0x8f2>
 800c0b2:	f1c0 0320 	rsb	r3, r0, #32
 800c0b6:	2b04      	cmp	r3, #4
 800c0b8:	dd6b      	ble.n	800c192 <_dtoa_r+0x8e2>
 800c0ba:	9b08      	ldr	r3, [sp, #32]
 800c0bc:	f1c0 001c 	rsb	r0, r0, #28
 800c0c0:	4403      	add	r3, r0
 800c0c2:	4480      	add	r8, r0
 800c0c4:	4406      	add	r6, r0
 800c0c6:	9308      	str	r3, [sp, #32]
 800c0c8:	f1b8 0f00 	cmp.w	r8, #0
 800c0cc:	dd05      	ble.n	800c0da <_dtoa_r+0x82a>
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	4658      	mov	r0, fp
 800c0d4:	f000 ffba 	bl	800d04c <__lshift>
 800c0d8:	4681      	mov	r9, r0
 800c0da:	9b08      	ldr	r3, [sp, #32]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dd05      	ble.n	800c0ec <_dtoa_r+0x83c>
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4658      	mov	r0, fp
 800c0e6:	f000 ffb1 	bl	800d04c <__lshift>
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d059      	beq.n	800c1a6 <_dtoa_r+0x8f6>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f001 f815 	bl	800d124 <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	da53      	bge.n	800c1a6 <_dtoa_r+0x8f6>
 800c0fe:	1e7b      	subs	r3, r7, #1
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	4649      	mov	r1, r9
 800c104:	2300      	movs	r3, #0
 800c106:	220a      	movs	r2, #10
 800c108:	4658      	mov	r0, fp
 800c10a:	f000 fdf3 	bl	800ccf4 <__multadd>
 800c10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c110:	4681      	mov	r9, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 8172 	beq.w	800c3fc <_dtoa_r+0xb4c>
 800c118:	2300      	movs	r3, #0
 800c11a:	4629      	mov	r1, r5
 800c11c:	220a      	movs	r2, #10
 800c11e:	4658      	mov	r0, fp
 800c120:	f000 fde8 	bl	800ccf4 <__multadd>
 800c124:	9b00      	ldr	r3, [sp, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	4605      	mov	r5, r0
 800c12a:	dc67      	bgt.n	800c1fc <_dtoa_r+0x94c>
 800c12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12e:	2b02      	cmp	r3, #2
 800c130:	dc41      	bgt.n	800c1b6 <_dtoa_r+0x906>
 800c132:	e063      	b.n	800c1fc <_dtoa_r+0x94c>
 800c134:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c13a:	e746      	b.n	800bfca <_dtoa_r+0x71a>
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	1e5c      	subs	r4, r3, #1
 800c140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c142:	42a3      	cmp	r3, r4
 800c144:	bfbf      	itttt	lt
 800c146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c148:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c14a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c14c:	1ae3      	sublt	r3, r4, r3
 800c14e:	bfb4      	ite	lt
 800c150:	18d2      	addlt	r2, r2, r3
 800c152:	1b1c      	subge	r4, r3, r4
 800c154:	9b07      	ldr	r3, [sp, #28]
 800c156:	bfbc      	itt	lt
 800c158:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c15a:	2400      	movlt	r4, #0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	bfb5      	itete	lt
 800c160:	eba8 0603 	sublt.w	r6, r8, r3
 800c164:	9b07      	ldrge	r3, [sp, #28]
 800c166:	2300      	movlt	r3, #0
 800c168:	4646      	movge	r6, r8
 800c16a:	e730      	b.n	800bfce <_dtoa_r+0x71e>
 800c16c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c16e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c170:	4646      	mov	r6, r8
 800c172:	e735      	b.n	800bfe0 <_dtoa_r+0x730>
 800c174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c176:	e75c      	b.n	800c032 <_dtoa_r+0x782>
 800c178:	2300      	movs	r3, #0
 800c17a:	e788      	b.n	800c08e <_dtoa_r+0x7de>
 800c17c:	3fe00000 	.word	0x3fe00000
 800c180:	40240000 	.word	0x40240000
 800c184:	40140000 	.word	0x40140000
 800c188:	9b02      	ldr	r3, [sp, #8]
 800c18a:	e780      	b.n	800c08e <_dtoa_r+0x7de>
 800c18c:	2300      	movs	r3, #0
 800c18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c190:	e782      	b.n	800c098 <_dtoa_r+0x7e8>
 800c192:	d099      	beq.n	800c0c8 <_dtoa_r+0x818>
 800c194:	9a08      	ldr	r2, [sp, #32]
 800c196:	331c      	adds	r3, #28
 800c198:	441a      	add	r2, r3
 800c19a:	4498      	add	r8, r3
 800c19c:	441e      	add	r6, r3
 800c19e:	9208      	str	r2, [sp, #32]
 800c1a0:	e792      	b.n	800c0c8 <_dtoa_r+0x818>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	e7f6      	b.n	800c194 <_dtoa_r+0x8e4>
 800c1a6:	9b07      	ldr	r3, [sp, #28]
 800c1a8:	9704      	str	r7, [sp, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	dc20      	bgt.n	800c1f0 <_dtoa_r+0x940>
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	dd1e      	ble.n	800c1f4 <_dtoa_r+0x944>
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f47f aec0 	bne.w	800bf3e <_dtoa_r+0x68e>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	2205      	movs	r2, #5
 800c1c2:	4658      	mov	r0, fp
 800c1c4:	f000 fd96 	bl	800ccf4 <__multadd>
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f000 ffa9 	bl	800d124 <__mcmp>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	f77f aeb3 	ble.w	800bf3e <_dtoa_r+0x68e>
 800c1d8:	4656      	mov	r6, sl
 800c1da:	2331      	movs	r3, #49	@ 0x31
 800c1dc:	f806 3b01 	strb.w	r3, [r6], #1
 800c1e0:	9b04      	ldr	r3, [sp, #16]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	e6ae      	b.n	800bf46 <_dtoa_r+0x696>
 800c1e8:	9c07      	ldr	r4, [sp, #28]
 800c1ea:	9704      	str	r7, [sp, #16]
 800c1ec:	4625      	mov	r5, r4
 800c1ee:	e7f3      	b.n	800c1d8 <_dtoa_r+0x928>
 800c1f0:	9b07      	ldr	r3, [sp, #28]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f000 8104 	beq.w	800c404 <_dtoa_r+0xb54>
 800c1fc:	2e00      	cmp	r6, #0
 800c1fe:	dd05      	ble.n	800c20c <_dtoa_r+0x95c>
 800c200:	4629      	mov	r1, r5
 800c202:	4632      	mov	r2, r6
 800c204:	4658      	mov	r0, fp
 800c206:	f000 ff21 	bl	800d04c <__lshift>
 800c20a:	4605      	mov	r5, r0
 800c20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d05a      	beq.n	800c2c8 <_dtoa_r+0xa18>
 800c212:	6869      	ldr	r1, [r5, #4]
 800c214:	4658      	mov	r0, fp
 800c216:	f000 fd0b 	bl	800cc30 <_Balloc>
 800c21a:	4606      	mov	r6, r0
 800c21c:	b928      	cbnz	r0, 800c22a <_dtoa_r+0x97a>
 800c21e:	4b84      	ldr	r3, [pc, #528]	@ (800c430 <_dtoa_r+0xb80>)
 800c220:	4602      	mov	r2, r0
 800c222:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c226:	f7ff bb5a 	b.w	800b8de <_dtoa_r+0x2e>
 800c22a:	692a      	ldr	r2, [r5, #16]
 800c22c:	3202      	adds	r2, #2
 800c22e:	0092      	lsls	r2, r2, #2
 800c230:	f105 010c 	add.w	r1, r5, #12
 800c234:	300c      	adds	r0, #12
 800c236:	f7ff fa84 	bl	800b742 <memcpy>
 800c23a:	2201      	movs	r2, #1
 800c23c:	4631      	mov	r1, r6
 800c23e:	4658      	mov	r0, fp
 800c240:	f000 ff04 	bl	800d04c <__lshift>
 800c244:	f10a 0301 	add.w	r3, sl, #1
 800c248:	9307      	str	r3, [sp, #28]
 800c24a:	9b00      	ldr	r3, [sp, #0]
 800c24c:	4453      	add	r3, sl
 800c24e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c250:	9b02      	ldr	r3, [sp, #8]
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	462f      	mov	r7, r5
 800c258:	930a      	str	r3, [sp, #40]	@ 0x28
 800c25a:	4605      	mov	r5, r0
 800c25c:	9b07      	ldr	r3, [sp, #28]
 800c25e:	4621      	mov	r1, r4
 800c260:	3b01      	subs	r3, #1
 800c262:	4648      	mov	r0, r9
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	f7ff fa99 	bl	800b79c <quorem>
 800c26a:	4639      	mov	r1, r7
 800c26c:	9002      	str	r0, [sp, #8]
 800c26e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c272:	4648      	mov	r0, r9
 800c274:	f000 ff56 	bl	800d124 <__mcmp>
 800c278:	462a      	mov	r2, r5
 800c27a:	9008      	str	r0, [sp, #32]
 800c27c:	4621      	mov	r1, r4
 800c27e:	4658      	mov	r0, fp
 800c280:	f000 ff6c 	bl	800d15c <__mdiff>
 800c284:	68c2      	ldr	r2, [r0, #12]
 800c286:	4606      	mov	r6, r0
 800c288:	bb02      	cbnz	r2, 800c2cc <_dtoa_r+0xa1c>
 800c28a:	4601      	mov	r1, r0
 800c28c:	4648      	mov	r0, r9
 800c28e:	f000 ff49 	bl	800d124 <__mcmp>
 800c292:	4602      	mov	r2, r0
 800c294:	4631      	mov	r1, r6
 800c296:	4658      	mov	r0, fp
 800c298:	920e      	str	r2, [sp, #56]	@ 0x38
 800c29a:	f000 fd09 	bl	800ccb0 <_Bfree>
 800c29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2a2:	9e07      	ldr	r6, [sp, #28]
 800c2a4:	ea43 0102 	orr.w	r1, r3, r2
 800c2a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2aa:	4319      	orrs	r1, r3
 800c2ac:	d110      	bne.n	800c2d0 <_dtoa_r+0xa20>
 800c2ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2b2:	d029      	beq.n	800c308 <_dtoa_r+0xa58>
 800c2b4:	9b08      	ldr	r3, [sp, #32]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	dd02      	ble.n	800c2c0 <_dtoa_r+0xa10>
 800c2ba:	9b02      	ldr	r3, [sp, #8]
 800c2bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c2c0:	9b00      	ldr	r3, [sp, #0]
 800c2c2:	f883 8000 	strb.w	r8, [r3]
 800c2c6:	e63f      	b.n	800bf48 <_dtoa_r+0x698>
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	e7bb      	b.n	800c244 <_dtoa_r+0x994>
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	e7e1      	b.n	800c294 <_dtoa_r+0x9e4>
 800c2d0:	9b08      	ldr	r3, [sp, #32]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	db04      	blt.n	800c2e0 <_dtoa_r+0xa30>
 800c2d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	d120      	bne.n	800c322 <_dtoa_r+0xa72>
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	dded      	ble.n	800c2c0 <_dtoa_r+0xa10>
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	f000 feaf 	bl	800d04c <__lshift>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4681      	mov	r9, r0
 800c2f2:	f000 ff17 	bl	800d124 <__mcmp>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	dc03      	bgt.n	800c302 <_dtoa_r+0xa52>
 800c2fa:	d1e1      	bne.n	800c2c0 <_dtoa_r+0xa10>
 800c2fc:	f018 0f01 	tst.w	r8, #1
 800c300:	d0de      	beq.n	800c2c0 <_dtoa_r+0xa10>
 800c302:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c306:	d1d8      	bne.n	800c2ba <_dtoa_r+0xa0a>
 800c308:	9a00      	ldr	r2, [sp, #0]
 800c30a:	2339      	movs	r3, #57	@ 0x39
 800c30c:	7013      	strb	r3, [r2, #0]
 800c30e:	4633      	mov	r3, r6
 800c310:	461e      	mov	r6, r3
 800c312:	3b01      	subs	r3, #1
 800c314:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c318:	2a39      	cmp	r2, #57	@ 0x39
 800c31a:	d052      	beq.n	800c3c2 <_dtoa_r+0xb12>
 800c31c:	3201      	adds	r2, #1
 800c31e:	701a      	strb	r2, [r3, #0]
 800c320:	e612      	b.n	800bf48 <_dtoa_r+0x698>
 800c322:	2a00      	cmp	r2, #0
 800c324:	dd07      	ble.n	800c336 <_dtoa_r+0xa86>
 800c326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c32a:	d0ed      	beq.n	800c308 <_dtoa_r+0xa58>
 800c32c:	9a00      	ldr	r2, [sp, #0]
 800c32e:	f108 0301 	add.w	r3, r8, #1
 800c332:	7013      	strb	r3, [r2, #0]
 800c334:	e608      	b.n	800bf48 <_dtoa_r+0x698>
 800c336:	9b07      	ldr	r3, [sp, #28]
 800c338:	9a07      	ldr	r2, [sp, #28]
 800c33a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c33e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c340:	4293      	cmp	r3, r2
 800c342:	d028      	beq.n	800c396 <_dtoa_r+0xae6>
 800c344:	4649      	mov	r1, r9
 800c346:	2300      	movs	r3, #0
 800c348:	220a      	movs	r2, #10
 800c34a:	4658      	mov	r0, fp
 800c34c:	f000 fcd2 	bl	800ccf4 <__multadd>
 800c350:	42af      	cmp	r7, r5
 800c352:	4681      	mov	r9, r0
 800c354:	f04f 0300 	mov.w	r3, #0
 800c358:	f04f 020a 	mov.w	r2, #10
 800c35c:	4639      	mov	r1, r7
 800c35e:	4658      	mov	r0, fp
 800c360:	d107      	bne.n	800c372 <_dtoa_r+0xac2>
 800c362:	f000 fcc7 	bl	800ccf4 <__multadd>
 800c366:	4607      	mov	r7, r0
 800c368:	4605      	mov	r5, r0
 800c36a:	9b07      	ldr	r3, [sp, #28]
 800c36c:	3301      	adds	r3, #1
 800c36e:	9307      	str	r3, [sp, #28]
 800c370:	e774      	b.n	800c25c <_dtoa_r+0x9ac>
 800c372:	f000 fcbf 	bl	800ccf4 <__multadd>
 800c376:	4629      	mov	r1, r5
 800c378:	4607      	mov	r7, r0
 800c37a:	2300      	movs	r3, #0
 800c37c:	220a      	movs	r2, #10
 800c37e:	4658      	mov	r0, fp
 800c380:	f000 fcb8 	bl	800ccf4 <__multadd>
 800c384:	4605      	mov	r5, r0
 800c386:	e7f0      	b.n	800c36a <_dtoa_r+0xaba>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	bfcc      	ite	gt
 800c38e:	461e      	movgt	r6, r3
 800c390:	2601      	movle	r6, #1
 800c392:	4456      	add	r6, sl
 800c394:	2700      	movs	r7, #0
 800c396:	4649      	mov	r1, r9
 800c398:	2201      	movs	r2, #1
 800c39a:	4658      	mov	r0, fp
 800c39c:	f000 fe56 	bl	800d04c <__lshift>
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	4681      	mov	r9, r0
 800c3a4:	f000 febe 	bl	800d124 <__mcmp>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	dcb0      	bgt.n	800c30e <_dtoa_r+0xa5e>
 800c3ac:	d102      	bne.n	800c3b4 <_dtoa_r+0xb04>
 800c3ae:	f018 0f01 	tst.w	r8, #1
 800c3b2:	d1ac      	bne.n	800c30e <_dtoa_r+0xa5e>
 800c3b4:	4633      	mov	r3, r6
 800c3b6:	461e      	mov	r6, r3
 800c3b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3bc:	2a30      	cmp	r2, #48	@ 0x30
 800c3be:	d0fa      	beq.n	800c3b6 <_dtoa_r+0xb06>
 800c3c0:	e5c2      	b.n	800bf48 <_dtoa_r+0x698>
 800c3c2:	459a      	cmp	sl, r3
 800c3c4:	d1a4      	bne.n	800c310 <_dtoa_r+0xa60>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	9304      	str	r3, [sp, #16]
 800c3cc:	2331      	movs	r3, #49	@ 0x31
 800c3ce:	f88a 3000 	strb.w	r3, [sl]
 800c3d2:	e5b9      	b.n	800bf48 <_dtoa_r+0x698>
 800c3d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c3d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c434 <_dtoa_r+0xb84>
 800c3da:	b11b      	cbz	r3, 800c3e4 <_dtoa_r+0xb34>
 800c3dc:	f10a 0308 	add.w	r3, sl, #8
 800c3e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	4650      	mov	r0, sl
 800c3e6:	b019      	add	sp, #100	@ 0x64
 800c3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	f77f ae37 	ble.w	800c062 <_dtoa_r+0x7b2>
 800c3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	e655      	b.n	800c0a8 <_dtoa_r+0x7f8>
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f77f aed6 	ble.w	800c1b0 <_dtoa_r+0x900>
 800c404:	4656      	mov	r6, sl
 800c406:	4621      	mov	r1, r4
 800c408:	4648      	mov	r0, r9
 800c40a:	f7ff f9c7 	bl	800b79c <quorem>
 800c40e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c412:	f806 8b01 	strb.w	r8, [r6], #1
 800c416:	9b00      	ldr	r3, [sp, #0]
 800c418:	eba6 020a 	sub.w	r2, r6, sl
 800c41c:	4293      	cmp	r3, r2
 800c41e:	ddb3      	ble.n	800c388 <_dtoa_r+0xad8>
 800c420:	4649      	mov	r1, r9
 800c422:	2300      	movs	r3, #0
 800c424:	220a      	movs	r2, #10
 800c426:	4658      	mov	r0, fp
 800c428:	f000 fc64 	bl	800ccf4 <__multadd>
 800c42c:	4681      	mov	r9, r0
 800c42e:	e7ea      	b.n	800c406 <_dtoa_r+0xb56>
 800c430:	0800e1c2 	.word	0x0800e1c2
 800c434:	0800e15d 	.word	0x0800e15d

0800c438 <__ssputs_r>:
 800c438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c43c:	688e      	ldr	r6, [r1, #8]
 800c43e:	461f      	mov	r7, r3
 800c440:	42be      	cmp	r6, r7
 800c442:	680b      	ldr	r3, [r1, #0]
 800c444:	4682      	mov	sl, r0
 800c446:	460c      	mov	r4, r1
 800c448:	4690      	mov	r8, r2
 800c44a:	d82d      	bhi.n	800c4a8 <__ssputs_r+0x70>
 800c44c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c454:	d026      	beq.n	800c4a4 <__ssputs_r+0x6c>
 800c456:	6965      	ldr	r5, [r4, #20]
 800c458:	6909      	ldr	r1, [r1, #16]
 800c45a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c45e:	eba3 0901 	sub.w	r9, r3, r1
 800c462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c466:	1c7b      	adds	r3, r7, #1
 800c468:	444b      	add	r3, r9
 800c46a:	106d      	asrs	r5, r5, #1
 800c46c:	429d      	cmp	r5, r3
 800c46e:	bf38      	it	cc
 800c470:	461d      	movcc	r5, r3
 800c472:	0553      	lsls	r3, r2, #21
 800c474:	d527      	bpl.n	800c4c6 <__ssputs_r+0x8e>
 800c476:	4629      	mov	r1, r5
 800c478:	f000 faa2 	bl	800c9c0 <_malloc_r>
 800c47c:	4606      	mov	r6, r0
 800c47e:	b360      	cbz	r0, 800c4da <__ssputs_r+0xa2>
 800c480:	6921      	ldr	r1, [r4, #16]
 800c482:	464a      	mov	r2, r9
 800c484:	f7ff f95d 	bl	800b742 <memcpy>
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c492:	81a3      	strh	r3, [r4, #12]
 800c494:	6126      	str	r6, [r4, #16]
 800c496:	6165      	str	r5, [r4, #20]
 800c498:	444e      	add	r6, r9
 800c49a:	eba5 0509 	sub.w	r5, r5, r9
 800c49e:	6026      	str	r6, [r4, #0]
 800c4a0:	60a5      	str	r5, [r4, #8]
 800c4a2:	463e      	mov	r6, r7
 800c4a4:	42be      	cmp	r6, r7
 800c4a6:	d900      	bls.n	800c4aa <__ssputs_r+0x72>
 800c4a8:	463e      	mov	r6, r7
 800c4aa:	6820      	ldr	r0, [r4, #0]
 800c4ac:	4632      	mov	r2, r6
 800c4ae:	4641      	mov	r1, r8
 800c4b0:	f001 f8ba 	bl	800d628 <memmove>
 800c4b4:	68a3      	ldr	r3, [r4, #8]
 800c4b6:	1b9b      	subs	r3, r3, r6
 800c4b8:	60a3      	str	r3, [r4, #8]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	4433      	add	r3, r6
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c6:	462a      	mov	r2, r5
 800c4c8:	f000 ff8a 	bl	800d3e0 <_realloc_r>
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d1e0      	bne.n	800c494 <__ssputs_r+0x5c>
 800c4d2:	6921      	ldr	r1, [r4, #16]
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f001 f955 	bl	800d784 <_free_r>
 800c4da:	230c      	movs	r3, #12
 800c4dc:	f8ca 3000 	str.w	r3, [sl]
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4e6:	81a3      	strh	r3, [r4, #12]
 800c4e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4ec:	e7e9      	b.n	800c4c2 <__ssputs_r+0x8a>
	...

0800c4f0 <_svfiprintf_r>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	4698      	mov	r8, r3
 800c4f6:	898b      	ldrh	r3, [r1, #12]
 800c4f8:	061b      	lsls	r3, r3, #24
 800c4fa:	b09d      	sub	sp, #116	@ 0x74
 800c4fc:	4607      	mov	r7, r0
 800c4fe:	460d      	mov	r5, r1
 800c500:	4614      	mov	r4, r2
 800c502:	d510      	bpl.n	800c526 <_svfiprintf_r+0x36>
 800c504:	690b      	ldr	r3, [r1, #16]
 800c506:	b973      	cbnz	r3, 800c526 <_svfiprintf_r+0x36>
 800c508:	2140      	movs	r1, #64	@ 0x40
 800c50a:	f000 fa59 	bl	800c9c0 <_malloc_r>
 800c50e:	6028      	str	r0, [r5, #0]
 800c510:	6128      	str	r0, [r5, #16]
 800c512:	b930      	cbnz	r0, 800c522 <_svfiprintf_r+0x32>
 800c514:	230c      	movs	r3, #12
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c51c:	b01d      	add	sp, #116	@ 0x74
 800c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c522:	2340      	movs	r3, #64	@ 0x40
 800c524:	616b      	str	r3, [r5, #20]
 800c526:	2300      	movs	r3, #0
 800c528:	9309      	str	r3, [sp, #36]	@ 0x24
 800c52a:	2320      	movs	r3, #32
 800c52c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c530:	f8cd 800c 	str.w	r8, [sp, #12]
 800c534:	2330      	movs	r3, #48	@ 0x30
 800c536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6d4 <_svfiprintf_r+0x1e4>
 800c53a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c53e:	f04f 0901 	mov.w	r9, #1
 800c542:	4623      	mov	r3, r4
 800c544:	469a      	mov	sl, r3
 800c546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54a:	b10a      	cbz	r2, 800c550 <_svfiprintf_r+0x60>
 800c54c:	2a25      	cmp	r2, #37	@ 0x25
 800c54e:	d1f9      	bne.n	800c544 <_svfiprintf_r+0x54>
 800c550:	ebba 0b04 	subs.w	fp, sl, r4
 800c554:	d00b      	beq.n	800c56e <_svfiprintf_r+0x7e>
 800c556:	465b      	mov	r3, fp
 800c558:	4622      	mov	r2, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7ff ff6b 	bl	800c438 <__ssputs_r>
 800c562:	3001      	adds	r0, #1
 800c564:	f000 80a7 	beq.w	800c6b6 <_svfiprintf_r+0x1c6>
 800c568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c56a:	445a      	add	r2, fp
 800c56c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c56e:	f89a 3000 	ldrb.w	r3, [sl]
 800c572:	2b00      	cmp	r3, #0
 800c574:	f000 809f 	beq.w	800c6b6 <_svfiprintf_r+0x1c6>
 800c578:	2300      	movs	r3, #0
 800c57a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c57e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c582:	f10a 0a01 	add.w	sl, sl, #1
 800c586:	9304      	str	r3, [sp, #16]
 800c588:	9307      	str	r3, [sp, #28]
 800c58a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c58e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c590:	4654      	mov	r4, sl
 800c592:	2205      	movs	r2, #5
 800c594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c598:	484e      	ldr	r0, [pc, #312]	@ (800c6d4 <_svfiprintf_r+0x1e4>)
 800c59a:	f7f3 fe19 	bl	80001d0 <memchr>
 800c59e:	9a04      	ldr	r2, [sp, #16]
 800c5a0:	b9d8      	cbnz	r0, 800c5da <_svfiprintf_r+0xea>
 800c5a2:	06d0      	lsls	r0, r2, #27
 800c5a4:	bf44      	itt	mi
 800c5a6:	2320      	movmi	r3, #32
 800c5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5ac:	0711      	lsls	r1, r2, #28
 800c5ae:	bf44      	itt	mi
 800c5b0:	232b      	movmi	r3, #43	@ 0x2b
 800c5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5bc:	d015      	beq.n	800c5ea <_svfiprintf_r+0xfa>
 800c5be:	9a07      	ldr	r2, [sp, #28]
 800c5c0:	4654      	mov	r4, sl
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	f04f 0c0a 	mov.w	ip, #10
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ce:	3b30      	subs	r3, #48	@ 0x30
 800c5d0:	2b09      	cmp	r3, #9
 800c5d2:	d94b      	bls.n	800c66c <_svfiprintf_r+0x17c>
 800c5d4:	b1b0      	cbz	r0, 800c604 <_svfiprintf_r+0x114>
 800c5d6:	9207      	str	r2, [sp, #28]
 800c5d8:	e014      	b.n	800c604 <_svfiprintf_r+0x114>
 800c5da:	eba0 0308 	sub.w	r3, r0, r8
 800c5de:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	9304      	str	r3, [sp, #16]
 800c5e6:	46a2      	mov	sl, r4
 800c5e8:	e7d2      	b.n	800c590 <_svfiprintf_r+0xa0>
 800c5ea:	9b03      	ldr	r3, [sp, #12]
 800c5ec:	1d19      	adds	r1, r3, #4
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	9103      	str	r1, [sp, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	bfbb      	ittet	lt
 800c5f6:	425b      	neglt	r3, r3
 800c5f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fc:	9307      	strge	r3, [sp, #28]
 800c5fe:	9307      	strlt	r3, [sp, #28]
 800c600:	bfb8      	it	lt
 800c602:	9204      	strlt	r2, [sp, #16]
 800c604:	7823      	ldrb	r3, [r4, #0]
 800c606:	2b2e      	cmp	r3, #46	@ 0x2e
 800c608:	d10a      	bne.n	800c620 <_svfiprintf_r+0x130>
 800c60a:	7863      	ldrb	r3, [r4, #1]
 800c60c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c60e:	d132      	bne.n	800c676 <_svfiprintf_r+0x186>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	1d1a      	adds	r2, r3, #4
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	9203      	str	r2, [sp, #12]
 800c618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c61c:	3402      	adds	r4, #2
 800c61e:	9305      	str	r3, [sp, #20]
 800c620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6e4 <_svfiprintf_r+0x1f4>
 800c624:	7821      	ldrb	r1, [r4, #0]
 800c626:	2203      	movs	r2, #3
 800c628:	4650      	mov	r0, sl
 800c62a:	f7f3 fdd1 	bl	80001d0 <memchr>
 800c62e:	b138      	cbz	r0, 800c640 <_svfiprintf_r+0x150>
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	eba0 000a 	sub.w	r0, r0, sl
 800c636:	2240      	movs	r2, #64	@ 0x40
 800c638:	4082      	lsls	r2, r0
 800c63a:	4313      	orrs	r3, r2
 800c63c:	3401      	adds	r4, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	4824      	ldr	r0, [pc, #144]	@ (800c6d8 <_svfiprintf_r+0x1e8>)
 800c646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c64a:	2206      	movs	r2, #6
 800c64c:	f7f3 fdc0 	bl	80001d0 <memchr>
 800c650:	2800      	cmp	r0, #0
 800c652:	d036      	beq.n	800c6c2 <_svfiprintf_r+0x1d2>
 800c654:	4b21      	ldr	r3, [pc, #132]	@ (800c6dc <_svfiprintf_r+0x1ec>)
 800c656:	bb1b      	cbnz	r3, 800c6a0 <_svfiprintf_r+0x1b0>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	3307      	adds	r3, #7
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	9303      	str	r3, [sp, #12]
 800c664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c666:	4433      	add	r3, r6
 800c668:	9309      	str	r3, [sp, #36]	@ 0x24
 800c66a:	e76a      	b.n	800c542 <_svfiprintf_r+0x52>
 800c66c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c670:	460c      	mov	r4, r1
 800c672:	2001      	movs	r0, #1
 800c674:	e7a8      	b.n	800c5c8 <_svfiprintf_r+0xd8>
 800c676:	2300      	movs	r3, #0
 800c678:	3401      	adds	r4, #1
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	4619      	mov	r1, r3
 800c67e:	f04f 0c0a 	mov.w	ip, #10
 800c682:	4620      	mov	r0, r4
 800c684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c688:	3a30      	subs	r2, #48	@ 0x30
 800c68a:	2a09      	cmp	r2, #9
 800c68c:	d903      	bls.n	800c696 <_svfiprintf_r+0x1a6>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0c6      	beq.n	800c620 <_svfiprintf_r+0x130>
 800c692:	9105      	str	r1, [sp, #20]
 800c694:	e7c4      	b.n	800c620 <_svfiprintf_r+0x130>
 800c696:	fb0c 2101 	mla	r1, ip, r1, r2
 800c69a:	4604      	mov	r4, r0
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7f0      	b.n	800c682 <_svfiprintf_r+0x192>
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e0 <_svfiprintf_r+0x1f0>)
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	f7fe fa3c 	bl	800ab28 <_printf_float>
 800c6b0:	1c42      	adds	r2, r0, #1
 800c6b2:	4606      	mov	r6, r0
 800c6b4:	d1d6      	bne.n	800c664 <_svfiprintf_r+0x174>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	065b      	lsls	r3, r3, #25
 800c6ba:	f53f af2d 	bmi.w	800c518 <_svfiprintf_r+0x28>
 800c6be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6c0:	e72c      	b.n	800c51c <_svfiprintf_r+0x2c>
 800c6c2:	ab03      	add	r3, sp, #12
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	462a      	mov	r2, r5
 800c6c8:	4b05      	ldr	r3, [pc, #20]	@ (800c6e0 <_svfiprintf_r+0x1f0>)
 800c6ca:	a904      	add	r1, sp, #16
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f7fe fcc3 	bl	800b058 <_printf_i>
 800c6d2:	e7ed      	b.n	800c6b0 <_svfiprintf_r+0x1c0>
 800c6d4:	0800e1d3 	.word	0x0800e1d3
 800c6d8:	0800e1dd 	.word	0x0800e1dd
 800c6dc:	0800ab29 	.word	0x0800ab29
 800c6e0:	0800c439 	.word	0x0800c439
 800c6e4:	0800e1d9 	.word	0x0800e1d9

0800c6e8 <__sfputc_r>:
 800c6e8:	6893      	ldr	r3, [r2, #8]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	b410      	push	{r4}
 800c6f0:	6093      	str	r3, [r2, #8]
 800c6f2:	da08      	bge.n	800c706 <__sfputc_r+0x1e>
 800c6f4:	6994      	ldr	r4, [r2, #24]
 800c6f6:	42a3      	cmp	r3, r4
 800c6f8:	db01      	blt.n	800c6fe <__sfputc_r+0x16>
 800c6fa:	290a      	cmp	r1, #10
 800c6fc:	d103      	bne.n	800c706 <__sfputc_r+0x1e>
 800c6fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c702:	f000 be9b 	b.w	800d43c <__swbuf_r>
 800c706:	6813      	ldr	r3, [r2, #0]
 800c708:	1c58      	adds	r0, r3, #1
 800c70a:	6010      	str	r0, [r2, #0]
 800c70c:	7019      	strb	r1, [r3, #0]
 800c70e:	4608      	mov	r0, r1
 800c710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <__sfputs_r>:
 800c716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c718:	4606      	mov	r6, r0
 800c71a:	460f      	mov	r7, r1
 800c71c:	4614      	mov	r4, r2
 800c71e:	18d5      	adds	r5, r2, r3
 800c720:	42ac      	cmp	r4, r5
 800c722:	d101      	bne.n	800c728 <__sfputs_r+0x12>
 800c724:	2000      	movs	r0, #0
 800c726:	e007      	b.n	800c738 <__sfputs_r+0x22>
 800c728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72c:	463a      	mov	r2, r7
 800c72e:	4630      	mov	r0, r6
 800c730:	f7ff ffda 	bl	800c6e8 <__sfputc_r>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d1f3      	bne.n	800c720 <__sfputs_r+0xa>
 800c738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c73c <_vfiprintf_r>:
 800c73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	460d      	mov	r5, r1
 800c742:	b09d      	sub	sp, #116	@ 0x74
 800c744:	4614      	mov	r4, r2
 800c746:	4698      	mov	r8, r3
 800c748:	4606      	mov	r6, r0
 800c74a:	b118      	cbz	r0, 800c754 <_vfiprintf_r+0x18>
 800c74c:	6a03      	ldr	r3, [r0, #32]
 800c74e:	b90b      	cbnz	r3, 800c754 <_vfiprintf_r+0x18>
 800c750:	f7fe fe82 	bl	800b458 <__sinit>
 800c754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c756:	07d9      	lsls	r1, r3, #31
 800c758:	d405      	bmi.n	800c766 <_vfiprintf_r+0x2a>
 800c75a:	89ab      	ldrh	r3, [r5, #12]
 800c75c:	059a      	lsls	r2, r3, #22
 800c75e:	d402      	bmi.n	800c766 <_vfiprintf_r+0x2a>
 800c760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c762:	f7fe ffec 	bl	800b73e <__retarget_lock_acquire_recursive>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	071b      	lsls	r3, r3, #28
 800c76a:	d501      	bpl.n	800c770 <_vfiprintf_r+0x34>
 800c76c:	692b      	ldr	r3, [r5, #16]
 800c76e:	b99b      	cbnz	r3, 800c798 <_vfiprintf_r+0x5c>
 800c770:	4629      	mov	r1, r5
 800c772:	4630      	mov	r0, r6
 800c774:	f000 fea0 	bl	800d4b8 <__swsetup_r>
 800c778:	b170      	cbz	r0, 800c798 <_vfiprintf_r+0x5c>
 800c77a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c77c:	07dc      	lsls	r4, r3, #31
 800c77e:	d504      	bpl.n	800c78a <_vfiprintf_r+0x4e>
 800c780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c784:	b01d      	add	sp, #116	@ 0x74
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	0598      	lsls	r0, r3, #22
 800c78e:	d4f7      	bmi.n	800c780 <_vfiprintf_r+0x44>
 800c790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c792:	f7fe ffd5 	bl	800b740 <__retarget_lock_release_recursive>
 800c796:	e7f3      	b.n	800c780 <_vfiprintf_r+0x44>
 800c798:	2300      	movs	r3, #0
 800c79a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c79c:	2320      	movs	r3, #32
 800c79e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7a6:	2330      	movs	r3, #48	@ 0x30
 800c7a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c958 <_vfiprintf_r+0x21c>
 800c7ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7b0:	f04f 0901 	mov.w	r9, #1
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	469a      	mov	sl, r3
 800c7b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7bc:	b10a      	cbz	r2, 800c7c2 <_vfiprintf_r+0x86>
 800c7be:	2a25      	cmp	r2, #37	@ 0x25
 800c7c0:	d1f9      	bne.n	800c7b6 <_vfiprintf_r+0x7a>
 800c7c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7c6:	d00b      	beq.n	800c7e0 <_vfiprintf_r+0xa4>
 800c7c8:	465b      	mov	r3, fp
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f7ff ffa1 	bl	800c716 <__sfputs_r>
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	f000 80a7 	beq.w	800c928 <_vfiprintf_r+0x1ec>
 800c7da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7dc:	445a      	add	r2, fp
 800c7de:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 809f 	beq.w	800c928 <_vfiprintf_r+0x1ec>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7f4:	f10a 0a01 	add.w	sl, sl, #1
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	9307      	str	r3, [sp, #28]
 800c7fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c800:	931a      	str	r3, [sp, #104]	@ 0x68
 800c802:	4654      	mov	r4, sl
 800c804:	2205      	movs	r2, #5
 800c806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80a:	4853      	ldr	r0, [pc, #332]	@ (800c958 <_vfiprintf_r+0x21c>)
 800c80c:	f7f3 fce0 	bl	80001d0 <memchr>
 800c810:	9a04      	ldr	r2, [sp, #16]
 800c812:	b9d8      	cbnz	r0, 800c84c <_vfiprintf_r+0x110>
 800c814:	06d1      	lsls	r1, r2, #27
 800c816:	bf44      	itt	mi
 800c818:	2320      	movmi	r3, #32
 800c81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c81e:	0713      	lsls	r3, r2, #28
 800c820:	bf44      	itt	mi
 800c822:	232b      	movmi	r3, #43	@ 0x2b
 800c824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c828:	f89a 3000 	ldrb.w	r3, [sl]
 800c82c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c82e:	d015      	beq.n	800c85c <_vfiprintf_r+0x120>
 800c830:	9a07      	ldr	r2, [sp, #28]
 800c832:	4654      	mov	r4, sl
 800c834:	2000      	movs	r0, #0
 800c836:	f04f 0c0a 	mov.w	ip, #10
 800c83a:	4621      	mov	r1, r4
 800c83c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c840:	3b30      	subs	r3, #48	@ 0x30
 800c842:	2b09      	cmp	r3, #9
 800c844:	d94b      	bls.n	800c8de <_vfiprintf_r+0x1a2>
 800c846:	b1b0      	cbz	r0, 800c876 <_vfiprintf_r+0x13a>
 800c848:	9207      	str	r2, [sp, #28]
 800c84a:	e014      	b.n	800c876 <_vfiprintf_r+0x13a>
 800c84c:	eba0 0308 	sub.w	r3, r0, r8
 800c850:	fa09 f303 	lsl.w	r3, r9, r3
 800c854:	4313      	orrs	r3, r2
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	46a2      	mov	sl, r4
 800c85a:	e7d2      	b.n	800c802 <_vfiprintf_r+0xc6>
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	1d19      	adds	r1, r3, #4
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	9103      	str	r1, [sp, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	bfbb      	ittet	lt
 800c868:	425b      	neglt	r3, r3
 800c86a:	f042 0202 	orrlt.w	r2, r2, #2
 800c86e:	9307      	strge	r3, [sp, #28]
 800c870:	9307      	strlt	r3, [sp, #28]
 800c872:	bfb8      	it	lt
 800c874:	9204      	strlt	r2, [sp, #16]
 800c876:	7823      	ldrb	r3, [r4, #0]
 800c878:	2b2e      	cmp	r3, #46	@ 0x2e
 800c87a:	d10a      	bne.n	800c892 <_vfiprintf_r+0x156>
 800c87c:	7863      	ldrb	r3, [r4, #1]
 800c87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c880:	d132      	bne.n	800c8e8 <_vfiprintf_r+0x1ac>
 800c882:	9b03      	ldr	r3, [sp, #12]
 800c884:	1d1a      	adds	r2, r3, #4
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	9203      	str	r2, [sp, #12]
 800c88a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c88e:	3402      	adds	r4, #2
 800c890:	9305      	str	r3, [sp, #20]
 800c892:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c968 <_vfiprintf_r+0x22c>
 800c896:	7821      	ldrb	r1, [r4, #0]
 800c898:	2203      	movs	r2, #3
 800c89a:	4650      	mov	r0, sl
 800c89c:	f7f3 fc98 	bl	80001d0 <memchr>
 800c8a0:	b138      	cbz	r0, 800c8b2 <_vfiprintf_r+0x176>
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	eba0 000a 	sub.w	r0, r0, sl
 800c8a8:	2240      	movs	r2, #64	@ 0x40
 800c8aa:	4082      	lsls	r2, r0
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	3401      	adds	r4, #1
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b6:	4829      	ldr	r0, [pc, #164]	@ (800c95c <_vfiprintf_r+0x220>)
 800c8b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8bc:	2206      	movs	r2, #6
 800c8be:	f7f3 fc87 	bl	80001d0 <memchr>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d03f      	beq.n	800c946 <_vfiprintf_r+0x20a>
 800c8c6:	4b26      	ldr	r3, [pc, #152]	@ (800c960 <_vfiprintf_r+0x224>)
 800c8c8:	bb1b      	cbnz	r3, 800c912 <_vfiprintf_r+0x1d6>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	3307      	adds	r3, #7
 800c8ce:	f023 0307 	bic.w	r3, r3, #7
 800c8d2:	3308      	adds	r3, #8
 800c8d4:	9303      	str	r3, [sp, #12]
 800c8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d8:	443b      	add	r3, r7
 800c8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8dc:	e76a      	b.n	800c7b4 <_vfiprintf_r+0x78>
 800c8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	e7a8      	b.n	800c83a <_vfiprintf_r+0xfe>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	3401      	adds	r4, #1
 800c8ec:	9305      	str	r3, [sp, #20]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	f04f 0c0a 	mov.w	ip, #10
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8fa:	3a30      	subs	r2, #48	@ 0x30
 800c8fc:	2a09      	cmp	r2, #9
 800c8fe:	d903      	bls.n	800c908 <_vfiprintf_r+0x1cc>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d0c6      	beq.n	800c892 <_vfiprintf_r+0x156>
 800c904:	9105      	str	r1, [sp, #20]
 800c906:	e7c4      	b.n	800c892 <_vfiprintf_r+0x156>
 800c908:	fb0c 2101 	mla	r1, ip, r1, r2
 800c90c:	4604      	mov	r4, r0
 800c90e:	2301      	movs	r3, #1
 800c910:	e7f0      	b.n	800c8f4 <_vfiprintf_r+0x1b8>
 800c912:	ab03      	add	r3, sp, #12
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	462a      	mov	r2, r5
 800c918:	4b12      	ldr	r3, [pc, #72]	@ (800c964 <_vfiprintf_r+0x228>)
 800c91a:	a904      	add	r1, sp, #16
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7fe f903 	bl	800ab28 <_printf_float>
 800c922:	4607      	mov	r7, r0
 800c924:	1c78      	adds	r0, r7, #1
 800c926:	d1d6      	bne.n	800c8d6 <_vfiprintf_r+0x19a>
 800c928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c92a:	07d9      	lsls	r1, r3, #31
 800c92c:	d405      	bmi.n	800c93a <_vfiprintf_r+0x1fe>
 800c92e:	89ab      	ldrh	r3, [r5, #12]
 800c930:	059a      	lsls	r2, r3, #22
 800c932:	d402      	bmi.n	800c93a <_vfiprintf_r+0x1fe>
 800c934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c936:	f7fe ff03 	bl	800b740 <__retarget_lock_release_recursive>
 800c93a:	89ab      	ldrh	r3, [r5, #12]
 800c93c:	065b      	lsls	r3, r3, #25
 800c93e:	f53f af1f 	bmi.w	800c780 <_vfiprintf_r+0x44>
 800c942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c944:	e71e      	b.n	800c784 <_vfiprintf_r+0x48>
 800c946:	ab03      	add	r3, sp, #12
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	462a      	mov	r2, r5
 800c94c:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <_vfiprintf_r+0x228>)
 800c94e:	a904      	add	r1, sp, #16
 800c950:	4630      	mov	r0, r6
 800c952:	f7fe fb81 	bl	800b058 <_printf_i>
 800c956:	e7e4      	b.n	800c922 <_vfiprintf_r+0x1e6>
 800c958:	0800e1d3 	.word	0x0800e1d3
 800c95c:	0800e1dd 	.word	0x0800e1dd
 800c960:	0800ab29 	.word	0x0800ab29
 800c964:	0800c717 	.word	0x0800c717
 800c968:	0800e1d9 	.word	0x0800e1d9

0800c96c <malloc>:
 800c96c:	4b02      	ldr	r3, [pc, #8]	@ (800c978 <malloc+0xc>)
 800c96e:	4601      	mov	r1, r0
 800c970:	6818      	ldr	r0, [r3, #0]
 800c972:	f000 b825 	b.w	800c9c0 <_malloc_r>
 800c976:	bf00      	nop
 800c978:	20000104 	.word	0x20000104

0800c97c <sbrk_aligned>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4e0f      	ldr	r6, [pc, #60]	@ (800c9bc <sbrk_aligned+0x40>)
 800c980:	460c      	mov	r4, r1
 800c982:	6831      	ldr	r1, [r6, #0]
 800c984:	4605      	mov	r5, r0
 800c986:	b911      	cbnz	r1, 800c98e <sbrk_aligned+0x12>
 800c988:	f000 febe 	bl	800d708 <_sbrk_r>
 800c98c:	6030      	str	r0, [r6, #0]
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f000 feb9 	bl	800d708 <_sbrk_r>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	d103      	bne.n	800c9a2 <sbrk_aligned+0x26>
 800c99a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c99e:	4620      	mov	r0, r4
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
 800c9a2:	1cc4      	adds	r4, r0, #3
 800c9a4:	f024 0403 	bic.w	r4, r4, #3
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d0f8      	beq.n	800c99e <sbrk_aligned+0x22>
 800c9ac:	1a21      	subs	r1, r4, r0
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f000 feaa 	bl	800d708 <_sbrk_r>
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d1f2      	bne.n	800c99e <sbrk_aligned+0x22>
 800c9b8:	e7ef      	b.n	800c99a <sbrk_aligned+0x1e>
 800c9ba:	bf00      	nop
 800c9bc:	20000f28 	.word	0x20000f28

0800c9c0 <_malloc_r>:
 800c9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	1ccd      	adds	r5, r1, #3
 800c9c6:	f025 0503 	bic.w	r5, r5, #3
 800c9ca:	3508      	adds	r5, #8
 800c9cc:	2d0c      	cmp	r5, #12
 800c9ce:	bf38      	it	cc
 800c9d0:	250c      	movcc	r5, #12
 800c9d2:	2d00      	cmp	r5, #0
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	db01      	blt.n	800c9dc <_malloc_r+0x1c>
 800c9d8:	42a9      	cmp	r1, r5
 800c9da:	d904      	bls.n	800c9e6 <_malloc_r+0x26>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	6033      	str	r3, [r6, #0]
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cabc <_malloc_r+0xfc>
 800c9ea:	f000 f915 	bl	800cc18 <__malloc_lock>
 800c9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c9f2:	461c      	mov	r4, r3
 800c9f4:	bb44      	cbnz	r4, 800ca48 <_malloc_r+0x88>
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff ffbf 	bl	800c97c <sbrk_aligned>
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	4604      	mov	r4, r0
 800ca02:	d158      	bne.n	800cab6 <_malloc_r+0xf6>
 800ca04:	f8d8 4000 	ldr.w	r4, [r8]
 800ca08:	4627      	mov	r7, r4
 800ca0a:	2f00      	cmp	r7, #0
 800ca0c:	d143      	bne.n	800ca96 <_malloc_r+0xd6>
 800ca0e:	2c00      	cmp	r4, #0
 800ca10:	d04b      	beq.n	800caaa <_malloc_r+0xea>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	4639      	mov	r1, r7
 800ca16:	4630      	mov	r0, r6
 800ca18:	eb04 0903 	add.w	r9, r4, r3
 800ca1c:	f000 fe74 	bl	800d708 <_sbrk_r>
 800ca20:	4581      	cmp	r9, r0
 800ca22:	d142      	bne.n	800caaa <_malloc_r+0xea>
 800ca24:	6821      	ldr	r1, [r4, #0]
 800ca26:	1a6d      	subs	r5, r5, r1
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7ff ffa6 	bl	800c97c <sbrk_aligned>
 800ca30:	3001      	adds	r0, #1
 800ca32:	d03a      	beq.n	800caaa <_malloc_r+0xea>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	442b      	add	r3, r5
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	bb62      	cbnz	r2, 800ca9c <_malloc_r+0xdc>
 800ca42:	f8c8 7000 	str.w	r7, [r8]
 800ca46:	e00f      	b.n	800ca68 <_malloc_r+0xa8>
 800ca48:	6822      	ldr	r2, [r4, #0]
 800ca4a:	1b52      	subs	r2, r2, r5
 800ca4c:	d420      	bmi.n	800ca90 <_malloc_r+0xd0>
 800ca4e:	2a0b      	cmp	r2, #11
 800ca50:	d917      	bls.n	800ca82 <_malloc_r+0xc2>
 800ca52:	1961      	adds	r1, r4, r5
 800ca54:	42a3      	cmp	r3, r4
 800ca56:	6025      	str	r5, [r4, #0]
 800ca58:	bf18      	it	ne
 800ca5a:	6059      	strne	r1, [r3, #4]
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	bf08      	it	eq
 800ca60:	f8c8 1000 	streq.w	r1, [r8]
 800ca64:	5162      	str	r2, [r4, r5]
 800ca66:	604b      	str	r3, [r1, #4]
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f8db 	bl	800cc24 <__malloc_unlock>
 800ca6e:	f104 000b 	add.w	r0, r4, #11
 800ca72:	1d23      	adds	r3, r4, #4
 800ca74:	f020 0007 	bic.w	r0, r0, #7
 800ca78:	1ac2      	subs	r2, r0, r3
 800ca7a:	bf1c      	itt	ne
 800ca7c:	1a1b      	subne	r3, r3, r0
 800ca7e:	50a3      	strne	r3, [r4, r2]
 800ca80:	e7af      	b.n	800c9e2 <_malloc_r+0x22>
 800ca82:	6862      	ldr	r2, [r4, #4]
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	bf0c      	ite	eq
 800ca88:	f8c8 2000 	streq.w	r2, [r8]
 800ca8c:	605a      	strne	r2, [r3, #4]
 800ca8e:	e7eb      	b.n	800ca68 <_malloc_r+0xa8>
 800ca90:	4623      	mov	r3, r4
 800ca92:	6864      	ldr	r4, [r4, #4]
 800ca94:	e7ae      	b.n	800c9f4 <_malloc_r+0x34>
 800ca96:	463c      	mov	r4, r7
 800ca98:	687f      	ldr	r7, [r7, #4]
 800ca9a:	e7b6      	b.n	800ca0a <_malloc_r+0x4a>
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d1fb      	bne.n	800ca9c <_malloc_r+0xdc>
 800caa4:	2300      	movs	r3, #0
 800caa6:	6053      	str	r3, [r2, #4]
 800caa8:	e7de      	b.n	800ca68 <_malloc_r+0xa8>
 800caaa:	230c      	movs	r3, #12
 800caac:	6033      	str	r3, [r6, #0]
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 f8b8 	bl	800cc24 <__malloc_unlock>
 800cab4:	e794      	b.n	800c9e0 <_malloc_r+0x20>
 800cab6:	6005      	str	r5, [r0, #0]
 800cab8:	e7d6      	b.n	800ca68 <_malloc_r+0xa8>
 800caba:	bf00      	nop
 800cabc:	20000f2c 	.word	0x20000f2c

0800cac0 <__sflush_r>:
 800cac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac8:	0716      	lsls	r6, r2, #28
 800caca:	4605      	mov	r5, r0
 800cacc:	460c      	mov	r4, r1
 800cace:	d454      	bmi.n	800cb7a <__sflush_r+0xba>
 800cad0:	684b      	ldr	r3, [r1, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	dc02      	bgt.n	800cadc <__sflush_r+0x1c>
 800cad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dd48      	ble.n	800cb6e <__sflush_r+0xae>
 800cadc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cade:	2e00      	cmp	r6, #0
 800cae0:	d045      	beq.n	800cb6e <__sflush_r+0xae>
 800cae2:	2300      	movs	r3, #0
 800cae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cae8:	682f      	ldr	r7, [r5, #0]
 800caea:	6a21      	ldr	r1, [r4, #32]
 800caec:	602b      	str	r3, [r5, #0]
 800caee:	d030      	beq.n	800cb52 <__sflush_r+0x92>
 800caf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	0759      	lsls	r1, r3, #29
 800caf6:	d505      	bpl.n	800cb04 <__sflush_r+0x44>
 800caf8:	6863      	ldr	r3, [r4, #4]
 800cafa:	1ad2      	subs	r2, r2, r3
 800cafc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cafe:	b10b      	cbz	r3, 800cb04 <__sflush_r+0x44>
 800cb00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb02:	1ad2      	subs	r2, r2, r3
 800cb04:	2300      	movs	r3, #0
 800cb06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb08:	6a21      	ldr	r1, [r4, #32]
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	47b0      	blx	r6
 800cb0e:	1c43      	adds	r3, r0, #1
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	d106      	bne.n	800cb22 <__sflush_r+0x62>
 800cb14:	6829      	ldr	r1, [r5, #0]
 800cb16:	291d      	cmp	r1, #29
 800cb18:	d82b      	bhi.n	800cb72 <__sflush_r+0xb2>
 800cb1a:	4a2a      	ldr	r2, [pc, #168]	@ (800cbc4 <__sflush_r+0x104>)
 800cb1c:	410a      	asrs	r2, r1
 800cb1e:	07d6      	lsls	r6, r2, #31
 800cb20:	d427      	bmi.n	800cb72 <__sflush_r+0xb2>
 800cb22:	2200      	movs	r2, #0
 800cb24:	6062      	str	r2, [r4, #4]
 800cb26:	04d9      	lsls	r1, r3, #19
 800cb28:	6922      	ldr	r2, [r4, #16]
 800cb2a:	6022      	str	r2, [r4, #0]
 800cb2c:	d504      	bpl.n	800cb38 <__sflush_r+0x78>
 800cb2e:	1c42      	adds	r2, r0, #1
 800cb30:	d101      	bne.n	800cb36 <__sflush_r+0x76>
 800cb32:	682b      	ldr	r3, [r5, #0]
 800cb34:	b903      	cbnz	r3, 800cb38 <__sflush_r+0x78>
 800cb36:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb3a:	602f      	str	r7, [r5, #0]
 800cb3c:	b1b9      	cbz	r1, 800cb6e <__sflush_r+0xae>
 800cb3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb42:	4299      	cmp	r1, r3
 800cb44:	d002      	beq.n	800cb4c <__sflush_r+0x8c>
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 fe1c 	bl	800d784 <_free_r>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb50:	e00d      	b.n	800cb6e <__sflush_r+0xae>
 800cb52:	2301      	movs	r3, #1
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b0      	blx	r6
 800cb58:	4602      	mov	r2, r0
 800cb5a:	1c50      	adds	r0, r2, #1
 800cb5c:	d1c9      	bne.n	800caf2 <__sflush_r+0x32>
 800cb5e:	682b      	ldr	r3, [r5, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0c6      	beq.n	800caf2 <__sflush_r+0x32>
 800cb64:	2b1d      	cmp	r3, #29
 800cb66:	d001      	beq.n	800cb6c <__sflush_r+0xac>
 800cb68:	2b16      	cmp	r3, #22
 800cb6a:	d11e      	bne.n	800cbaa <__sflush_r+0xea>
 800cb6c:	602f      	str	r7, [r5, #0]
 800cb6e:	2000      	movs	r0, #0
 800cb70:	e022      	b.n	800cbb8 <__sflush_r+0xf8>
 800cb72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb76:	b21b      	sxth	r3, r3
 800cb78:	e01b      	b.n	800cbb2 <__sflush_r+0xf2>
 800cb7a:	690f      	ldr	r7, [r1, #16]
 800cb7c:	2f00      	cmp	r7, #0
 800cb7e:	d0f6      	beq.n	800cb6e <__sflush_r+0xae>
 800cb80:	0793      	lsls	r3, r2, #30
 800cb82:	680e      	ldr	r6, [r1, #0]
 800cb84:	bf08      	it	eq
 800cb86:	694b      	ldreq	r3, [r1, #20]
 800cb88:	600f      	str	r7, [r1, #0]
 800cb8a:	bf18      	it	ne
 800cb8c:	2300      	movne	r3, #0
 800cb8e:	eba6 0807 	sub.w	r8, r6, r7
 800cb92:	608b      	str	r3, [r1, #8]
 800cb94:	f1b8 0f00 	cmp.w	r8, #0
 800cb98:	dde9      	ble.n	800cb6e <__sflush_r+0xae>
 800cb9a:	6a21      	ldr	r1, [r4, #32]
 800cb9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb9e:	4643      	mov	r3, r8
 800cba0:	463a      	mov	r2, r7
 800cba2:	4628      	mov	r0, r5
 800cba4:	47b0      	blx	r6
 800cba6:	2800      	cmp	r0, #0
 800cba8:	dc08      	bgt.n	800cbbc <__sflush_r+0xfc>
 800cbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbc:	4407      	add	r7, r0
 800cbbe:	eba8 0800 	sub.w	r8, r8, r0
 800cbc2:	e7e7      	b.n	800cb94 <__sflush_r+0xd4>
 800cbc4:	dfbffffe 	.word	0xdfbffffe

0800cbc8 <_fflush_r>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	690b      	ldr	r3, [r1, #16]
 800cbcc:	4605      	mov	r5, r0
 800cbce:	460c      	mov	r4, r1
 800cbd0:	b913      	cbnz	r3, 800cbd8 <_fflush_r+0x10>
 800cbd2:	2500      	movs	r5, #0
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	b118      	cbz	r0, 800cbe2 <_fflush_r+0x1a>
 800cbda:	6a03      	ldr	r3, [r0, #32]
 800cbdc:	b90b      	cbnz	r3, 800cbe2 <_fflush_r+0x1a>
 800cbde:	f7fe fc3b 	bl	800b458 <__sinit>
 800cbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d0f3      	beq.n	800cbd2 <_fflush_r+0xa>
 800cbea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbec:	07d0      	lsls	r0, r2, #31
 800cbee:	d404      	bmi.n	800cbfa <_fflush_r+0x32>
 800cbf0:	0599      	lsls	r1, r3, #22
 800cbf2:	d402      	bmi.n	800cbfa <_fflush_r+0x32>
 800cbf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbf6:	f7fe fda2 	bl	800b73e <__retarget_lock_acquire_recursive>
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f7ff ff5f 	bl	800cac0 <__sflush_r>
 800cc02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc04:	07da      	lsls	r2, r3, #31
 800cc06:	4605      	mov	r5, r0
 800cc08:	d4e4      	bmi.n	800cbd4 <_fflush_r+0xc>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	059b      	lsls	r3, r3, #22
 800cc0e:	d4e1      	bmi.n	800cbd4 <_fflush_r+0xc>
 800cc10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc12:	f7fe fd95 	bl	800b740 <__retarget_lock_release_recursive>
 800cc16:	e7dd      	b.n	800cbd4 <_fflush_r+0xc>

0800cc18 <__malloc_lock>:
 800cc18:	4801      	ldr	r0, [pc, #4]	@ (800cc20 <__malloc_lock+0x8>)
 800cc1a:	f7fe bd90 	b.w	800b73e <__retarget_lock_acquire_recursive>
 800cc1e:	bf00      	nop
 800cc20:	20000f24 	.word	0x20000f24

0800cc24 <__malloc_unlock>:
 800cc24:	4801      	ldr	r0, [pc, #4]	@ (800cc2c <__malloc_unlock+0x8>)
 800cc26:	f7fe bd8b 	b.w	800b740 <__retarget_lock_release_recursive>
 800cc2a:	bf00      	nop
 800cc2c:	20000f24 	.word	0x20000f24

0800cc30 <_Balloc>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	69c6      	ldr	r6, [r0, #28]
 800cc34:	4604      	mov	r4, r0
 800cc36:	460d      	mov	r5, r1
 800cc38:	b976      	cbnz	r6, 800cc58 <_Balloc+0x28>
 800cc3a:	2010      	movs	r0, #16
 800cc3c:	f7ff fe96 	bl	800c96c <malloc>
 800cc40:	4602      	mov	r2, r0
 800cc42:	61e0      	str	r0, [r4, #28]
 800cc44:	b920      	cbnz	r0, 800cc50 <_Balloc+0x20>
 800cc46:	4b18      	ldr	r3, [pc, #96]	@ (800cca8 <_Balloc+0x78>)
 800cc48:	4818      	ldr	r0, [pc, #96]	@ (800ccac <_Balloc+0x7c>)
 800cc4a:	216b      	movs	r1, #107	@ 0x6b
 800cc4c:	f7fe fd88 	bl	800b760 <__assert_func>
 800cc50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc54:	6006      	str	r6, [r0, #0]
 800cc56:	60c6      	str	r6, [r0, #12]
 800cc58:	69e6      	ldr	r6, [r4, #28]
 800cc5a:	68f3      	ldr	r3, [r6, #12]
 800cc5c:	b183      	cbz	r3, 800cc80 <_Balloc+0x50>
 800cc5e:	69e3      	ldr	r3, [r4, #28]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc66:	b9b8      	cbnz	r0, 800cc98 <_Balloc+0x68>
 800cc68:	2101      	movs	r1, #1
 800cc6a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc6e:	1d72      	adds	r2, r6, #5
 800cc70:	0092      	lsls	r2, r2, #2
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 fd71 	bl	800d75a <_calloc_r>
 800cc78:	b160      	cbz	r0, 800cc94 <_Balloc+0x64>
 800cc7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc7e:	e00e      	b.n	800cc9e <_Balloc+0x6e>
 800cc80:	2221      	movs	r2, #33	@ 0x21
 800cc82:	2104      	movs	r1, #4
 800cc84:	4620      	mov	r0, r4
 800cc86:	f000 fd68 	bl	800d75a <_calloc_r>
 800cc8a:	69e3      	ldr	r3, [r4, #28]
 800cc8c:	60f0      	str	r0, [r6, #12]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e4      	bne.n	800cc5e <_Balloc+0x2e>
 800cc94:	2000      	movs	r0, #0
 800cc96:	bd70      	pop	{r4, r5, r6, pc}
 800cc98:	6802      	ldr	r2, [r0, #0]
 800cc9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cca4:	e7f7      	b.n	800cc96 <_Balloc+0x66>
 800cca6:	bf00      	nop
 800cca8:	0800e0b0 	.word	0x0800e0b0
 800ccac:	0800e1e4 	.word	0x0800e1e4

0800ccb0 <_Bfree>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	69c6      	ldr	r6, [r0, #28]
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	b976      	cbnz	r6, 800ccd8 <_Bfree+0x28>
 800ccba:	2010      	movs	r0, #16
 800ccbc:	f7ff fe56 	bl	800c96c <malloc>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	61e8      	str	r0, [r5, #28]
 800ccc4:	b920      	cbnz	r0, 800ccd0 <_Bfree+0x20>
 800ccc6:	4b09      	ldr	r3, [pc, #36]	@ (800ccec <_Bfree+0x3c>)
 800ccc8:	4809      	ldr	r0, [pc, #36]	@ (800ccf0 <_Bfree+0x40>)
 800ccca:	218f      	movs	r1, #143	@ 0x8f
 800cccc:	f7fe fd48 	bl	800b760 <__assert_func>
 800ccd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccd4:	6006      	str	r6, [r0, #0]
 800ccd6:	60c6      	str	r6, [r0, #12]
 800ccd8:	b13c      	cbz	r4, 800ccea <_Bfree+0x3a>
 800ccda:	69eb      	ldr	r3, [r5, #28]
 800ccdc:	6862      	ldr	r2, [r4, #4]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cce4:	6021      	str	r1, [r4, #0]
 800cce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccea:	bd70      	pop	{r4, r5, r6, pc}
 800ccec:	0800e0b0 	.word	0x0800e0b0
 800ccf0:	0800e1e4 	.word	0x0800e1e4

0800ccf4 <__multadd>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	690d      	ldr	r5, [r1, #16]
 800ccfa:	4607      	mov	r7, r0
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	461e      	mov	r6, r3
 800cd00:	f101 0c14 	add.w	ip, r1, #20
 800cd04:	2000      	movs	r0, #0
 800cd06:	f8dc 3000 	ldr.w	r3, [ip]
 800cd0a:	b299      	uxth	r1, r3
 800cd0c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd10:	0c1e      	lsrs	r6, r3, #16
 800cd12:	0c0b      	lsrs	r3, r1, #16
 800cd14:	fb02 3306 	mla	r3, r2, r6, r3
 800cd18:	b289      	uxth	r1, r1
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd20:	4285      	cmp	r5, r0
 800cd22:	f84c 1b04 	str.w	r1, [ip], #4
 800cd26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd2a:	dcec      	bgt.n	800cd06 <__multadd+0x12>
 800cd2c:	b30e      	cbz	r6, 800cd72 <__multadd+0x7e>
 800cd2e:	68a3      	ldr	r3, [r4, #8]
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	dc19      	bgt.n	800cd68 <__multadd+0x74>
 800cd34:	6861      	ldr	r1, [r4, #4]
 800cd36:	4638      	mov	r0, r7
 800cd38:	3101      	adds	r1, #1
 800cd3a:	f7ff ff79 	bl	800cc30 <_Balloc>
 800cd3e:	4680      	mov	r8, r0
 800cd40:	b928      	cbnz	r0, 800cd4e <__multadd+0x5a>
 800cd42:	4602      	mov	r2, r0
 800cd44:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <__multadd+0x84>)
 800cd46:	480d      	ldr	r0, [pc, #52]	@ (800cd7c <__multadd+0x88>)
 800cd48:	21ba      	movs	r1, #186	@ 0xba
 800cd4a:	f7fe fd09 	bl	800b760 <__assert_func>
 800cd4e:	6922      	ldr	r2, [r4, #16]
 800cd50:	3202      	adds	r2, #2
 800cd52:	f104 010c 	add.w	r1, r4, #12
 800cd56:	0092      	lsls	r2, r2, #2
 800cd58:	300c      	adds	r0, #12
 800cd5a:	f7fe fcf2 	bl	800b742 <memcpy>
 800cd5e:	4621      	mov	r1, r4
 800cd60:	4638      	mov	r0, r7
 800cd62:	f7ff ffa5 	bl	800ccb0 <_Bfree>
 800cd66:	4644      	mov	r4, r8
 800cd68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd6c:	3501      	adds	r5, #1
 800cd6e:	615e      	str	r6, [r3, #20]
 800cd70:	6125      	str	r5, [r4, #16]
 800cd72:	4620      	mov	r0, r4
 800cd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd78:	0800e1c2 	.word	0x0800e1c2
 800cd7c:	0800e1e4 	.word	0x0800e1e4

0800cd80 <__hi0bits>:
 800cd80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd84:	4603      	mov	r3, r0
 800cd86:	bf36      	itet	cc
 800cd88:	0403      	lslcc	r3, r0, #16
 800cd8a:	2000      	movcs	r0, #0
 800cd8c:	2010      	movcc	r0, #16
 800cd8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd92:	bf3c      	itt	cc
 800cd94:	021b      	lslcc	r3, r3, #8
 800cd96:	3008      	addcc	r0, #8
 800cd98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd9c:	bf3c      	itt	cc
 800cd9e:	011b      	lslcc	r3, r3, #4
 800cda0:	3004      	addcc	r0, #4
 800cda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cda6:	bf3c      	itt	cc
 800cda8:	009b      	lslcc	r3, r3, #2
 800cdaa:	3002      	addcc	r0, #2
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	db05      	blt.n	800cdbc <__hi0bits+0x3c>
 800cdb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdb4:	f100 0001 	add.w	r0, r0, #1
 800cdb8:	bf08      	it	eq
 800cdba:	2020      	moveq	r0, #32
 800cdbc:	4770      	bx	lr

0800cdbe <__lo0bits>:
 800cdbe:	6803      	ldr	r3, [r0, #0]
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	f013 0007 	ands.w	r0, r3, #7
 800cdc6:	d00b      	beq.n	800cde0 <__lo0bits+0x22>
 800cdc8:	07d9      	lsls	r1, r3, #31
 800cdca:	d421      	bmi.n	800ce10 <__lo0bits+0x52>
 800cdcc:	0798      	lsls	r0, r3, #30
 800cdce:	bf49      	itett	mi
 800cdd0:	085b      	lsrmi	r3, r3, #1
 800cdd2:	089b      	lsrpl	r3, r3, #2
 800cdd4:	2001      	movmi	r0, #1
 800cdd6:	6013      	strmi	r3, [r2, #0]
 800cdd8:	bf5c      	itt	pl
 800cdda:	6013      	strpl	r3, [r2, #0]
 800cddc:	2002      	movpl	r0, #2
 800cdde:	4770      	bx	lr
 800cde0:	b299      	uxth	r1, r3
 800cde2:	b909      	cbnz	r1, 800cde8 <__lo0bits+0x2a>
 800cde4:	0c1b      	lsrs	r3, r3, #16
 800cde6:	2010      	movs	r0, #16
 800cde8:	b2d9      	uxtb	r1, r3
 800cdea:	b909      	cbnz	r1, 800cdf0 <__lo0bits+0x32>
 800cdec:	3008      	adds	r0, #8
 800cdee:	0a1b      	lsrs	r3, r3, #8
 800cdf0:	0719      	lsls	r1, r3, #28
 800cdf2:	bf04      	itt	eq
 800cdf4:	091b      	lsreq	r3, r3, #4
 800cdf6:	3004      	addeq	r0, #4
 800cdf8:	0799      	lsls	r1, r3, #30
 800cdfa:	bf04      	itt	eq
 800cdfc:	089b      	lsreq	r3, r3, #2
 800cdfe:	3002      	addeq	r0, #2
 800ce00:	07d9      	lsls	r1, r3, #31
 800ce02:	d403      	bmi.n	800ce0c <__lo0bits+0x4e>
 800ce04:	085b      	lsrs	r3, r3, #1
 800ce06:	f100 0001 	add.w	r0, r0, #1
 800ce0a:	d003      	beq.n	800ce14 <__lo0bits+0x56>
 800ce0c:	6013      	str	r3, [r2, #0]
 800ce0e:	4770      	bx	lr
 800ce10:	2000      	movs	r0, #0
 800ce12:	4770      	bx	lr
 800ce14:	2020      	movs	r0, #32
 800ce16:	4770      	bx	lr

0800ce18 <__i2b>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	f7ff ff07 	bl	800cc30 <_Balloc>
 800ce22:	4602      	mov	r2, r0
 800ce24:	b928      	cbnz	r0, 800ce32 <__i2b+0x1a>
 800ce26:	4b05      	ldr	r3, [pc, #20]	@ (800ce3c <__i2b+0x24>)
 800ce28:	4805      	ldr	r0, [pc, #20]	@ (800ce40 <__i2b+0x28>)
 800ce2a:	f240 1145 	movw	r1, #325	@ 0x145
 800ce2e:	f7fe fc97 	bl	800b760 <__assert_func>
 800ce32:	2301      	movs	r3, #1
 800ce34:	6144      	str	r4, [r0, #20]
 800ce36:	6103      	str	r3, [r0, #16]
 800ce38:	bd10      	pop	{r4, pc}
 800ce3a:	bf00      	nop
 800ce3c:	0800e1c2 	.word	0x0800e1c2
 800ce40:	0800e1e4 	.word	0x0800e1e4

0800ce44 <__multiply>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	4614      	mov	r4, r2
 800ce4a:	690a      	ldr	r2, [r1, #16]
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	bfa8      	it	ge
 800ce52:	4623      	movge	r3, r4
 800ce54:	460f      	mov	r7, r1
 800ce56:	bfa4      	itt	ge
 800ce58:	460c      	movge	r4, r1
 800ce5a:	461f      	movge	r7, r3
 800ce5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	6861      	ldr	r1, [r4, #4]
 800ce68:	eb0a 0609 	add.w	r6, sl, r9
 800ce6c:	42b3      	cmp	r3, r6
 800ce6e:	b085      	sub	sp, #20
 800ce70:	bfb8      	it	lt
 800ce72:	3101      	addlt	r1, #1
 800ce74:	f7ff fedc 	bl	800cc30 <_Balloc>
 800ce78:	b930      	cbnz	r0, 800ce88 <__multiply+0x44>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	4b44      	ldr	r3, [pc, #272]	@ (800cf90 <__multiply+0x14c>)
 800ce7e:	4845      	ldr	r0, [pc, #276]	@ (800cf94 <__multiply+0x150>)
 800ce80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce84:	f7fe fc6c 	bl	800b760 <__assert_func>
 800ce88:	f100 0514 	add.w	r5, r0, #20
 800ce8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce90:	462b      	mov	r3, r5
 800ce92:	2200      	movs	r2, #0
 800ce94:	4543      	cmp	r3, r8
 800ce96:	d321      	bcc.n	800cedc <__multiply+0x98>
 800ce98:	f107 0114 	add.w	r1, r7, #20
 800ce9c:	f104 0214 	add.w	r2, r4, #20
 800cea0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cea4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cea8:	9302      	str	r3, [sp, #8]
 800ceaa:	1b13      	subs	r3, r2, r4
 800ceac:	3b15      	subs	r3, #21
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	f104 0715 	add.w	r7, r4, #21
 800ceb8:	42ba      	cmp	r2, r7
 800ceba:	bf38      	it	cc
 800cebc:	2304      	movcc	r3, #4
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	9b02      	ldr	r3, [sp, #8]
 800cec2:	9103      	str	r1, [sp, #12]
 800cec4:	428b      	cmp	r3, r1
 800cec6:	d80c      	bhi.n	800cee2 <__multiply+0x9e>
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	dd03      	ble.n	800ced4 <__multiply+0x90>
 800cecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d05b      	beq.n	800cf8c <__multiply+0x148>
 800ced4:	6106      	str	r6, [r0, #16]
 800ced6:	b005      	add	sp, #20
 800ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cedc:	f843 2b04 	str.w	r2, [r3], #4
 800cee0:	e7d8      	b.n	800ce94 <__multiply+0x50>
 800cee2:	f8b1 a000 	ldrh.w	sl, [r1]
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	d024      	beq.n	800cf36 <__multiply+0xf2>
 800ceec:	f104 0e14 	add.w	lr, r4, #20
 800cef0:	46a9      	mov	r9, r5
 800cef2:	f04f 0c00 	mov.w	ip, #0
 800cef6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cefa:	f8d9 3000 	ldr.w	r3, [r9]
 800cefe:	fa1f fb87 	uxth.w	fp, r7
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cf0c:	f8d9 7000 	ldr.w	r7, [r9]
 800cf10:	4463      	add	r3, ip
 800cf12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf16:	fb0a c70b 	mla	r7, sl, fp, ip
 800cf1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf24:	4572      	cmp	r2, lr
 800cf26:	f849 3b04 	str.w	r3, [r9], #4
 800cf2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf2e:	d8e2      	bhi.n	800cef6 <__multiply+0xb2>
 800cf30:	9b01      	ldr	r3, [sp, #4]
 800cf32:	f845 c003 	str.w	ip, [r5, r3]
 800cf36:	9b03      	ldr	r3, [sp, #12]
 800cf38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf3c:	3104      	adds	r1, #4
 800cf3e:	f1b9 0f00 	cmp.w	r9, #0
 800cf42:	d021      	beq.n	800cf88 <__multiply+0x144>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	f104 0c14 	add.w	ip, r4, #20
 800cf4a:	46ae      	mov	lr, r5
 800cf4c:	f04f 0a00 	mov.w	sl, #0
 800cf50:	f8bc b000 	ldrh.w	fp, [ip]
 800cf54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf58:	fb09 770b 	mla	r7, r9, fp, r7
 800cf5c:	4457      	add	r7, sl
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf64:	f84e 3b04 	str.w	r3, [lr], #4
 800cf68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf70:	f8be 3000 	ldrh.w	r3, [lr]
 800cf74:	fb09 330a 	mla	r3, r9, sl, r3
 800cf78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf7c:	4562      	cmp	r2, ip
 800cf7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf82:	d8e5      	bhi.n	800cf50 <__multiply+0x10c>
 800cf84:	9f01      	ldr	r7, [sp, #4]
 800cf86:	51eb      	str	r3, [r5, r7]
 800cf88:	3504      	adds	r5, #4
 800cf8a:	e799      	b.n	800cec0 <__multiply+0x7c>
 800cf8c:	3e01      	subs	r6, #1
 800cf8e:	e79b      	b.n	800cec8 <__multiply+0x84>
 800cf90:	0800e1c2 	.word	0x0800e1c2
 800cf94:	0800e1e4 	.word	0x0800e1e4

0800cf98 <__pow5mult>:
 800cf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf9c:	4615      	mov	r5, r2
 800cf9e:	f012 0203 	ands.w	r2, r2, #3
 800cfa2:	4607      	mov	r7, r0
 800cfa4:	460e      	mov	r6, r1
 800cfa6:	d007      	beq.n	800cfb8 <__pow5mult+0x20>
 800cfa8:	4c25      	ldr	r4, [pc, #148]	@ (800d040 <__pow5mult+0xa8>)
 800cfaa:	3a01      	subs	r2, #1
 800cfac:	2300      	movs	r3, #0
 800cfae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfb2:	f7ff fe9f 	bl	800ccf4 <__multadd>
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	10ad      	asrs	r5, r5, #2
 800cfba:	d03d      	beq.n	800d038 <__pow5mult+0xa0>
 800cfbc:	69fc      	ldr	r4, [r7, #28]
 800cfbe:	b97c      	cbnz	r4, 800cfe0 <__pow5mult+0x48>
 800cfc0:	2010      	movs	r0, #16
 800cfc2:	f7ff fcd3 	bl	800c96c <malloc>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	61f8      	str	r0, [r7, #28]
 800cfca:	b928      	cbnz	r0, 800cfd8 <__pow5mult+0x40>
 800cfcc:	4b1d      	ldr	r3, [pc, #116]	@ (800d044 <__pow5mult+0xac>)
 800cfce:	481e      	ldr	r0, [pc, #120]	@ (800d048 <__pow5mult+0xb0>)
 800cfd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfd4:	f7fe fbc4 	bl	800b760 <__assert_func>
 800cfd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfdc:	6004      	str	r4, [r0, #0]
 800cfde:	60c4      	str	r4, [r0, #12]
 800cfe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfe8:	b94c      	cbnz	r4, 800cffe <__pow5mult+0x66>
 800cfea:	f240 2171 	movw	r1, #625	@ 0x271
 800cfee:	4638      	mov	r0, r7
 800cff0:	f7ff ff12 	bl	800ce18 <__i2b>
 800cff4:	2300      	movs	r3, #0
 800cff6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cffa:	4604      	mov	r4, r0
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	f04f 0900 	mov.w	r9, #0
 800d002:	07eb      	lsls	r3, r5, #31
 800d004:	d50a      	bpl.n	800d01c <__pow5mult+0x84>
 800d006:	4631      	mov	r1, r6
 800d008:	4622      	mov	r2, r4
 800d00a:	4638      	mov	r0, r7
 800d00c:	f7ff ff1a 	bl	800ce44 <__multiply>
 800d010:	4631      	mov	r1, r6
 800d012:	4680      	mov	r8, r0
 800d014:	4638      	mov	r0, r7
 800d016:	f7ff fe4b 	bl	800ccb0 <_Bfree>
 800d01a:	4646      	mov	r6, r8
 800d01c:	106d      	asrs	r5, r5, #1
 800d01e:	d00b      	beq.n	800d038 <__pow5mult+0xa0>
 800d020:	6820      	ldr	r0, [r4, #0]
 800d022:	b938      	cbnz	r0, 800d034 <__pow5mult+0x9c>
 800d024:	4622      	mov	r2, r4
 800d026:	4621      	mov	r1, r4
 800d028:	4638      	mov	r0, r7
 800d02a:	f7ff ff0b 	bl	800ce44 <__multiply>
 800d02e:	6020      	str	r0, [r4, #0]
 800d030:	f8c0 9000 	str.w	r9, [r0]
 800d034:	4604      	mov	r4, r0
 800d036:	e7e4      	b.n	800d002 <__pow5mult+0x6a>
 800d038:	4630      	mov	r0, r6
 800d03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d03e:	bf00      	nop
 800d040:	0800e240 	.word	0x0800e240
 800d044:	0800e0b0 	.word	0x0800e0b0
 800d048:	0800e1e4 	.word	0x0800e1e4

0800d04c <__lshift>:
 800d04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d050:	460c      	mov	r4, r1
 800d052:	6849      	ldr	r1, [r1, #4]
 800d054:	6923      	ldr	r3, [r4, #16]
 800d056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	4607      	mov	r7, r0
 800d05e:	4691      	mov	r9, r2
 800d060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d064:	f108 0601 	add.w	r6, r8, #1
 800d068:	42b3      	cmp	r3, r6
 800d06a:	db0b      	blt.n	800d084 <__lshift+0x38>
 800d06c:	4638      	mov	r0, r7
 800d06e:	f7ff fddf 	bl	800cc30 <_Balloc>
 800d072:	4605      	mov	r5, r0
 800d074:	b948      	cbnz	r0, 800d08a <__lshift+0x3e>
 800d076:	4602      	mov	r2, r0
 800d078:	4b28      	ldr	r3, [pc, #160]	@ (800d11c <__lshift+0xd0>)
 800d07a:	4829      	ldr	r0, [pc, #164]	@ (800d120 <__lshift+0xd4>)
 800d07c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d080:	f7fe fb6e 	bl	800b760 <__assert_func>
 800d084:	3101      	adds	r1, #1
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	e7ee      	b.n	800d068 <__lshift+0x1c>
 800d08a:	2300      	movs	r3, #0
 800d08c:	f100 0114 	add.w	r1, r0, #20
 800d090:	f100 0210 	add.w	r2, r0, #16
 800d094:	4618      	mov	r0, r3
 800d096:	4553      	cmp	r3, sl
 800d098:	db33      	blt.n	800d102 <__lshift+0xb6>
 800d09a:	6920      	ldr	r0, [r4, #16]
 800d09c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0a0:	f104 0314 	add.w	r3, r4, #20
 800d0a4:	f019 091f 	ands.w	r9, r9, #31
 800d0a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0b0:	d02b      	beq.n	800d10a <__lshift+0xbe>
 800d0b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d0b6:	468a      	mov	sl, r1
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d0c0:	4310      	orrs	r0, r2
 800d0c2:	f84a 0b04 	str.w	r0, [sl], #4
 800d0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ca:	459c      	cmp	ip, r3
 800d0cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0d0:	d8f3      	bhi.n	800d0ba <__lshift+0x6e>
 800d0d2:	ebac 0304 	sub.w	r3, ip, r4
 800d0d6:	3b15      	subs	r3, #21
 800d0d8:	f023 0303 	bic.w	r3, r3, #3
 800d0dc:	3304      	adds	r3, #4
 800d0de:	f104 0015 	add.w	r0, r4, #21
 800d0e2:	4584      	cmp	ip, r0
 800d0e4:	bf38      	it	cc
 800d0e6:	2304      	movcc	r3, #4
 800d0e8:	50ca      	str	r2, [r1, r3]
 800d0ea:	b10a      	cbz	r2, 800d0f0 <__lshift+0xa4>
 800d0ec:	f108 0602 	add.w	r6, r8, #2
 800d0f0:	3e01      	subs	r6, #1
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	612e      	str	r6, [r5, #16]
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f7ff fdda 	bl	800ccb0 <_Bfree>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d102:	f842 0f04 	str.w	r0, [r2, #4]!
 800d106:	3301      	adds	r3, #1
 800d108:	e7c5      	b.n	800d096 <__lshift+0x4a>
 800d10a:	3904      	subs	r1, #4
 800d10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d110:	f841 2f04 	str.w	r2, [r1, #4]!
 800d114:	459c      	cmp	ip, r3
 800d116:	d8f9      	bhi.n	800d10c <__lshift+0xc0>
 800d118:	e7ea      	b.n	800d0f0 <__lshift+0xa4>
 800d11a:	bf00      	nop
 800d11c:	0800e1c2 	.word	0x0800e1c2
 800d120:	0800e1e4 	.word	0x0800e1e4

0800d124 <__mcmp>:
 800d124:	690a      	ldr	r2, [r1, #16]
 800d126:	4603      	mov	r3, r0
 800d128:	6900      	ldr	r0, [r0, #16]
 800d12a:	1a80      	subs	r0, r0, r2
 800d12c:	b530      	push	{r4, r5, lr}
 800d12e:	d10e      	bne.n	800d14e <__mcmp+0x2a>
 800d130:	3314      	adds	r3, #20
 800d132:	3114      	adds	r1, #20
 800d134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d13c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d144:	4295      	cmp	r5, r2
 800d146:	d003      	beq.n	800d150 <__mcmp+0x2c>
 800d148:	d205      	bcs.n	800d156 <__mcmp+0x32>
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d14e:	bd30      	pop	{r4, r5, pc}
 800d150:	42a3      	cmp	r3, r4
 800d152:	d3f3      	bcc.n	800d13c <__mcmp+0x18>
 800d154:	e7fb      	b.n	800d14e <__mcmp+0x2a>
 800d156:	2001      	movs	r0, #1
 800d158:	e7f9      	b.n	800d14e <__mcmp+0x2a>
	...

0800d15c <__mdiff>:
 800d15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	4689      	mov	r9, r1
 800d162:	4606      	mov	r6, r0
 800d164:	4611      	mov	r1, r2
 800d166:	4648      	mov	r0, r9
 800d168:	4614      	mov	r4, r2
 800d16a:	f7ff ffdb 	bl	800d124 <__mcmp>
 800d16e:	1e05      	subs	r5, r0, #0
 800d170:	d112      	bne.n	800d198 <__mdiff+0x3c>
 800d172:	4629      	mov	r1, r5
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff fd5b 	bl	800cc30 <_Balloc>
 800d17a:	4602      	mov	r2, r0
 800d17c:	b928      	cbnz	r0, 800d18a <__mdiff+0x2e>
 800d17e:	4b3f      	ldr	r3, [pc, #252]	@ (800d27c <__mdiff+0x120>)
 800d180:	f240 2137 	movw	r1, #567	@ 0x237
 800d184:	483e      	ldr	r0, [pc, #248]	@ (800d280 <__mdiff+0x124>)
 800d186:	f7fe faeb 	bl	800b760 <__assert_func>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d190:	4610      	mov	r0, r2
 800d192:	b003      	add	sp, #12
 800d194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d198:	bfbc      	itt	lt
 800d19a:	464b      	movlt	r3, r9
 800d19c:	46a1      	movlt	r9, r4
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1a4:	bfba      	itte	lt
 800d1a6:	461c      	movlt	r4, r3
 800d1a8:	2501      	movlt	r5, #1
 800d1aa:	2500      	movge	r5, #0
 800d1ac:	f7ff fd40 	bl	800cc30 <_Balloc>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	b918      	cbnz	r0, 800d1bc <__mdiff+0x60>
 800d1b4:	4b31      	ldr	r3, [pc, #196]	@ (800d27c <__mdiff+0x120>)
 800d1b6:	f240 2145 	movw	r1, #581	@ 0x245
 800d1ba:	e7e3      	b.n	800d184 <__mdiff+0x28>
 800d1bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1c0:	6926      	ldr	r6, [r4, #16]
 800d1c2:	60c5      	str	r5, [r0, #12]
 800d1c4:	f109 0310 	add.w	r3, r9, #16
 800d1c8:	f109 0514 	add.w	r5, r9, #20
 800d1cc:	f104 0e14 	add.w	lr, r4, #20
 800d1d0:	f100 0b14 	add.w	fp, r0, #20
 800d1d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	46d9      	mov	r9, fp
 800d1e0:	f04f 0c00 	mov.w	ip, #0
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	fa1f f38a 	uxth.w	r3, sl
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	b283      	uxth	r3, r0
 800d1f8:	1acb      	subs	r3, r1, r3
 800d1fa:	0c00      	lsrs	r0, r0, #16
 800d1fc:	4463      	add	r3, ip
 800d1fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d206:	b29b      	uxth	r3, r3
 800d208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d20c:	4576      	cmp	r6, lr
 800d20e:	f849 3b04 	str.w	r3, [r9], #4
 800d212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d216:	d8e5      	bhi.n	800d1e4 <__mdiff+0x88>
 800d218:	1b33      	subs	r3, r6, r4
 800d21a:	3b15      	subs	r3, #21
 800d21c:	f023 0303 	bic.w	r3, r3, #3
 800d220:	3415      	adds	r4, #21
 800d222:	3304      	adds	r3, #4
 800d224:	42a6      	cmp	r6, r4
 800d226:	bf38      	it	cc
 800d228:	2304      	movcc	r3, #4
 800d22a:	441d      	add	r5, r3
 800d22c:	445b      	add	r3, fp
 800d22e:	461e      	mov	r6, r3
 800d230:	462c      	mov	r4, r5
 800d232:	4544      	cmp	r4, r8
 800d234:	d30e      	bcc.n	800d254 <__mdiff+0xf8>
 800d236:	f108 0103 	add.w	r1, r8, #3
 800d23a:	1b49      	subs	r1, r1, r5
 800d23c:	f021 0103 	bic.w	r1, r1, #3
 800d240:	3d03      	subs	r5, #3
 800d242:	45a8      	cmp	r8, r5
 800d244:	bf38      	it	cc
 800d246:	2100      	movcc	r1, #0
 800d248:	440b      	add	r3, r1
 800d24a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d24e:	b191      	cbz	r1, 800d276 <__mdiff+0x11a>
 800d250:	6117      	str	r7, [r2, #16]
 800d252:	e79d      	b.n	800d190 <__mdiff+0x34>
 800d254:	f854 1b04 	ldr.w	r1, [r4], #4
 800d258:	46e6      	mov	lr, ip
 800d25a:	0c08      	lsrs	r0, r1, #16
 800d25c:	fa1c fc81 	uxtah	ip, ip, r1
 800d260:	4471      	add	r1, lr
 800d262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d266:	b289      	uxth	r1, r1
 800d268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d26c:	f846 1b04 	str.w	r1, [r6], #4
 800d270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d274:	e7dd      	b.n	800d232 <__mdiff+0xd6>
 800d276:	3f01      	subs	r7, #1
 800d278:	e7e7      	b.n	800d24a <__mdiff+0xee>
 800d27a:	bf00      	nop
 800d27c:	0800e1c2 	.word	0x0800e1c2
 800d280:	0800e1e4 	.word	0x0800e1e4

0800d284 <__d2b>:
 800d284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d288:	460f      	mov	r7, r1
 800d28a:	2101      	movs	r1, #1
 800d28c:	ec59 8b10 	vmov	r8, r9, d0
 800d290:	4616      	mov	r6, r2
 800d292:	f7ff fccd 	bl	800cc30 <_Balloc>
 800d296:	4604      	mov	r4, r0
 800d298:	b930      	cbnz	r0, 800d2a8 <__d2b+0x24>
 800d29a:	4602      	mov	r2, r0
 800d29c:	4b23      	ldr	r3, [pc, #140]	@ (800d32c <__d2b+0xa8>)
 800d29e:	4824      	ldr	r0, [pc, #144]	@ (800d330 <__d2b+0xac>)
 800d2a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2a4:	f7fe fa5c 	bl	800b760 <__assert_func>
 800d2a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2b0:	b10d      	cbz	r5, 800d2b6 <__d2b+0x32>
 800d2b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2b6:	9301      	str	r3, [sp, #4]
 800d2b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d2bc:	d023      	beq.n	800d306 <__d2b+0x82>
 800d2be:	4668      	mov	r0, sp
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	f7ff fd7c 	bl	800cdbe <__lo0bits>
 800d2c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2ca:	b1d0      	cbz	r0, 800d302 <__d2b+0x7e>
 800d2cc:	f1c0 0320 	rsb	r3, r0, #32
 800d2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d4:	430b      	orrs	r3, r1
 800d2d6:	40c2      	lsrs	r2, r0
 800d2d8:	6163      	str	r3, [r4, #20]
 800d2da:	9201      	str	r2, [sp, #4]
 800d2dc:	9b01      	ldr	r3, [sp, #4]
 800d2de:	61a3      	str	r3, [r4, #24]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bf0c      	ite	eq
 800d2e4:	2201      	moveq	r2, #1
 800d2e6:	2202      	movne	r2, #2
 800d2e8:	6122      	str	r2, [r4, #16]
 800d2ea:	b1a5      	cbz	r5, 800d316 <__d2b+0x92>
 800d2ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2f0:	4405      	add	r5, r0
 800d2f2:	603d      	str	r5, [r7, #0]
 800d2f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2f8:	6030      	str	r0, [r6, #0]
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	b003      	add	sp, #12
 800d2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d302:	6161      	str	r1, [r4, #20]
 800d304:	e7ea      	b.n	800d2dc <__d2b+0x58>
 800d306:	a801      	add	r0, sp, #4
 800d308:	f7ff fd59 	bl	800cdbe <__lo0bits>
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	6163      	str	r3, [r4, #20]
 800d310:	3020      	adds	r0, #32
 800d312:	2201      	movs	r2, #1
 800d314:	e7e8      	b.n	800d2e8 <__d2b+0x64>
 800d316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d31a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d31e:	6038      	str	r0, [r7, #0]
 800d320:	6918      	ldr	r0, [r3, #16]
 800d322:	f7ff fd2d 	bl	800cd80 <__hi0bits>
 800d326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d32a:	e7e5      	b.n	800d2f8 <__d2b+0x74>
 800d32c:	0800e1c2 	.word	0x0800e1c2
 800d330:	0800e1e4 	.word	0x0800e1e4

0800d334 <__sread>:
 800d334:	b510      	push	{r4, lr}
 800d336:	460c      	mov	r4, r1
 800d338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33c:	f000 f9d2 	bl	800d6e4 <_read_r>
 800d340:	2800      	cmp	r0, #0
 800d342:	bfab      	itete	ge
 800d344:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d346:	89a3      	ldrhlt	r3, [r4, #12]
 800d348:	181b      	addge	r3, r3, r0
 800d34a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d34e:	bfac      	ite	ge
 800d350:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d352:	81a3      	strhlt	r3, [r4, #12]
 800d354:	bd10      	pop	{r4, pc}

0800d356 <__swrite>:
 800d356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35a:	461f      	mov	r7, r3
 800d35c:	898b      	ldrh	r3, [r1, #12]
 800d35e:	05db      	lsls	r3, r3, #23
 800d360:	4605      	mov	r5, r0
 800d362:	460c      	mov	r4, r1
 800d364:	4616      	mov	r6, r2
 800d366:	d505      	bpl.n	800d374 <__swrite+0x1e>
 800d368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36c:	2302      	movs	r3, #2
 800d36e:	2200      	movs	r2, #0
 800d370:	f000 f9a6 	bl	800d6c0 <_lseek_r>
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d37a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d37e:	81a3      	strh	r3, [r4, #12]
 800d380:	4632      	mov	r2, r6
 800d382:	463b      	mov	r3, r7
 800d384:	4628      	mov	r0, r5
 800d386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d38a:	f000 b9cd 	b.w	800d728 <_write_r>

0800d38e <__sseek>:
 800d38e:	b510      	push	{r4, lr}
 800d390:	460c      	mov	r4, r1
 800d392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d396:	f000 f993 	bl	800d6c0 <_lseek_r>
 800d39a:	1c43      	adds	r3, r0, #1
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	bf15      	itete	ne
 800d3a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d3a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d3a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d3aa:	81a3      	strheq	r3, [r4, #12]
 800d3ac:	bf18      	it	ne
 800d3ae:	81a3      	strhne	r3, [r4, #12]
 800d3b0:	bd10      	pop	{r4, pc}

0800d3b2 <__sclose>:
 800d3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b6:	f000 b951 	b.w	800d65c <_close_r>
	...

0800d3bc <fiprintf>:
 800d3bc:	b40e      	push	{r1, r2, r3}
 800d3be:	b503      	push	{r0, r1, lr}
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	ab03      	add	r3, sp, #12
 800d3c4:	4805      	ldr	r0, [pc, #20]	@ (800d3dc <fiprintf+0x20>)
 800d3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ca:	6800      	ldr	r0, [r0, #0]
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	f7ff f9b5 	bl	800c73c <_vfiprintf_r>
 800d3d2:	b002      	add	sp, #8
 800d3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3d8:	b003      	add	sp, #12
 800d3da:	4770      	bx	lr
 800d3dc:	20000104 	.word	0x20000104

0800d3e0 <_realloc_r>:
 800d3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e4:	4680      	mov	r8, r0
 800d3e6:	4615      	mov	r5, r2
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	b921      	cbnz	r1, 800d3f6 <_realloc_r+0x16>
 800d3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	f7ff bae5 	b.w	800c9c0 <_malloc_r>
 800d3f6:	b92a      	cbnz	r2, 800d404 <_realloc_r+0x24>
 800d3f8:	f000 f9c4 	bl	800d784 <_free_r>
 800d3fc:	2400      	movs	r4, #0
 800d3fe:	4620      	mov	r0, r4
 800d400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d404:	f000 fa1a 	bl	800d83c <_malloc_usable_size_r>
 800d408:	4285      	cmp	r5, r0
 800d40a:	4606      	mov	r6, r0
 800d40c:	d802      	bhi.n	800d414 <_realloc_r+0x34>
 800d40e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d412:	d8f4      	bhi.n	800d3fe <_realloc_r+0x1e>
 800d414:	4629      	mov	r1, r5
 800d416:	4640      	mov	r0, r8
 800d418:	f7ff fad2 	bl	800c9c0 <_malloc_r>
 800d41c:	4607      	mov	r7, r0
 800d41e:	2800      	cmp	r0, #0
 800d420:	d0ec      	beq.n	800d3fc <_realloc_r+0x1c>
 800d422:	42b5      	cmp	r5, r6
 800d424:	462a      	mov	r2, r5
 800d426:	4621      	mov	r1, r4
 800d428:	bf28      	it	cs
 800d42a:	4632      	movcs	r2, r6
 800d42c:	f7fe f989 	bl	800b742 <memcpy>
 800d430:	4621      	mov	r1, r4
 800d432:	4640      	mov	r0, r8
 800d434:	f000 f9a6 	bl	800d784 <_free_r>
 800d438:	463c      	mov	r4, r7
 800d43a:	e7e0      	b.n	800d3fe <_realloc_r+0x1e>

0800d43c <__swbuf_r>:
 800d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43e:	460e      	mov	r6, r1
 800d440:	4614      	mov	r4, r2
 800d442:	4605      	mov	r5, r0
 800d444:	b118      	cbz	r0, 800d44e <__swbuf_r+0x12>
 800d446:	6a03      	ldr	r3, [r0, #32]
 800d448:	b90b      	cbnz	r3, 800d44e <__swbuf_r+0x12>
 800d44a:	f7fe f805 	bl	800b458 <__sinit>
 800d44e:	69a3      	ldr	r3, [r4, #24]
 800d450:	60a3      	str	r3, [r4, #8]
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	071a      	lsls	r2, r3, #28
 800d456:	d501      	bpl.n	800d45c <__swbuf_r+0x20>
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	b943      	cbnz	r3, 800d46e <__swbuf_r+0x32>
 800d45c:	4621      	mov	r1, r4
 800d45e:	4628      	mov	r0, r5
 800d460:	f000 f82a 	bl	800d4b8 <__swsetup_r>
 800d464:	b118      	cbz	r0, 800d46e <__swbuf_r+0x32>
 800d466:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d46a:	4638      	mov	r0, r7
 800d46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46e:	6823      	ldr	r3, [r4, #0]
 800d470:	6922      	ldr	r2, [r4, #16]
 800d472:	1a98      	subs	r0, r3, r2
 800d474:	6963      	ldr	r3, [r4, #20]
 800d476:	b2f6      	uxtb	r6, r6
 800d478:	4283      	cmp	r3, r0
 800d47a:	4637      	mov	r7, r6
 800d47c:	dc05      	bgt.n	800d48a <__swbuf_r+0x4e>
 800d47e:	4621      	mov	r1, r4
 800d480:	4628      	mov	r0, r5
 800d482:	f7ff fba1 	bl	800cbc8 <_fflush_r>
 800d486:	2800      	cmp	r0, #0
 800d488:	d1ed      	bne.n	800d466 <__swbuf_r+0x2a>
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	60a3      	str	r3, [r4, #8]
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	6022      	str	r2, [r4, #0]
 800d496:	701e      	strb	r6, [r3, #0]
 800d498:	6962      	ldr	r2, [r4, #20]
 800d49a:	1c43      	adds	r3, r0, #1
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d004      	beq.n	800d4aa <__swbuf_r+0x6e>
 800d4a0:	89a3      	ldrh	r3, [r4, #12]
 800d4a2:	07db      	lsls	r3, r3, #31
 800d4a4:	d5e1      	bpl.n	800d46a <__swbuf_r+0x2e>
 800d4a6:	2e0a      	cmp	r6, #10
 800d4a8:	d1df      	bne.n	800d46a <__swbuf_r+0x2e>
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f7ff fb8b 	bl	800cbc8 <_fflush_r>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d0d9      	beq.n	800d46a <__swbuf_r+0x2e>
 800d4b6:	e7d6      	b.n	800d466 <__swbuf_r+0x2a>

0800d4b8 <__swsetup_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4b29      	ldr	r3, [pc, #164]	@ (800d560 <__swsetup_r+0xa8>)
 800d4bc:	4605      	mov	r5, r0
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	b118      	cbz	r0, 800d4cc <__swsetup_r+0x14>
 800d4c4:	6a03      	ldr	r3, [r0, #32]
 800d4c6:	b90b      	cbnz	r3, 800d4cc <__swsetup_r+0x14>
 800d4c8:	f7fd ffc6 	bl	800b458 <__sinit>
 800d4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4d0:	0719      	lsls	r1, r3, #28
 800d4d2:	d422      	bmi.n	800d51a <__swsetup_r+0x62>
 800d4d4:	06da      	lsls	r2, r3, #27
 800d4d6:	d407      	bmi.n	800d4e8 <__swsetup_r+0x30>
 800d4d8:	2209      	movs	r2, #9
 800d4da:	602a      	str	r2, [r5, #0]
 800d4dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4e6:	e033      	b.n	800d550 <__swsetup_r+0x98>
 800d4e8:	0758      	lsls	r0, r3, #29
 800d4ea:	d512      	bpl.n	800d512 <__swsetup_r+0x5a>
 800d4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4ee:	b141      	cbz	r1, 800d502 <__swsetup_r+0x4a>
 800d4f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4f4:	4299      	cmp	r1, r3
 800d4f6:	d002      	beq.n	800d4fe <__swsetup_r+0x46>
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f000 f943 	bl	800d784 <_free_r>
 800d4fe:	2300      	movs	r3, #0
 800d500:	6363      	str	r3, [r4, #52]	@ 0x34
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d508:	81a3      	strh	r3, [r4, #12]
 800d50a:	2300      	movs	r3, #0
 800d50c:	6063      	str	r3, [r4, #4]
 800d50e:	6923      	ldr	r3, [r4, #16]
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	f043 0308 	orr.w	r3, r3, #8
 800d518:	81a3      	strh	r3, [r4, #12]
 800d51a:	6923      	ldr	r3, [r4, #16]
 800d51c:	b94b      	cbnz	r3, 800d532 <__swsetup_r+0x7a>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d528:	d003      	beq.n	800d532 <__swsetup_r+0x7a>
 800d52a:	4621      	mov	r1, r4
 800d52c:	4628      	mov	r0, r5
 800d52e:	f000 f83f 	bl	800d5b0 <__smakebuf_r>
 800d532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d536:	f013 0201 	ands.w	r2, r3, #1
 800d53a:	d00a      	beq.n	800d552 <__swsetup_r+0x9a>
 800d53c:	2200      	movs	r2, #0
 800d53e:	60a2      	str	r2, [r4, #8]
 800d540:	6962      	ldr	r2, [r4, #20]
 800d542:	4252      	negs	r2, r2
 800d544:	61a2      	str	r2, [r4, #24]
 800d546:	6922      	ldr	r2, [r4, #16]
 800d548:	b942      	cbnz	r2, 800d55c <__swsetup_r+0xa4>
 800d54a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d54e:	d1c5      	bne.n	800d4dc <__swsetup_r+0x24>
 800d550:	bd38      	pop	{r3, r4, r5, pc}
 800d552:	0799      	lsls	r1, r3, #30
 800d554:	bf58      	it	pl
 800d556:	6962      	ldrpl	r2, [r4, #20]
 800d558:	60a2      	str	r2, [r4, #8]
 800d55a:	e7f4      	b.n	800d546 <__swsetup_r+0x8e>
 800d55c:	2000      	movs	r0, #0
 800d55e:	e7f7      	b.n	800d550 <__swsetup_r+0x98>
 800d560:	20000104 	.word	0x20000104

0800d564 <__swhatbuf_r>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	460c      	mov	r4, r1
 800d568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56c:	2900      	cmp	r1, #0
 800d56e:	b096      	sub	sp, #88	@ 0x58
 800d570:	4615      	mov	r5, r2
 800d572:	461e      	mov	r6, r3
 800d574:	da0d      	bge.n	800d592 <__swhatbuf_r+0x2e>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d57c:	f04f 0100 	mov.w	r1, #0
 800d580:	bf14      	ite	ne
 800d582:	2340      	movne	r3, #64	@ 0x40
 800d584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d588:	2000      	movs	r0, #0
 800d58a:	6031      	str	r1, [r6, #0]
 800d58c:	602b      	str	r3, [r5, #0]
 800d58e:	b016      	add	sp, #88	@ 0x58
 800d590:	bd70      	pop	{r4, r5, r6, pc}
 800d592:	466a      	mov	r2, sp
 800d594:	f000 f872 	bl	800d67c <_fstat_r>
 800d598:	2800      	cmp	r0, #0
 800d59a:	dbec      	blt.n	800d576 <__swhatbuf_r+0x12>
 800d59c:	9901      	ldr	r1, [sp, #4]
 800d59e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5a6:	4259      	negs	r1, r3
 800d5a8:	4159      	adcs	r1, r3
 800d5aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5ae:	e7eb      	b.n	800d588 <__swhatbuf_r+0x24>

0800d5b0 <__smakebuf_r>:
 800d5b0:	898b      	ldrh	r3, [r1, #12]
 800d5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5b4:	079d      	lsls	r5, r3, #30
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	d507      	bpl.n	800d5cc <__smakebuf_r+0x1c>
 800d5bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	6163      	str	r3, [r4, #20]
 800d5c8:	b003      	add	sp, #12
 800d5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5cc:	ab01      	add	r3, sp, #4
 800d5ce:	466a      	mov	r2, sp
 800d5d0:	f7ff ffc8 	bl	800d564 <__swhatbuf_r>
 800d5d4:	9f00      	ldr	r7, [sp, #0]
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	4639      	mov	r1, r7
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7ff f9f0 	bl	800c9c0 <_malloc_r>
 800d5e0:	b948      	cbnz	r0, 800d5f6 <__smakebuf_r+0x46>
 800d5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e6:	059a      	lsls	r2, r3, #22
 800d5e8:	d4ee      	bmi.n	800d5c8 <__smakebuf_r+0x18>
 800d5ea:	f023 0303 	bic.w	r3, r3, #3
 800d5ee:	f043 0302 	orr.w	r3, r3, #2
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	e7e2      	b.n	800d5bc <__smakebuf_r+0xc>
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	6020      	str	r0, [r4, #0]
 800d5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5fe:	81a3      	strh	r3, [r4, #12]
 800d600:	9b01      	ldr	r3, [sp, #4]
 800d602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d606:	b15b      	cbz	r3, 800d620 <__smakebuf_r+0x70>
 800d608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d60c:	4630      	mov	r0, r6
 800d60e:	f000 f847 	bl	800d6a0 <_isatty_r>
 800d612:	b128      	cbz	r0, 800d620 <__smakebuf_r+0x70>
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	f023 0303 	bic.w	r3, r3, #3
 800d61a:	f043 0301 	orr.w	r3, r3, #1
 800d61e:	81a3      	strh	r3, [r4, #12]
 800d620:	89a3      	ldrh	r3, [r4, #12]
 800d622:	431d      	orrs	r5, r3
 800d624:	81a5      	strh	r5, [r4, #12]
 800d626:	e7cf      	b.n	800d5c8 <__smakebuf_r+0x18>

0800d628 <memmove>:
 800d628:	4288      	cmp	r0, r1
 800d62a:	b510      	push	{r4, lr}
 800d62c:	eb01 0402 	add.w	r4, r1, r2
 800d630:	d902      	bls.n	800d638 <memmove+0x10>
 800d632:	4284      	cmp	r4, r0
 800d634:	4623      	mov	r3, r4
 800d636:	d807      	bhi.n	800d648 <memmove+0x20>
 800d638:	1e43      	subs	r3, r0, #1
 800d63a:	42a1      	cmp	r1, r4
 800d63c:	d008      	beq.n	800d650 <memmove+0x28>
 800d63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d642:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d646:	e7f8      	b.n	800d63a <memmove+0x12>
 800d648:	4402      	add	r2, r0
 800d64a:	4601      	mov	r1, r0
 800d64c:	428a      	cmp	r2, r1
 800d64e:	d100      	bne.n	800d652 <memmove+0x2a>
 800d650:	bd10      	pop	{r4, pc}
 800d652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d65a:	e7f7      	b.n	800d64c <memmove+0x24>

0800d65c <_close_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	4d06      	ldr	r5, [pc, #24]	@ (800d678 <_close_r+0x1c>)
 800d660:	2300      	movs	r3, #0
 800d662:	4604      	mov	r4, r0
 800d664:	4608      	mov	r0, r1
 800d666:	602b      	str	r3, [r5, #0]
 800d668:	f7f4 fac4 	bl	8001bf4 <_close>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d102      	bne.n	800d676 <_close_r+0x1a>
 800d670:	682b      	ldr	r3, [r5, #0]
 800d672:	b103      	cbz	r3, 800d676 <_close_r+0x1a>
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	bd38      	pop	{r3, r4, r5, pc}
 800d678:	20000f30 	.word	0x20000f30

0800d67c <_fstat_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d07      	ldr	r5, [pc, #28]	@ (800d69c <_fstat_r+0x20>)
 800d680:	2300      	movs	r3, #0
 800d682:	4604      	mov	r4, r0
 800d684:	4608      	mov	r0, r1
 800d686:	4611      	mov	r1, r2
 800d688:	602b      	str	r3, [r5, #0]
 800d68a:	f7f4 fabf 	bl	8001c0c <_fstat>
 800d68e:	1c43      	adds	r3, r0, #1
 800d690:	d102      	bne.n	800d698 <_fstat_r+0x1c>
 800d692:	682b      	ldr	r3, [r5, #0]
 800d694:	b103      	cbz	r3, 800d698 <_fstat_r+0x1c>
 800d696:	6023      	str	r3, [r4, #0]
 800d698:	bd38      	pop	{r3, r4, r5, pc}
 800d69a:	bf00      	nop
 800d69c:	20000f30 	.word	0x20000f30

0800d6a0 <_isatty_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4d06      	ldr	r5, [pc, #24]	@ (800d6bc <_isatty_r+0x1c>)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	f7f4 fabe 	bl	8001c2c <_isatty>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_isatty_r+0x1a>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_isatty_r+0x1a>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20000f30 	.word	0x20000f30

0800d6c0 <_lseek_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d07      	ldr	r5, [pc, #28]	@ (800d6e0 <_lseek_r+0x20>)
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	602a      	str	r2, [r5, #0]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f7f4 fab7 	bl	8001c42 <_lseek>
 800d6d4:	1c43      	adds	r3, r0, #1
 800d6d6:	d102      	bne.n	800d6de <_lseek_r+0x1e>
 800d6d8:	682b      	ldr	r3, [r5, #0]
 800d6da:	b103      	cbz	r3, 800d6de <_lseek_r+0x1e>
 800d6dc:	6023      	str	r3, [r4, #0]
 800d6de:	bd38      	pop	{r3, r4, r5, pc}
 800d6e0:	20000f30 	.word	0x20000f30

0800d6e4 <_read_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d07      	ldr	r5, [pc, #28]	@ (800d704 <_read_r+0x20>)
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	4608      	mov	r0, r1
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	602a      	str	r2, [r5, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f7f4 fa45 	bl	8001b82 <_read>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	d102      	bne.n	800d702 <_read_r+0x1e>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	b103      	cbz	r3, 800d702 <_read_r+0x1e>
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	bd38      	pop	{r3, r4, r5, pc}
 800d704:	20000f30 	.word	0x20000f30

0800d708 <_sbrk_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d06      	ldr	r5, [pc, #24]	@ (800d724 <_sbrk_r+0x1c>)
 800d70c:	2300      	movs	r3, #0
 800d70e:	4604      	mov	r4, r0
 800d710:	4608      	mov	r0, r1
 800d712:	602b      	str	r3, [r5, #0]
 800d714:	f7f4 faa2 	bl	8001c5c <_sbrk>
 800d718:	1c43      	adds	r3, r0, #1
 800d71a:	d102      	bne.n	800d722 <_sbrk_r+0x1a>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	b103      	cbz	r3, 800d722 <_sbrk_r+0x1a>
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	20000f30 	.word	0x20000f30

0800d728 <_write_r>:
 800d728:	b538      	push	{r3, r4, r5, lr}
 800d72a:	4d07      	ldr	r5, [pc, #28]	@ (800d748 <_write_r+0x20>)
 800d72c:	4604      	mov	r4, r0
 800d72e:	4608      	mov	r0, r1
 800d730:	4611      	mov	r1, r2
 800d732:	2200      	movs	r2, #0
 800d734:	602a      	str	r2, [r5, #0]
 800d736:	461a      	mov	r2, r3
 800d738:	f7f4 fa40 	bl	8001bbc <_write>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_write_r+0x1e>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	b103      	cbz	r3, 800d746 <_write_r+0x1e>
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	20000f30 	.word	0x20000f30

0800d74c <abort>:
 800d74c:	b508      	push	{r3, lr}
 800d74e:	2006      	movs	r0, #6
 800d750:	f000 f8b2 	bl	800d8b8 <raise>
 800d754:	2001      	movs	r0, #1
 800d756:	f7f4 fa09 	bl	8001b6c <_exit>

0800d75a <_calloc_r>:
 800d75a:	b570      	push	{r4, r5, r6, lr}
 800d75c:	fba1 5402 	umull	r5, r4, r1, r2
 800d760:	b93c      	cbnz	r4, 800d772 <_calloc_r+0x18>
 800d762:	4629      	mov	r1, r5
 800d764:	f7ff f92c 	bl	800c9c0 <_malloc_r>
 800d768:	4606      	mov	r6, r0
 800d76a:	b928      	cbnz	r0, 800d778 <_calloc_r+0x1e>
 800d76c:	2600      	movs	r6, #0
 800d76e:	4630      	mov	r0, r6
 800d770:	bd70      	pop	{r4, r5, r6, pc}
 800d772:	220c      	movs	r2, #12
 800d774:	6002      	str	r2, [r0, #0]
 800d776:	e7f9      	b.n	800d76c <_calloc_r+0x12>
 800d778:	462a      	mov	r2, r5
 800d77a:	4621      	mov	r1, r4
 800d77c:	f7fd ffa8 	bl	800b6d0 <memset>
 800d780:	e7f5      	b.n	800d76e <_calloc_r+0x14>
	...

0800d784 <_free_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	4605      	mov	r5, r0
 800d788:	2900      	cmp	r1, #0
 800d78a:	d041      	beq.n	800d810 <_free_r+0x8c>
 800d78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d790:	1f0c      	subs	r4, r1, #4
 800d792:	2b00      	cmp	r3, #0
 800d794:	bfb8      	it	lt
 800d796:	18e4      	addlt	r4, r4, r3
 800d798:	f7ff fa3e 	bl	800cc18 <__malloc_lock>
 800d79c:	4a1d      	ldr	r2, [pc, #116]	@ (800d814 <_free_r+0x90>)
 800d79e:	6813      	ldr	r3, [r2, #0]
 800d7a0:	b933      	cbnz	r3, 800d7b0 <_free_r+0x2c>
 800d7a2:	6063      	str	r3, [r4, #4]
 800d7a4:	6014      	str	r4, [r2, #0]
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ac:	f7ff ba3a 	b.w	800cc24 <__malloc_unlock>
 800d7b0:	42a3      	cmp	r3, r4
 800d7b2:	d908      	bls.n	800d7c6 <_free_r+0x42>
 800d7b4:	6820      	ldr	r0, [r4, #0]
 800d7b6:	1821      	adds	r1, r4, r0
 800d7b8:	428b      	cmp	r3, r1
 800d7ba:	bf01      	itttt	eq
 800d7bc:	6819      	ldreq	r1, [r3, #0]
 800d7be:	685b      	ldreq	r3, [r3, #4]
 800d7c0:	1809      	addeq	r1, r1, r0
 800d7c2:	6021      	streq	r1, [r4, #0]
 800d7c4:	e7ed      	b.n	800d7a2 <_free_r+0x1e>
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	b10b      	cbz	r3, 800d7d0 <_free_r+0x4c>
 800d7cc:	42a3      	cmp	r3, r4
 800d7ce:	d9fa      	bls.n	800d7c6 <_free_r+0x42>
 800d7d0:	6811      	ldr	r1, [r2, #0]
 800d7d2:	1850      	adds	r0, r2, r1
 800d7d4:	42a0      	cmp	r0, r4
 800d7d6:	d10b      	bne.n	800d7f0 <_free_r+0x6c>
 800d7d8:	6820      	ldr	r0, [r4, #0]
 800d7da:	4401      	add	r1, r0
 800d7dc:	1850      	adds	r0, r2, r1
 800d7de:	4283      	cmp	r3, r0
 800d7e0:	6011      	str	r1, [r2, #0]
 800d7e2:	d1e0      	bne.n	800d7a6 <_free_r+0x22>
 800d7e4:	6818      	ldr	r0, [r3, #0]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	6053      	str	r3, [r2, #4]
 800d7ea:	4408      	add	r0, r1
 800d7ec:	6010      	str	r0, [r2, #0]
 800d7ee:	e7da      	b.n	800d7a6 <_free_r+0x22>
 800d7f0:	d902      	bls.n	800d7f8 <_free_r+0x74>
 800d7f2:	230c      	movs	r3, #12
 800d7f4:	602b      	str	r3, [r5, #0]
 800d7f6:	e7d6      	b.n	800d7a6 <_free_r+0x22>
 800d7f8:	6820      	ldr	r0, [r4, #0]
 800d7fa:	1821      	adds	r1, r4, r0
 800d7fc:	428b      	cmp	r3, r1
 800d7fe:	bf04      	itt	eq
 800d800:	6819      	ldreq	r1, [r3, #0]
 800d802:	685b      	ldreq	r3, [r3, #4]
 800d804:	6063      	str	r3, [r4, #4]
 800d806:	bf04      	itt	eq
 800d808:	1809      	addeq	r1, r1, r0
 800d80a:	6021      	streq	r1, [r4, #0]
 800d80c:	6054      	str	r4, [r2, #4]
 800d80e:	e7ca      	b.n	800d7a6 <_free_r+0x22>
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	20000f2c 	.word	0x20000f2c

0800d818 <__ascii_mbtowc>:
 800d818:	b082      	sub	sp, #8
 800d81a:	b901      	cbnz	r1, 800d81e <__ascii_mbtowc+0x6>
 800d81c:	a901      	add	r1, sp, #4
 800d81e:	b142      	cbz	r2, 800d832 <__ascii_mbtowc+0x1a>
 800d820:	b14b      	cbz	r3, 800d836 <__ascii_mbtowc+0x1e>
 800d822:	7813      	ldrb	r3, [r2, #0]
 800d824:	600b      	str	r3, [r1, #0]
 800d826:	7812      	ldrb	r2, [r2, #0]
 800d828:	1e10      	subs	r0, r2, #0
 800d82a:	bf18      	it	ne
 800d82c:	2001      	movne	r0, #1
 800d82e:	b002      	add	sp, #8
 800d830:	4770      	bx	lr
 800d832:	4610      	mov	r0, r2
 800d834:	e7fb      	b.n	800d82e <__ascii_mbtowc+0x16>
 800d836:	f06f 0001 	mvn.w	r0, #1
 800d83a:	e7f8      	b.n	800d82e <__ascii_mbtowc+0x16>

0800d83c <_malloc_usable_size_r>:
 800d83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d840:	1f18      	subs	r0, r3, #4
 800d842:	2b00      	cmp	r3, #0
 800d844:	bfbc      	itt	lt
 800d846:	580b      	ldrlt	r3, [r1, r0]
 800d848:	18c0      	addlt	r0, r0, r3
 800d84a:	4770      	bx	lr

0800d84c <__ascii_wctomb>:
 800d84c:	4603      	mov	r3, r0
 800d84e:	4608      	mov	r0, r1
 800d850:	b141      	cbz	r1, 800d864 <__ascii_wctomb+0x18>
 800d852:	2aff      	cmp	r2, #255	@ 0xff
 800d854:	d904      	bls.n	800d860 <__ascii_wctomb+0x14>
 800d856:	228a      	movs	r2, #138	@ 0x8a
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d85e:	4770      	bx	lr
 800d860:	700a      	strb	r2, [r1, #0]
 800d862:	2001      	movs	r0, #1
 800d864:	4770      	bx	lr

0800d866 <_raise_r>:
 800d866:	291f      	cmp	r1, #31
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4605      	mov	r5, r0
 800d86c:	460c      	mov	r4, r1
 800d86e:	d904      	bls.n	800d87a <_raise_r+0x14>
 800d870:	2316      	movs	r3, #22
 800d872:	6003      	str	r3, [r0, #0]
 800d874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d878:	bd38      	pop	{r3, r4, r5, pc}
 800d87a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d87c:	b112      	cbz	r2, 800d884 <_raise_r+0x1e>
 800d87e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d882:	b94b      	cbnz	r3, 800d898 <_raise_r+0x32>
 800d884:	4628      	mov	r0, r5
 800d886:	f000 f831 	bl	800d8ec <_getpid_r>
 800d88a:	4622      	mov	r2, r4
 800d88c:	4601      	mov	r1, r0
 800d88e:	4628      	mov	r0, r5
 800d890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d894:	f000 b818 	b.w	800d8c8 <_kill_r>
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d00a      	beq.n	800d8b2 <_raise_r+0x4c>
 800d89c:	1c59      	adds	r1, r3, #1
 800d89e:	d103      	bne.n	800d8a8 <_raise_r+0x42>
 800d8a0:	2316      	movs	r3, #22
 800d8a2:	6003      	str	r3, [r0, #0]
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	e7e7      	b.n	800d878 <_raise_r+0x12>
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	4798      	blx	r3
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	e7e0      	b.n	800d878 <_raise_r+0x12>
	...

0800d8b8 <raise>:
 800d8b8:	4b02      	ldr	r3, [pc, #8]	@ (800d8c4 <raise+0xc>)
 800d8ba:	4601      	mov	r1, r0
 800d8bc:	6818      	ldr	r0, [r3, #0]
 800d8be:	f7ff bfd2 	b.w	800d866 <_raise_r>
 800d8c2:	bf00      	nop
 800d8c4:	20000104 	.word	0x20000104

0800d8c8 <_kill_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d07      	ldr	r5, [pc, #28]	@ (800d8e8 <_kill_r+0x20>)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	f7f4 f939 	bl	8001b4c <_kill>
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	d102      	bne.n	800d8e4 <_kill_r+0x1c>
 800d8de:	682b      	ldr	r3, [r5, #0]
 800d8e0:	b103      	cbz	r3, 800d8e4 <_kill_r+0x1c>
 800d8e2:	6023      	str	r3, [r4, #0]
 800d8e4:	bd38      	pop	{r3, r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000f30 	.word	0x20000f30

0800d8ec <_getpid_r>:
 800d8ec:	f7f4 b926 	b.w	8001b3c <_getpid>

0800d8f0 <_init>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	bf00      	nop
 800d8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f6:	bc08      	pop	{r3}
 800d8f8:	469e      	mov	lr, r3
 800d8fa:	4770      	bx	lr

0800d8fc <_fini>:
 800d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fe:	bf00      	nop
 800d900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d902:	bc08      	pop	{r3}
 800d904:	469e      	mov	lr, r3
 800d906:	4770      	bx	lr
